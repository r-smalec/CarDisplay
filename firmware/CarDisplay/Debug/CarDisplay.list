
CarDisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e08  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d98  08005f94  08005f94  00015f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d2c  08008d2c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08008d2c  08008d2c  00018d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d34  08008d34  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d34  08008d34  00018d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d38  08008d38  00018d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08008d3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000080  08008dbc  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08008dbc  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000149f1  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027fd  00000000  00000000  00034aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001248  00000000  00000000  000372a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010f8  00000000  00000000  000384e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023288  00000000  00000000  000395e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e12b  00000000  00000000  0005c868  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce419  00000000  00000000  0006a993  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00138dac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005244  00000000  00000000  00138e28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000080 	.word	0x20000080
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08005f7c 	.word	0x08005f7c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000084 	.word	0x20000084
 80001c8:	08005f7c 	.word	0x08005f7c

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f001 f800 	bl	80014d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 fa11 	bl	80008fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 fb7f 	bl	8000bdc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004de:	f000 fb4d 	bl	8000b7c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80004e2:	f000 fb1b 	bl	8000b1c <MX_USART1_UART_Init>
  MX_SPI3_Init();
 80004e6:	f000 fa8d 	bl	8000a04 <MX_SPI3_Init>
  MX_TIM2_Init();
 80004ea:	f000 fac9 	bl	8000a80 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	devState.switchActv = 0;
 80004ee:	4bb0      	ldr	r3, [pc, #704]	; (80007b0 <main+0x2e4>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	705a      	strb	r2, [r3, #1]

#ifdef DISP_ACTIVE
	DISP_Init(VERTICAL);
 80004f4:	2001      	movs	r0, #1
 80004f6:	f004 fba5 	bl	8004c44 <DISP_Init>
	DISP_NewImage(DISP_WIDTH, DISP_HEIGHT, 0, BLACK);
 80004fa:	2300      	movs	r3, #0
 80004fc:	2200      	movs	r2, #0
 80004fe:	21f0      	movs	r1, #240	; 0xf0
 8000500:	20f0      	movs	r0, #240	; 0xf0
 8000502:	f004 fc65 	bl	8004dd0 <DISP_NewImage>
//
//	// Waiting for pressing the switch
//	while(HAL_GPIO_ReadPin(D6_SWITCH_PIN));
//	HAL_Delay(100);

	paramScreenDisplay();
 8000506:	f000 fc59 	bl	8000dbc <paramScreenDisplay>
	//gearboxScreenDisplay();

	ecuVal.IAT = 40;
 800050a:	4baa      	ldr	r3, [pc, #680]	; (80007b4 <main+0x2e8>)
 800050c:	2228      	movs	r2, #40	; 0x28
 800050e:	709a      	strb	r2, [r3, #2]
	ecuVal.batt_v = 12.6;
 8000510:	4ba8      	ldr	r3, [pc, #672]	; (80007b4 <main+0x2e8>)
 8000512:	4aa9      	ldr	r2, [pc, #676]	; (80007b8 <main+0x2ec>)
 8000514:	605a      	str	r2, [r3, #4]
	ecuVal.oil_bar = 3.5;
 8000516:	4ba7      	ldr	r3, [pc, #668]	; (80007b4 <main+0x2e8>)
 8000518:	4aa8      	ldr	r2, [pc, #672]	; (80007bc <main+0x2f0>)
 800051a:	609a      	str	r2, [r3, #8]
	ecuVal.oil_temp = 90;
 800051c:	4ba5      	ldr	r3, [pc, #660]	; (80007b4 <main+0x2e8>)
 800051e:	225a      	movs	r2, #90	; 0x5a
 8000520:	731a      	strb	r2, [r3, #12]
	ecuVal.CLT = 90;
 8000522:	4ba4      	ldr	r3, [pc, #656]	; (80007b4 <main+0x2e8>)
 8000524:	225a      	movs	r2, #90	; 0x5a
 8000526:	81da      	strh	r2, [r3, #14]
	ecuVal.lambda = 12.6;
 8000528:	4ba2      	ldr	r3, [pc, #648]	; (80007b4 <main+0x2e8>)
 800052a:	4aa3      	ldr	r2, [pc, #652]	; (80007b8 <main+0x2ec>)
 800052c:	611a      	str	r2, [r3, #16]

	vehicleVal.actGear = 3;
 800052e:	4ba4      	ldr	r3, [pc, #656]	; (80007c0 <main+0x2f4>)
 8000530:	2203      	movs	r2, #3
 8000532:	761a      	strb	r2, [r3, #24]

	vehicleVal.gearRatio[0] = 1;
 8000534:	4ba2      	ldr	r3, [pc, #648]	; (80007c0 <main+0x2f4>)
 8000536:	2201      	movs	r2, #1
 8000538:	801a      	strh	r2, [r3, #0]
	vehicleVal.gearRatio[1] = 442;
 800053a:	4ba1      	ldr	r3, [pc, #644]	; (80007c0 <main+0x2f4>)
 800053c:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
 8000540:	805a      	strh	r2, [r3, #2]
	vehicleVal.gearRatio[2] = 230;
 8000542:	4b9f      	ldr	r3, [pc, #636]	; (80007c0 <main+0x2f4>)
 8000544:	22e6      	movs	r2, #230	; 0xe6
 8000546:	809a      	strh	r2, [r3, #4]
	vehicleVal.gearRatio[3] = 167;
 8000548:	4b9d      	ldr	r3, [pc, #628]	; (80007c0 <main+0x2f4>)
 800054a:	22a7      	movs	r2, #167	; 0xa7
 800054c:	80da      	strh	r2, [r3, #6]
	vehicleVal.gearRatio[4] = 119;
 800054e:	4b9c      	ldr	r3, [pc, #624]	; (80007c0 <main+0x2f4>)
 8000550:	2277      	movs	r2, #119	; 0x77
 8000552:	811a      	strh	r2, [r3, #8]
	vehicleVal.gearRatio[5] = 100;
 8000554:	4b9a      	ldr	r3, [pc, #616]	; (80007c0 <main+0x2f4>)
 8000556:	2264      	movs	r2, #100	; 0x64
 8000558:	815a      	strh	r2, [r3, #10]

	vehicleVal.revGear[1] = 5000;
 800055a:	4b99      	ldr	r3, [pc, #612]	; (80007c0 <main+0x2f4>)
 800055c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000560:	81da      	strh	r2, [r3, #14]
	for(int i = 2; i <= 5 ; i++) {
 8000562:	2302      	movs	r3, #2
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	e01f      	b.n	80005a8 <main+0xdc>
		vehicleVal.revGear[i] = vehicleVal.revGear[i-1] * vehicleVal.gearRatio[i] / vehicleVal.gearRatio[i-1];
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	3b01      	subs	r3, #1
 800056c:	4a94      	ldr	r2, [pc, #592]	; (80007c0 <main+0x2f4>)
 800056e:	3304      	adds	r3, #4
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	4413      	add	r3, r2
 8000574:	889b      	ldrh	r3, [r3, #4]
 8000576:	4619      	mov	r1, r3
 8000578:	4a91      	ldr	r2, [pc, #580]	; (80007c0 <main+0x2f4>)
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000580:	fb03 f301 	mul.w	r3, r3, r1
 8000584:	68fa      	ldr	r2, [r7, #12]
 8000586:	3a01      	subs	r2, #1
 8000588:	498d      	ldr	r1, [pc, #564]	; (80007c0 <main+0x2f4>)
 800058a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800058e:	fb93 f3f2 	sdiv	r3, r3, r2
 8000592:	b299      	uxth	r1, r3
 8000594:	4a8a      	ldr	r2, [pc, #552]	; (80007c0 <main+0x2f4>)
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	3304      	adds	r3, #4
 800059a:	005b      	lsls	r3, r3, #1
 800059c:	4413      	add	r3, r2
 800059e:	460a      	mov	r2, r1
 80005a0:	809a      	strh	r2, [r3, #4]
	for(int i = 2; i <= 5 ; i++) {
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	3301      	adds	r3, #1
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	2b05      	cmp	r3, #5
 80005ac:	dddc      	ble.n	8000568 <main+0x9c>
	}
#endif

	__HAL_RCC_TIM2_CLK_ENABLE();
 80005ae:	4b85      	ldr	r3, [pc, #532]	; (80007c4 <main+0x2f8>)
 80005b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005b2:	4a84      	ldr	r2, [pc, #528]	; (80007c4 <main+0x2f8>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6593      	str	r3, [r2, #88]	; 0x58
 80005ba:	4b82      	ldr	r3, [pc, #520]	; (80007c4 <main+0x2f8>)
 80005bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80005c6:	201c      	movs	r0, #28
 80005c8:	f001 f90f 	bl	80017ea <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim2);
 80005cc:	487e      	ldr	r0, [pc, #504]	; (80007c8 <main+0x2fc>)
 80005ce:	f002 ff83 	bl	80034d8 <HAL_TIM_Base_Start_IT>
	vehicleVal.speedSensCnt = 0;
 80005d2:	4b7b      	ldr	r3, [pc, #492]	; (80007c0 <main+0x2f4>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	835a      	strh	r2, [r3, #26]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

#ifdef DISP_ACTIVE
	if(devState.switchActv) {
 80005d8:	4b75      	ldr	r3, [pc, #468]	; (80007b0 <main+0x2e4>)
 80005da:	785b      	ldrb	r3, [r3, #1]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	f000 8167 	beq.w	80008b0 <main+0x3e4>
		if(devState.screenNo == PARAM) {
 80005e2:	4b73      	ldr	r3, [pc, #460]	; (80007b0 <main+0x2e4>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	f040 8093 	bne.w	8000712 <main+0x246>
			DISP_DrawNum(105, 15, (int32_t)ecuVal.CLT, &Font24, BRRED, BLACK);
 80005ec:	4b71      	ldr	r3, [pc, #452]	; (80007b4 <main+0x2e8>)
 80005ee:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80005f2:	461a      	mov	r2, r3
 80005f4:	2300      	movs	r3, #0
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	f64f 4307 	movw	r3, #64519	; 0xfc07
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	4b73      	ldr	r3, [pc, #460]	; (80007cc <main+0x300>)
 8000600:	210f      	movs	r1, #15
 8000602:	2069      	movs	r0, #105	; 0x69
 8000604:	f004 ff1e 	bl	8005444 <DISP_DrawNum>
			DISP_DrawNum(40, 70, (int32_t)ecuVal.oil_temp, &Font24, BRRED, BLACK);
 8000608:	4b6a      	ldr	r3, [pc, #424]	; (80007b4 <main+0x2e8>)
 800060a:	7b1b      	ldrb	r3, [r3, #12]
 800060c:	461a      	mov	r2, r3
 800060e:	2300      	movs	r3, #0
 8000610:	9301      	str	r3, [sp, #4]
 8000612:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	4b6c      	ldr	r3, [pc, #432]	; (80007cc <main+0x300>)
 800061a:	2146      	movs	r1, #70	; 0x46
 800061c:	2028      	movs	r0, #40	; 0x28
 800061e:	f004 ff11 	bl	8005444 <DISP_DrawNum>
			DISP_DrawNum(160, 70, (int32_t)ecuVal.oil_bar, &Font24, BRRED, BLACK);
 8000622:	4b64      	ldr	r3, [pc, #400]	; (80007b4 <main+0x2e8>)
 8000624:	edd3 7a02 	vldr	s15, [r3, #8]
 8000628:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800062c:	2300      	movs	r3, #0
 800062e:	9301      	str	r3, [sp, #4]
 8000630:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	4b65      	ldr	r3, [pc, #404]	; (80007cc <main+0x300>)
 8000638:	ee17 2a90 	vmov	r2, s15
 800063c:	2146      	movs	r1, #70	; 0x46
 800063e:	20a0      	movs	r0, #160	; 0xa0
 8000640:	f004 ff00 	bl	8005444 <DISP_DrawNum>
			DISP_DrawNum(40, 130, (int32_t)ecuVal.batt_v, &Font24, BRRED, BLACK);
 8000644:	4b5b      	ldr	r3, [pc, #364]	; (80007b4 <main+0x2e8>)
 8000646:	edd3 7a01 	vldr	s15, [r3, #4]
 800064a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800064e:	2300      	movs	r3, #0
 8000650:	9301      	str	r3, [sp, #4]
 8000652:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	4b5c      	ldr	r3, [pc, #368]	; (80007cc <main+0x300>)
 800065a:	ee17 2a90 	vmov	r2, s15
 800065e:	2182      	movs	r1, #130	; 0x82
 8000660:	2028      	movs	r0, #40	; 0x28
 8000662:	f004 feef 	bl	8005444 <DISP_DrawNum>
			DISP_DrawNum(160, 130, (int32_t)ecuVal.lambda, &Font24, BRRED, BLACK);
 8000666:	4b53      	ldr	r3, [pc, #332]	; (80007b4 <main+0x2e8>)
 8000668:	edd3 7a04 	vldr	s15, [r3, #16]
 800066c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000670:	2300      	movs	r3, #0
 8000672:	9301      	str	r3, [sp, #4]
 8000674:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	4b54      	ldr	r3, [pc, #336]	; (80007cc <main+0x300>)
 800067c:	ee17 2a90 	vmov	r2, s15
 8000680:	2182      	movs	r1, #130	; 0x82
 8000682:	20a0      	movs	r0, #160	; 0xa0
 8000684:	f004 fede 	bl	8005444 <DISP_DrawNum>
			DISP_DrawNum(105, 207, (int32_t)ecuVal.IAT, &Font24, BRRED, BLACK);
 8000688:	4b4a      	ldr	r3, [pc, #296]	; (80007b4 <main+0x2e8>)
 800068a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800068e:	461a      	mov	r2, r3
 8000690:	2300      	movs	r3, #0
 8000692:	9301      	str	r3, [sp, #4]
 8000694:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	4b4c      	ldr	r3, [pc, #304]	; (80007cc <main+0x300>)
 800069c:	21cf      	movs	r1, #207	; 0xcf
 800069e:	2069      	movs	r0, #105	; 0x69
 80006a0:	f004 fed0 	bl	8005444 <DISP_DrawNum>
			ecuVal.oil_bar++;
 80006a4:	4b43      	ldr	r3, [pc, #268]	; (80007b4 <main+0x2e8>)
 80006a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80006aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80006ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80006b2:	4b40      	ldr	r3, [pc, #256]	; (80007b4 <main+0x2e8>)
 80006b4:	edc3 7a02 	vstr	s15, [r3, #8]
			ecuVal.oil_temp++;
 80006b8:	4b3e      	ldr	r3, [pc, #248]	; (80007b4 <main+0x2e8>)
 80006ba:	7b1b      	ldrb	r3, [r3, #12]
 80006bc:	3301      	adds	r3, #1
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	4b3c      	ldr	r3, [pc, #240]	; (80007b4 <main+0x2e8>)
 80006c2:	731a      	strb	r2, [r3, #12]
			ecuVal.batt_v++;
 80006c4:	4b3b      	ldr	r3, [pc, #236]	; (80007b4 <main+0x2e8>)
 80006c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80006ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80006ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80006d2:	4b38      	ldr	r3, [pc, #224]	; (80007b4 <main+0x2e8>)
 80006d4:	edc3 7a01 	vstr	s15, [r3, #4]
			ecuVal.lambda++;
 80006d8:	4b36      	ldr	r3, [pc, #216]	; (80007b4 <main+0x2e8>)
 80006da:	edd3 7a04 	vldr	s15, [r3, #16]
 80006de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80006e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80006e6:	4b33      	ldr	r3, [pc, #204]	; (80007b4 <main+0x2e8>)
 80006e8:	edc3 7a04 	vstr	s15, [r3, #16]
			ecuVal.CLT++;
 80006ec:	4b31      	ldr	r3, [pc, #196]	; (80007b4 <main+0x2e8>)
 80006ee:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	3301      	adds	r3, #1
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	b21a      	sxth	r2, r3
 80006fa:	4b2e      	ldr	r3, [pc, #184]	; (80007b4 <main+0x2e8>)
 80006fc:	81da      	strh	r2, [r3, #14]
			ecuVal.IAT++;
 80006fe:	4b2d      	ldr	r3, [pc, #180]	; (80007b4 <main+0x2e8>)
 8000700:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000704:	b2db      	uxtb	r3, r3
 8000706:	3301      	adds	r3, #1
 8000708:	b2db      	uxtb	r3, r3
 800070a:	b25a      	sxtb	r2, r3
 800070c:	4b29      	ldr	r3, [pc, #164]	; (80007b4 <main+0x2e8>)
 800070e:	709a      	strb	r2, [r3, #2]
 8000710:	e0b9      	b.n	8000886 <main+0x3ba>
		} else if(devState.screenNo == GEARBOX) {
 8000712:	4b27      	ldr	r3, [pc, #156]	; (80007b0 <main+0x2e4>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b02      	cmp	r3, #2
 8000718:	f040 80b5 	bne.w	8000886 <main+0x3ba>
			DISP_DrawNum(60, 18, (int32_t)vehicleVal.actSpeed, &Font24, BLACK, BRRED);
 800071c:	4b28      	ldr	r3, [pc, #160]	; (80007c0 <main+0x2f4>)
 800071e:	8b9b      	ldrh	r3, [r3, #28]
 8000720:	461a      	mov	r2, r3
 8000722:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000726:	9301      	str	r3, [sp, #4]
 8000728:	2300      	movs	r3, #0
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	4b27      	ldr	r3, [pc, #156]	; (80007cc <main+0x300>)
 800072e:	2112      	movs	r1, #18
 8000730:	203c      	movs	r0, #60	; 0x3c
 8000732:	f004 fe87 	bl	8005444 <DISP_DrawNum>
			DISP_DrawNum(60, 43, (int32_t)vehicleVal.fuelCons, &Font24, BLACK, BRRED);
 8000736:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <main+0x2f4>)
 8000738:	edd3 7a08 	vldr	s15, [r3, #32]
 800073c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000740:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000744:	9301      	str	r3, [sp, #4]
 8000746:	2300      	movs	r3, #0
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	4b20      	ldr	r3, [pc, #128]	; (80007cc <main+0x300>)
 800074c:	ee17 2a90 	vmov	r2, s15
 8000750:	212b      	movs	r1, #43	; 0x2b
 8000752:	203c      	movs	r0, #60	; 0x3c
 8000754:	f004 fe76 	bl	8005444 <DISP_DrawNum>
			DISP_DrawNum(130, 90,  vehicleVal.revGear[1], &Font24, ((vehicleVal.actGear == 1) ? BRRED : BLACK), ((vehicleVal.actGear == 1) ? BLACK : BRRED));
 8000758:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <main+0x2f4>)
 800075a:	89db      	ldrh	r3, [r3, #14]
 800075c:	4619      	mov	r1, r3
 800075e:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <main+0x2f4>)
 8000760:	7e1b      	ldrb	r3, [r3, #24]
 8000762:	2b01      	cmp	r3, #1
 8000764:	d102      	bne.n	800076c <main+0x2a0>
 8000766:	f64f 4307 	movw	r3, #64519	; 0xfc07
 800076a:	e000      	b.n	800076e <main+0x2a2>
 800076c:	2300      	movs	r3, #0
 800076e:	4a14      	ldr	r2, [pc, #80]	; (80007c0 <main+0x2f4>)
 8000770:	7e12      	ldrb	r2, [r2, #24]
 8000772:	2a01      	cmp	r2, #1
 8000774:	d101      	bne.n	800077a <main+0x2ae>
 8000776:	2200      	movs	r2, #0
 8000778:	e001      	b.n	800077e <main+0x2b2>
 800077a:	f64f 4207 	movw	r2, #64519	; 0xfc07
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	9300      	str	r3, [sp, #0]
 8000782:	4b12      	ldr	r3, [pc, #72]	; (80007cc <main+0x300>)
 8000784:	460a      	mov	r2, r1
 8000786:	215a      	movs	r1, #90	; 0x5a
 8000788:	2082      	movs	r0, #130	; 0x82
 800078a:	f004 fe5b 	bl	8005444 <DISP_DrawNum>
			DISP_DrawNum(130, 115, vehicleVal.revGear[2], &Font24, ((vehicleVal.actGear == 2) ? BRRED : BLACK), ((vehicleVal.actGear == 2) ? BLACK : BRRED));
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <main+0x2f4>)
 8000790:	8a1b      	ldrh	r3, [r3, #16]
 8000792:	4619      	mov	r1, r3
 8000794:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <main+0x2f4>)
 8000796:	7e1b      	ldrb	r3, [r3, #24]
 8000798:	2b02      	cmp	r3, #2
 800079a:	d102      	bne.n	80007a2 <main+0x2d6>
 800079c:	f64f 4307 	movw	r3, #64519	; 0xfc07
 80007a0:	e000      	b.n	80007a4 <main+0x2d8>
 80007a2:	2300      	movs	r3, #0
 80007a4:	4a06      	ldr	r2, [pc, #24]	; (80007c0 <main+0x2f4>)
 80007a6:	7e12      	ldrb	r2, [r2, #24]
 80007a8:	2a02      	cmp	r2, #2
 80007aa:	d111      	bne.n	80007d0 <main+0x304>
 80007ac:	2200      	movs	r2, #0
 80007ae:	e011      	b.n	80007d4 <main+0x308>
 80007b0:	20000284 	.word	0x20000284
 80007b4:	200001b0 	.word	0x200001b0
 80007b8:	4149999a 	.word	0x4149999a
 80007bc:	40600000 	.word	0x40600000
 80007c0:	200000a8 	.word	0x200000a8
 80007c4:	40021000 	.word	0x40021000
 80007c8:	200001c4 	.word	0x200001c4
 80007cc:	20000014 	.word	0x20000014
 80007d0:	f64f 4207 	movw	r2, #64519	; 0xfc07
 80007d4:	9201      	str	r2, [sp, #4]
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	4b41      	ldr	r3, [pc, #260]	; (80008e0 <main+0x414>)
 80007da:	460a      	mov	r2, r1
 80007dc:	2173      	movs	r1, #115	; 0x73
 80007de:	2082      	movs	r0, #130	; 0x82
 80007e0:	f004 fe30 	bl	8005444 <DISP_DrawNum>
			DISP_DrawNum(130, 140, vehicleVal.revGear[3], &Font24, ((vehicleVal.actGear == 3) ? BRRED : BLACK), ((vehicleVal.actGear == 3) ? BLACK : BRRED));
 80007e4:	4b3f      	ldr	r3, [pc, #252]	; (80008e4 <main+0x418>)
 80007e6:	8a5b      	ldrh	r3, [r3, #18]
 80007e8:	4619      	mov	r1, r3
 80007ea:	4b3e      	ldr	r3, [pc, #248]	; (80008e4 <main+0x418>)
 80007ec:	7e1b      	ldrb	r3, [r3, #24]
 80007ee:	2b03      	cmp	r3, #3
 80007f0:	d102      	bne.n	80007f8 <main+0x32c>
 80007f2:	f64f 4307 	movw	r3, #64519	; 0xfc07
 80007f6:	e000      	b.n	80007fa <main+0x32e>
 80007f8:	2300      	movs	r3, #0
 80007fa:	4a3a      	ldr	r2, [pc, #232]	; (80008e4 <main+0x418>)
 80007fc:	7e12      	ldrb	r2, [r2, #24]
 80007fe:	2a03      	cmp	r2, #3
 8000800:	d101      	bne.n	8000806 <main+0x33a>
 8000802:	2200      	movs	r2, #0
 8000804:	e001      	b.n	800080a <main+0x33e>
 8000806:	f64f 4207 	movw	r2, #64519	; 0xfc07
 800080a:	9201      	str	r2, [sp, #4]
 800080c:	9300      	str	r3, [sp, #0]
 800080e:	4b34      	ldr	r3, [pc, #208]	; (80008e0 <main+0x414>)
 8000810:	460a      	mov	r2, r1
 8000812:	218c      	movs	r1, #140	; 0x8c
 8000814:	2082      	movs	r0, #130	; 0x82
 8000816:	f004 fe15 	bl	8005444 <DISP_DrawNum>
			DISP_DrawNum(130, 165, vehicleVal.revGear[4], &Font24, ((vehicleVal.actGear == 4) ? BRRED : BLACK), ((vehicleVal.actGear == 4) ? BLACK : BRRED));
 800081a:	4b32      	ldr	r3, [pc, #200]	; (80008e4 <main+0x418>)
 800081c:	8a9b      	ldrh	r3, [r3, #20]
 800081e:	4619      	mov	r1, r3
 8000820:	4b30      	ldr	r3, [pc, #192]	; (80008e4 <main+0x418>)
 8000822:	7e1b      	ldrb	r3, [r3, #24]
 8000824:	2b04      	cmp	r3, #4
 8000826:	d102      	bne.n	800082e <main+0x362>
 8000828:	f64f 4307 	movw	r3, #64519	; 0xfc07
 800082c:	e000      	b.n	8000830 <main+0x364>
 800082e:	2300      	movs	r3, #0
 8000830:	4a2c      	ldr	r2, [pc, #176]	; (80008e4 <main+0x418>)
 8000832:	7e12      	ldrb	r2, [r2, #24]
 8000834:	2a04      	cmp	r2, #4
 8000836:	d101      	bne.n	800083c <main+0x370>
 8000838:	2200      	movs	r2, #0
 800083a:	e001      	b.n	8000840 <main+0x374>
 800083c:	f64f 4207 	movw	r2, #64519	; 0xfc07
 8000840:	9201      	str	r2, [sp, #4]
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	4b26      	ldr	r3, [pc, #152]	; (80008e0 <main+0x414>)
 8000846:	460a      	mov	r2, r1
 8000848:	21a5      	movs	r1, #165	; 0xa5
 800084a:	2082      	movs	r0, #130	; 0x82
 800084c:	f004 fdfa 	bl	8005444 <DISP_DrawNum>
			DISP_DrawNum(130, 190, vehicleVal.revGear[5], &Font24, ((vehicleVal.actGear == 5) ? BRRED : BLACK), ((vehicleVal.actGear == 5) ? BLACK : BRRED));
 8000850:	4b24      	ldr	r3, [pc, #144]	; (80008e4 <main+0x418>)
 8000852:	8adb      	ldrh	r3, [r3, #22]
 8000854:	4619      	mov	r1, r3
 8000856:	4b23      	ldr	r3, [pc, #140]	; (80008e4 <main+0x418>)
 8000858:	7e1b      	ldrb	r3, [r3, #24]
 800085a:	2b05      	cmp	r3, #5
 800085c:	d102      	bne.n	8000864 <main+0x398>
 800085e:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000862:	e000      	b.n	8000866 <main+0x39a>
 8000864:	2300      	movs	r3, #0
 8000866:	4a1f      	ldr	r2, [pc, #124]	; (80008e4 <main+0x418>)
 8000868:	7e12      	ldrb	r2, [r2, #24]
 800086a:	2a05      	cmp	r2, #5
 800086c:	d101      	bne.n	8000872 <main+0x3a6>
 800086e:	2200      	movs	r2, #0
 8000870:	e001      	b.n	8000876 <main+0x3aa>
 8000872:	f64f 4207 	movw	r2, #64519	; 0xfc07
 8000876:	9201      	str	r2, [sp, #4]
 8000878:	9300      	str	r3, [sp, #0]
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <main+0x414>)
 800087c:	460a      	mov	r2, r1
 800087e:	21be      	movs	r1, #190	; 0xbe
 8000880:	2082      	movs	r0, #130	; 0x82
 8000882:	f004 fddf 	bl	8005444 <DISP_DrawNum>
		}

		HAL_UART_Transmit(&huart2, "\nCnt ", 5, 100);
 8000886:	2364      	movs	r3, #100	; 0x64
 8000888:	2205      	movs	r2, #5
 800088a:	4917      	ldr	r1, [pc, #92]	; (80008e8 <main+0x41c>)
 800088c:	4817      	ldr	r0, [pc, #92]	; (80008ec <main+0x420>)
 800088e:	f003 fa1d 	bl	8003ccc <HAL_UART_Transmit>
		char b[4];
		itoa(vehicleVal.actSpeed, b, 10);
 8000892:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <main+0x418>)
 8000894:	8b9b      	ldrh	r3, [r3, #28]
 8000896:	4618      	mov	r0, r3
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	220a      	movs	r2, #10
 800089c:	4619      	mov	r1, r3
 800089e:	f004 febd 	bl	800561c <itoa>

		HAL_UART_Transmit(&huart2, b, 4, 100);
 80008a2:	1d39      	adds	r1, r7, #4
 80008a4:	2364      	movs	r3, #100	; 0x64
 80008a6:	2204      	movs	r2, #4
 80008a8:	4810      	ldr	r0, [pc, #64]	; (80008ec <main+0x420>)
 80008aa:	f003 fa0f 	bl	8003ccc <HAL_UART_Transmit>
 80008ae:	e00c      	b.n	80008ca <main+0x3fe>

	} else {
		if(devState.screenNo == CHANGE_TO_PARAM) {
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <main+0x424>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b03      	cmp	r3, #3
 80008b6:	d102      	bne.n	80008be <main+0x3f2>
			paramScreenDisplay();
 80008b8:	f000 fa80 	bl	8000dbc <paramScreenDisplay>
 80008bc:	e005      	b.n	80008ca <main+0x3fe>
		} else if(devState.screenNo == CHANGE_TO_GEARBOX) {
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <main+0x424>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b04      	cmp	r3, #4
 80008c4:	d101      	bne.n	80008ca <main+0x3fe>
			gearboxScreenDisplay();
 80008c6:	f000 fb1b 	bl	8000f00 <gearboxScreenDisplay>
//	uint32_t timerValue = __HAL_TIM_GET_COUNTER(&htim2);
//	HAL_UART_Transmit(&huart2, "\ntim2: ", 7, 100);
//	uint8_t b[4];
//	itoa(timerValue, b, 10);
//	HAL_UART_Transmit(&huart2, b, 4, 100);
	HAL_UART_Transmit(&huart1, "123aaa", 5, 100);
 80008ca:	2364      	movs	r3, #100	; 0x64
 80008cc:	2205      	movs	r2, #5
 80008ce:	4909      	ldr	r1, [pc, #36]	; (80008f4 <main+0x428>)
 80008d0:	4809      	ldr	r0, [pc, #36]	; (80008f8 <main+0x42c>)
 80008d2:	f003 f9fb 	bl	8003ccc <HAL_UART_Transmit>
	HAL_Delay(800);
 80008d6:	f44f 7048 	mov.w	r0, #800	; 0x320
 80008da:	f000 fe6d 	bl	80015b8 <HAL_Delay>
	if(devState.switchActv) {
 80008de:	e67b      	b.n	80005d8 <main+0x10c>
 80008e0:	20000014 	.word	0x20000014
 80008e4:	200000a8 	.word	0x200000a8
 80008e8:	08005f94 	.word	0x08005f94
 80008ec:	20000204 	.word	0x20000204
 80008f0:	20000284 	.word	0x20000284
 80008f4:	08005f9c 	.word	0x08005f9c
 80008f8:	20000130 	.word	0x20000130

080008fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b0ac      	sub	sp, #176	; 0xb0
 8000900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000902:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000906:	2244      	movs	r2, #68	; 0x44
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f004 fe88 	bl	8005620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000910:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	2254      	movs	r2, #84	; 0x54
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f004 fe7a 	bl	8005620 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800092c:	f001 f912 	bl	8001b54 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000930:	4b33      	ldr	r3, [pc, #204]	; (8000a00 <SystemClock_Config+0x104>)
 8000932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000936:	4a32      	ldr	r2, [pc, #200]	; (8000a00 <SystemClock_Config+0x104>)
 8000938:	f023 0318 	bic.w	r3, r3, #24
 800093c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000940:	2314      	movs	r3, #20
 8000942:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000944:	2301      	movs	r3, #1
 8000946:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000948:	2301      	movs	r3, #1
 800094a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000954:	2360      	movs	r3, #96	; 0x60
 8000956:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095a:	2302      	movs	r3, #2
 800095c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000960:	2301      	movs	r3, #1
 8000962:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000966:	2301      	movs	r3, #1
 8000968:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 800096c:	2310      	movs	r3, #16
 800096e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000972:	2307      	movs	r3, #7
 8000974:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000978:	2302      	movs	r3, #2
 800097a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800097e:	2302      	movs	r3, #2
 8000980:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000984:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000988:	4618      	mov	r0, r3
 800098a:	f001 f957 	bl	8001c3c <HAL_RCC_OscConfig>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000994:	f000 fb56 	bl	8001044 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000998:	230f      	movs	r3, #15
 800099a:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800099c:	2303      	movs	r3, #3
 800099e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a0:	2300      	movs	r3, #0
 80009a2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a8:	2300      	movs	r3, #0
 80009aa:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009b0:	2101      	movs	r1, #1
 80009b2:	4618      	mov	r0, r3
 80009b4:	f001 fd62 	bl	800247c <HAL_RCC_ClockConfig>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80009be:	f000 fb41 	bl	8001044 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80009c2:	2303      	movs	r3, #3
 80009c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	4618      	mov	r0, r3
 80009d2:	f001 ff57 	bl	8002884 <HAL_RCCEx_PeriphCLKConfig>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80009dc:	f000 fb32 	bl	8001044 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009e4:	f001 f8d4 	bl	8001b90 <HAL_PWREx_ControlVoltageScaling>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80009ee:	f000 fb29 	bl	8001044 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80009f2:	f002 f939 	bl	8002c68 <HAL_RCCEx_EnableMSIPLLMode>
}
 80009f6:	bf00      	nop
 80009f8:	37b0      	adds	r7, #176	; 0xb0
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40021000 	.word	0x40021000

08000a04 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a08:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a0a:	4a1c      	ldr	r2, [pc, #112]	; (8000a7c <MX_SPI3_Init+0x78>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a0e:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a14:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a16:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a1c:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a1e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a22:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a24:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a2a:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a30:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a36:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a3a:	2210      	movs	r2, #16
 8000a3c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a50:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a52:	2207      	movs	r2, #7
 8000a54:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a56:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a5e:	2208      	movs	r2, #8
 8000a60:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a62:	4805      	ldr	r0, [pc, #20]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a64:	f002 fa00 	bl	8002e68 <HAL_SPI_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000a6e:	f000 fae9 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	200000cc 	.word	0x200000cc
 8000a7c:	40003c00 	.word	0x40003c00

08000a80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b088      	sub	sp, #32
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a86:	f107 0310 	add.w	r3, r7, #16
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a9e:	4b1e      	ldr	r3, [pc, #120]	; (8000b18 <MX_TIM2_Init+0x98>)
 8000aa0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aa4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 8000aa6:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <MX_TIM2_Init+0x98>)
 8000aa8:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000aac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aae:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <MX_TIM2_Init+0x98>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000ab4:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <MX_TIM2_Init+0x98>)
 8000ab6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000abc:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <MX_TIM2_Init+0x98>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <MX_TIM2_Init+0x98>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ac8:	4813      	ldr	r0, [pc, #76]	; (8000b18 <MX_TIM2_Init+0x98>)
 8000aca:	f002 fcda 	bl	8003482 <HAL_TIM_Base_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000ad4:	f000 fab6 	bl	8001044 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000adc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ade:	f107 0310 	add.w	r3, r7, #16
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	480c      	ldr	r0, [pc, #48]	; (8000b18 <MX_TIM2_Init+0x98>)
 8000ae6:	f002 fe40 	bl	800376a <HAL_TIM_ConfigClockSource>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000af0:	f000 faa8 	bl	8001044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af4:	2300      	movs	r3, #0
 8000af6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	4619      	mov	r1, r3
 8000b00:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_TIM2_Init+0x98>)
 8000b02:	f003 f811 	bl	8003b28 <HAL_TIMEx_MasterConfigSynchronization>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000b0c:	f000 fa9a 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b10:	bf00      	nop
 8000b12:	3720      	adds	r7, #32
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	200001c4 	.word	0x200001c4

08000b1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <MX_USART1_UART_Init+0x58>)
 8000b22:	4a15      	ldr	r2, [pc, #84]	; (8000b78 <MX_USART1_UART_Init+0x5c>)
 8000b24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8000b26:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <MX_USART1_UART_Init+0x58>)
 8000b28:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000b2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2e:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <MX_USART1_UART_Init+0x58>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <MX_USART1_UART_Init+0x58>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <MX_USART1_UART_Init+0x58>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <MX_USART1_UART_Init+0x58>)
 8000b42:	220c      	movs	r2, #12
 8000b44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <MX_USART1_UART_Init+0x58>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <MX_USART1_UART_Init+0x58>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <MX_USART1_UART_Init+0x58>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <MX_USART1_UART_Init+0x58>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b5e:	4805      	ldr	r0, [pc, #20]	; (8000b74 <MX_USART1_UART_Init+0x58>)
 8000b60:	f003 f866 	bl	8003c30 <HAL_UART_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b6a:	f000 fa6b 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000130 	.word	0x20000130
 8000b78:	40013800 	.word	0x40013800

08000b7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000b82:	4a15      	ldr	r2, [pc, #84]	; (8000bd8 <MX_USART2_UART_Init+0x5c>)
 8000b84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000b86:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000b88:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bac:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bb2:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bbe:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000bc0:	f003 f836 	bl	8003c30 <HAL_UART_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bca:	f000 fa3b 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000204 	.word	0x20000204
 8000bd8:	40004400 	.word	0x40004400

08000bdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	f107 030c 	add.w	r3, r7, #12
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf2:	4b3e      	ldr	r3, [pc, #248]	; (8000cec <MX_GPIO_Init+0x110>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf6:	4a3d      	ldr	r2, [pc, #244]	; (8000cec <MX_GPIO_Init+0x110>)
 8000bf8:	f043 0304 	orr.w	r3, r3, #4
 8000bfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bfe:	4b3b      	ldr	r3, [pc, #236]	; (8000cec <MX_GPIO_Init+0x110>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c02:	f003 0304 	and.w	r3, r3, #4
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	4b38      	ldr	r3, [pc, #224]	; (8000cec <MX_GPIO_Init+0x110>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0e:	4a37      	ldr	r2, [pc, #220]	; (8000cec <MX_GPIO_Init+0x110>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c16:	4b35      	ldr	r3, [pc, #212]	; (8000cec <MX_GPIO_Init+0x110>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c22:	4b32      	ldr	r3, [pc, #200]	; (8000cec <MX_GPIO_Init+0x110>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c26:	4a31      	ldr	r2, [pc, #196]	; (8000cec <MX_GPIO_Init+0x110>)
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c2e:	4b2f      	ldr	r3, [pc, #188]	; (8000cec <MX_GPIO_Init+0x110>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A3_DISP_CS_Pin|D2_DISP_BL_Pin, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f241 0110 	movw	r1, #4112	; 0x1010
 8000c40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c44:	f000 ff56 	bl	8001af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D3_DISP_RST_Pin|D4_DISP_DC_Pin, GPIO_PIN_RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2181      	movs	r1, #129	; 0x81
 8000c4c:	4828      	ldr	r0, [pc, #160]	; (8000cf0 <MX_GPIO_Init+0x114>)
 8000c4e:	f000 ff51 	bl	8001af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A3_DISP_CS_Pin D2_DISP_BL_Pin */
  GPIO_InitStruct.Pin = A3_DISP_CS_Pin|D2_DISP_BL_Pin;
 8000c52:	f241 0310 	movw	r3, #4112	; 0x1010
 8000c56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c6e:	f000 fdd7 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pins : D3_DISP_RST_Pin D4_DISP_DC_Pin */
  GPIO_InitStruct.Pin = D3_DISP_RST_Pin|D4_DISP_DC_Pin;
 8000c72:	2381      	movs	r3, #129	; 0x81
 8000c74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c76:	2301      	movs	r3, #1
 8000c78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c82:	f107 030c 	add.w	r3, r7, #12
 8000c86:	4619      	mov	r1, r3
 8000c88:	4819      	ldr	r0, [pc, #100]	; (8000cf0 <MX_GPIO_Init+0x114>)
 8000c8a:	f000 fdc9 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pin : D6_SWITCH_Pin */
  GPIO_InitStruct.Pin = D6_SWITCH_Pin;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c92:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <MX_GPIO_Init+0x118>)
 8000c94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(D6_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 030c 	add.w	r3, r7, #12
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4813      	ldr	r0, [pc, #76]	; (8000cf0 <MX_GPIO_Init+0x114>)
 8000ca2:	f000 fdbd 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pin : D9_SPEED_SENS_Pin */
  GPIO_InitStruct.Pin = D9_SPEED_SENS_Pin;
 8000ca6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000caa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <MX_GPIO_Init+0x11c>)
 8000cae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(D9_SPEED_SENS_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f107 030c 	add.w	r3, r7, #12
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cbe:	f000 fdaf 	bl	8001820 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2102      	movs	r1, #2
 8000cc6:	2007      	movs	r0, #7
 8000cc8:	f000 fd73 	bl	80017b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000ccc:	2007      	movs	r0, #7
 8000cce:	f000 fd8c 	bl	80017ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	2017      	movs	r0, #23
 8000cd8:	f000 fd6b 	bl	80017b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000cdc:	2017      	movs	r0, #23
 8000cde:	f000 fd84 	bl	80017ea <HAL_NVIC_EnableIRQ>

}
 8000ce2:	bf00      	nop
 8000ce4:	3720      	adds	r7, #32
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	48000400 	.word	0x48000400
 8000cf4:	10210000 	.word	0x10210000
 8000cf8:	10110000 	.word	0x10110000

08000cfc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	80fb      	strh	r3, [r7, #6]
///////////// SWITCH /////////////
	if(GPIO_Pin == D6_SWITCH_Pin && devState.switchActv) {
 8000d06:	88fb      	ldrh	r3, [r7, #6]
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d116      	bne.n	8000d3a <HAL_GPIO_EXTI_Callback+0x3e>
 8000d0c:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <HAL_GPIO_EXTI_Callback+0x74>)
 8000d0e:	785b      	ldrb	r3, [r3, #1]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d012      	beq.n	8000d3a <HAL_GPIO_EXTI_Callback+0x3e>

		devState.switchActv = 0;
 8000d14:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <HAL_GPIO_EXTI_Callback+0x74>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	705a      	strb	r2, [r3, #1]

		if(devState.screenNo == PARAM) {
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <HAL_GPIO_EXTI_Callback+0x74>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d103      	bne.n	8000d2a <HAL_GPIO_EXTI_Callback+0x2e>
			devState.screenNo = CHANGE_TO_GEARBOX;
 8000d22:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <HAL_GPIO_EXTI_Callback+0x74>)
 8000d24:	2204      	movs	r2, #4
 8000d26:	701a      	strb	r2, [r3, #0]
		if(devState.screenNo == PARAM) {
 8000d28:	e01a      	b.n	8000d60 <HAL_GPIO_EXTI_Callback+0x64>

		} else if(devState.screenNo == GEARBOX) {
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <HAL_GPIO_EXTI_Callback+0x74>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d116      	bne.n	8000d60 <HAL_GPIO_EXTI_Callback+0x64>
			devState.screenNo = CHANGE_TO_PARAM;
 8000d32:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <HAL_GPIO_EXTI_Callback+0x74>)
 8000d34:	2203      	movs	r2, #3
 8000d36:	701a      	strb	r2, [r3, #0]
		if(devState.screenNo == PARAM) {
 8000d38:	e012      	b.n	8000d60 <HAL_GPIO_EXTI_Callback+0x64>
		}
///////////// SPEED SENSOR /////////////
	} else if(GPIO_Pin == D9_SPEED_SENS_Pin) {
 8000d3a:	88fb      	ldrh	r3, [r7, #6]
 8000d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d40:	d10f      	bne.n	8000d62 <HAL_GPIO_EXTI_Callback+0x66>

		if(devState.switchActv) {
 8000d42:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <HAL_GPIO_EXTI_Callback+0x74>)
 8000d44:	785b      	ldrb	r3, [r3, #1]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d006      	beq.n	8000d58 <HAL_GPIO_EXTI_Callback+0x5c>
			vehicleVal.speedSensCnt++;
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <HAL_GPIO_EXTI_Callback+0x78>)
 8000d4c:	8b5b      	ldrh	r3, [r3, #26]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <HAL_GPIO_EXTI_Callback+0x78>)
 8000d54:	835a      	strh	r2, [r3, #26]

		} else {
			vehicleVal.speedSensCnt = 0;
		}
	}
}
 8000d56:	e004      	b.n	8000d62 <HAL_GPIO_EXTI_Callback+0x66>
			vehicleVal.speedSensCnt = 0;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <HAL_GPIO_EXTI_Callback+0x78>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	835a      	strh	r2, [r3, #26]
}
 8000d5e:	e000      	b.n	8000d62 <HAL_GPIO_EXTI_Callback+0x66>
		if(devState.screenNo == PARAM) {
 8000d60:	bf00      	nop
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	20000284 	.word	0x20000284
 8000d74:	200000a8 	.word	0x200000a8

08000d78 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]

	vehicleVal.actSpeed = vehicleVal.speedSensCnt * 110 / 78;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000d82:	8b5b      	ldrh	r3, [r3, #26]
 8000d84:	461a      	mov	r2, r3
 8000d86:	236e      	movs	r3, #110	; 0x6e
 8000d88:	fb03 f302 	mul.w	r3, r3, r2
 8000d8c:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000d8e:	fb82 1203 	smull	r1, r2, r2, r3
 8000d92:	441a      	add	r2, r3
 8000d94:	1192      	asrs	r2, r2, #6
 8000d96:	17db      	asrs	r3, r3, #31
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	b29a      	uxth	r2, r3
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000d9e:	839a      	strh	r2, [r3, #28]
	vehicleVal.speedSensCnt = 0;
 8000da0:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	835a      	strh	r2, [r3, #26]
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	200000a8 	.word	0x200000a8
 8000db8:	d20d20d3 	.word	0xd20d20d3

08000dbc <paramScreenDisplay>:
	DISP_DrawImage(gImage_samurai_logo_q4, 120, 120, 90, 90);

	devState.screenNo = LOGO;
}

void paramScreenDisplay() {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af04      	add	r7, sp, #16

	DISP_Clear(BLACK);
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	f003 ffa8 	bl	8004d18 <DISP_Clear>
	DISP_DrawString(65, 40, "WATER oC", &Font20, BLACK, BRRED);
 8000dc8:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000dcc:	9301      	str	r3, [sp, #4]
 8000dce:	2300      	movs	r3, #0
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	4b43      	ldr	r3, [pc, #268]	; (8000ee0 <paramScreenDisplay+0x124>)
 8000dd4:	4a43      	ldr	r2, [pc, #268]	; (8000ee4 <paramScreenDisplay+0x128>)
 8000dd6:	2128      	movs	r1, #40	; 0x28
 8000dd8:	2041      	movs	r0, #65	; 0x41
 8000dda:	f004 fadb 	bl	8005394 <DISP_DrawString>
	DISP_DrawLine(20, 60, 220, 60, BRRED, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
 8000dde:	2300      	movs	r3, #0
 8000de0:	9302      	str	r3, [sp, #8]
 8000de2:	2302      	movs	r3, #2
 8000de4:	9301      	str	r3, [sp, #4]
 8000de6:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	233c      	movs	r3, #60	; 0x3c
 8000dee:	22dc      	movs	r2, #220	; 0xdc
 8000df0:	213c      	movs	r1, #60	; 0x3c
 8000df2:	2014      	movs	r0, #20
 8000df4:	f004 f970 	bl	80050d8 <DISP_DrawLine>
	DISP_DrawLine(120, 60, 120, 120, BRRED, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
 8000df8:	2300      	movs	r3, #0
 8000dfa:	9302      	str	r3, [sp, #8]
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	9301      	str	r3, [sp, #4]
 8000e00:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	2378      	movs	r3, #120	; 0x78
 8000e08:	2278      	movs	r2, #120	; 0x78
 8000e0a:	213c      	movs	r1, #60	; 0x3c
 8000e0c:	2078      	movs	r0, #120	; 0x78
 8000e0e:	f004 f963 	bl	80050d8 <DISP_DrawLine>
	DISP_DrawString(25, 100, "OIL oC", &Font20, BLACK, BRRED);
 8000e12:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000e16:	9301      	str	r3, [sp, #4]
 8000e18:	2300      	movs	r3, #0
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	4b30      	ldr	r3, [pc, #192]	; (8000ee0 <paramScreenDisplay+0x124>)
 8000e1e:	4a32      	ldr	r2, [pc, #200]	; (8000ee8 <paramScreenDisplay+0x12c>)
 8000e20:	2164      	movs	r1, #100	; 0x64
 8000e22:	2019      	movs	r0, #25
 8000e24:	f004 fab6 	bl	8005394 <DISP_DrawString>
	DISP_DrawString(130, 100, "OIL bar", &Font20, BLACK, BRRED);
 8000e28:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000e2c:	9301      	str	r3, [sp, #4]
 8000e2e:	2300      	movs	r3, #0
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	4b2b      	ldr	r3, [pc, #172]	; (8000ee0 <paramScreenDisplay+0x124>)
 8000e34:	4a2d      	ldr	r2, [pc, #180]	; (8000eec <paramScreenDisplay+0x130>)
 8000e36:	2164      	movs	r1, #100	; 0x64
 8000e38:	2082      	movs	r0, #130	; 0x82
 8000e3a:	f004 faab 	bl	8005394 <DISP_DrawString>
	DISP_DrawLine(5, 120, 235, 120, BRRED, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
 8000e3e:	2300      	movs	r3, #0
 8000e40:	9302      	str	r3, [sp, #8]
 8000e42:	2302      	movs	r3, #2
 8000e44:	9301      	str	r3, [sp, #4]
 8000e46:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	2378      	movs	r3, #120	; 0x78
 8000e4e:	22eb      	movs	r2, #235	; 0xeb
 8000e50:	2178      	movs	r1, #120	; 0x78
 8000e52:	2005      	movs	r0, #5
 8000e54:	f004 f940 	bl	80050d8 <DISP_DrawLine>
	DISP_DrawLine(120, 120, 120, 180, BRRED, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
 8000e58:	2300      	movs	r3, #0
 8000e5a:	9302      	str	r3, [sp, #8]
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	9301      	str	r3, [sp, #4]
 8000e60:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	23b4      	movs	r3, #180	; 0xb4
 8000e68:	2278      	movs	r2, #120	; 0x78
 8000e6a:	2178      	movs	r1, #120	; 0x78
 8000e6c:	2078      	movs	r0, #120	; 0x78
 8000e6e:	f004 f933 	bl	80050d8 <DISP_DrawLine>
	DISP_DrawString(25, 160, "BATT V", &Font20, BLACK, BRRED);
 8000e72:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000e76:	9301      	str	r3, [sp, #4]
 8000e78:	2300      	movs	r3, #0
 8000e7a:	9300      	str	r3, [sp, #0]
 8000e7c:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <paramScreenDisplay+0x124>)
 8000e7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ef0 <paramScreenDisplay+0x134>)
 8000e80:	21a0      	movs	r1, #160	; 0xa0
 8000e82:	2019      	movs	r0, #25
 8000e84:	f004 fa86 	bl	8005394 <DISP_DrawString>
	DISP_DrawString(130, 160, "LAMBDA", &Font20, BLACK, BRRED);
 8000e88:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000e8c:	9301      	str	r3, [sp, #4]
 8000e8e:	2300      	movs	r3, #0
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <paramScreenDisplay+0x124>)
 8000e94:	4a17      	ldr	r2, [pc, #92]	; (8000ef4 <paramScreenDisplay+0x138>)
 8000e96:	21a0      	movs	r1, #160	; 0xa0
 8000e98:	2082      	movs	r0, #130	; 0x82
 8000e9a:	f004 fa7b 	bl	8005394 <DISP_DrawString>
	DISP_DrawLine(20, 180, 220, 180, BRRED, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	9302      	str	r3, [sp, #8]
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	9301      	str	r3, [sp, #4]
 8000ea6:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000eaa:	9300      	str	r3, [sp, #0]
 8000eac:	23b4      	movs	r3, #180	; 0xb4
 8000eae:	22dc      	movs	r2, #220	; 0xdc
 8000eb0:	21b4      	movs	r1, #180	; 0xb4
 8000eb2:	2014      	movs	r0, #20
 8000eb4:	f004 f910 	bl	80050d8 <DISP_DrawLine>
	DISP_DrawString(75, 182, "IAT oC", &Font20, BLACK, BRRED);
 8000eb8:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000ebc:	9301      	str	r3, [sp, #4]
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <paramScreenDisplay+0x124>)
 8000ec4:	4a0c      	ldr	r2, [pc, #48]	; (8000ef8 <paramScreenDisplay+0x13c>)
 8000ec6:	21b6      	movs	r1, #182	; 0xb6
 8000ec8:	204b      	movs	r0, #75	; 0x4b
 8000eca:	f004 fa63 	bl	8005394 <DISP_DrawString>

	devState.screenNo = PARAM;
 8000ece:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <paramScreenDisplay+0x140>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	701a      	strb	r2, [r3, #0]
	devState.switchActv = 1;
 8000ed4:	4b09      	ldr	r3, [pc, #36]	; (8000efc <paramScreenDisplay+0x140>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	705a      	strb	r2, [r3, #1]
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	2000000c 	.word	0x2000000c
 8000ee4:	08005fa4 	.word	0x08005fa4
 8000ee8:	08005fb0 	.word	0x08005fb0
 8000eec:	08005fb8 	.word	0x08005fb8
 8000ef0:	08005fc0 	.word	0x08005fc0
 8000ef4:	08005fc8 	.word	0x08005fc8
 8000ef8:	08005fd0 	.word	0x08005fd0
 8000efc:	20000284 	.word	0x20000284

08000f00 <gearboxScreenDisplay>:

void gearboxScreenDisplay() {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af04      	add	r7, sp, #16

	DISP_Clear(BLACK);
 8000f06:	2000      	movs	r0, #0
 8000f08:	f003 ff06 	bl	8004d18 <DISP_Clear>
	DISP_DrawString(120, 18, "km/h", &Font20, BLACK, BRRED);
 8000f0c:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000f10:	9301      	str	r3, [sp, #4]
 8000f12:	2300      	movs	r3, #0
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	4b40      	ldr	r3, [pc, #256]	; (8001018 <gearboxScreenDisplay+0x118>)
 8000f18:	4a40      	ldr	r2, [pc, #256]	; (800101c <gearboxScreenDisplay+0x11c>)
 8000f1a:	2112      	movs	r1, #18
 8000f1c:	2078      	movs	r0, #120	; 0x78
 8000f1e:	f004 fa39 	bl	8005394 <DISP_DrawString>
	DISP_DrawString(120, 43, "l/100km", &Font20, BLACK, BRRED);
 8000f22:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000f26:	9301      	str	r3, [sp, #4]
 8000f28:	2300      	movs	r3, #0
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	4b3a      	ldr	r3, [pc, #232]	; (8001018 <gearboxScreenDisplay+0x118>)
 8000f2e:	4a3c      	ldr	r2, [pc, #240]	; (8001020 <gearboxScreenDisplay+0x120>)
 8000f30:	212b      	movs	r1, #43	; 0x2b
 8000f32:	2078      	movs	r0, #120	; 0x78
 8000f34:	f004 fa2e 	bl	8005394 <DISP_DrawString>
	DISP_DrawLine(20, 68, 220, 68, BRRED, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
 8000f38:	2300      	movs	r3, #0
 8000f3a:	9302      	str	r3, [sp, #8]
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	9301      	str	r3, [sp, #4]
 8000f40:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	2344      	movs	r3, #68	; 0x44
 8000f48:	22dc      	movs	r2, #220	; 0xdc
 8000f4a:	2144      	movs	r1, #68	; 0x44
 8000f4c:	2014      	movs	r0, #20
 8000f4e:	f004 f8c3 	bl	80050d8 <DISP_DrawLine>
	DISP_DrawLine(105, 68, 105, 220, BRRED, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
 8000f52:	2300      	movs	r3, #0
 8000f54:	9302      	str	r3, [sp, #8]
 8000f56:	2302      	movs	r3, #2
 8000f58:	9301      	str	r3, [sp, #4]
 8000f5a:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	23dc      	movs	r3, #220	; 0xdc
 8000f62:	2269      	movs	r2, #105	; 0x69
 8000f64:	2144      	movs	r1, #68	; 0x44
 8000f66:	2069      	movs	r0, #105	; 0x69
 8000f68:	f004 f8b6 	bl	80050d8 <DISP_DrawLine>
	DISP_DrawString(40, 70, "GEAR", &Font20, BLACK, BRRED);
 8000f6c:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000f70:	9301      	str	r3, [sp, #4]
 8000f72:	2300      	movs	r3, #0
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	4b28      	ldr	r3, [pc, #160]	; (8001018 <gearboxScreenDisplay+0x118>)
 8000f78:	4a2a      	ldr	r2, [pc, #168]	; (8001024 <gearboxScreenDisplay+0x124>)
 8000f7a:	2146      	movs	r1, #70	; 0x46
 8000f7c:	2028      	movs	r0, #40	; 0x28
 8000f7e:	f004 fa09 	bl	8005394 <DISP_DrawString>
	DISP_DrawString(130, 70, "RPM", &Font20, BLACK, BRRED);
 8000f82:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000f86:	9301      	str	r3, [sp, #4]
 8000f88:	2300      	movs	r3, #0
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	4b22      	ldr	r3, [pc, #136]	; (8001018 <gearboxScreenDisplay+0x118>)
 8000f8e:	4a26      	ldr	r2, [pc, #152]	; (8001028 <gearboxScreenDisplay+0x128>)
 8000f90:	2146      	movs	r1, #70	; 0x46
 8000f92:	2082      	movs	r0, #130	; 0x82
 8000f94:	f004 f9fe 	bl	8005394 <DISP_DrawString>
	DISP_DrawString(60, 90, "1", &Font20, BLACK, BRRED);
 8000f98:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000f9c:	9301      	str	r3, [sp, #4]
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <gearboxScreenDisplay+0x118>)
 8000fa4:	4a21      	ldr	r2, [pc, #132]	; (800102c <gearboxScreenDisplay+0x12c>)
 8000fa6:	215a      	movs	r1, #90	; 0x5a
 8000fa8:	203c      	movs	r0, #60	; 0x3c
 8000faa:	f004 f9f3 	bl	8005394 <DISP_DrawString>
	DISP_DrawString(60, 115, "2", &Font20, BLACK, BRRED);
 8000fae:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	4b17      	ldr	r3, [pc, #92]	; (8001018 <gearboxScreenDisplay+0x118>)
 8000fba:	4a1d      	ldr	r2, [pc, #116]	; (8001030 <gearboxScreenDisplay+0x130>)
 8000fbc:	2173      	movs	r1, #115	; 0x73
 8000fbe:	203c      	movs	r0, #60	; 0x3c
 8000fc0:	f004 f9e8 	bl	8005394 <DISP_DrawString>
	DISP_DrawString(60, 140, "3", &Font20, BLACK, BRRED);
 8000fc4:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000fc8:	9301      	str	r3, [sp, #4]
 8000fca:	2300      	movs	r3, #0
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	4b12      	ldr	r3, [pc, #72]	; (8001018 <gearboxScreenDisplay+0x118>)
 8000fd0:	4a18      	ldr	r2, [pc, #96]	; (8001034 <gearboxScreenDisplay+0x134>)
 8000fd2:	218c      	movs	r1, #140	; 0x8c
 8000fd4:	203c      	movs	r0, #60	; 0x3c
 8000fd6:	f004 f9dd 	bl	8005394 <DISP_DrawString>
	DISP_DrawString(60, 165, "4", &Font20, BLACK, BRRED);
 8000fda:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000fde:	9301      	str	r3, [sp, #4]
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <gearboxScreenDisplay+0x118>)
 8000fe6:	4a14      	ldr	r2, [pc, #80]	; (8001038 <gearboxScreenDisplay+0x138>)
 8000fe8:	21a5      	movs	r1, #165	; 0xa5
 8000fea:	203c      	movs	r0, #60	; 0x3c
 8000fec:	f004 f9d2 	bl	8005394 <DISP_DrawString>
	DISP_DrawString(60, 190, "5", &Font20, BLACK, BRRED);
 8000ff0:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000ff4:	9301      	str	r3, [sp, #4]
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	4b07      	ldr	r3, [pc, #28]	; (8001018 <gearboxScreenDisplay+0x118>)
 8000ffc:	4a0f      	ldr	r2, [pc, #60]	; (800103c <gearboxScreenDisplay+0x13c>)
 8000ffe:	21be      	movs	r1, #190	; 0xbe
 8001000:	203c      	movs	r0, #60	; 0x3c
 8001002:	f004 f9c7 	bl	8005394 <DISP_DrawString>

	devState.screenNo = GEARBOX;
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <gearboxScreenDisplay+0x140>)
 8001008:	2202      	movs	r2, #2
 800100a:	701a      	strb	r2, [r3, #0]
	devState.switchActv = 1;
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <gearboxScreenDisplay+0x140>)
 800100e:	2201      	movs	r2, #1
 8001010:	705a      	strb	r2, [r3, #1]
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	2000000c 	.word	0x2000000c
 800101c:	08005fd8 	.word	0x08005fd8
 8001020:	08005fe0 	.word	0x08005fe0
 8001024:	08005fe8 	.word	0x08005fe8
 8001028:	08005ff0 	.word	0x08005ff0
 800102c:	08005ff4 	.word	0x08005ff4
 8001030:	08005ff8 	.word	0x08005ff8
 8001034:	08005ffc 	.word	0x08005ffc
 8001038:	08006000 	.word	0x08006000
 800103c:	08006004 	.word	0x08006004
 8001040:	20000284 	.word	0x20000284

08001044 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <HAL_MspInit+0x44>)
 800105c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800105e:	4a0e      	ldr	r2, [pc, #56]	; (8001098 <HAL_MspInit+0x44>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6613      	str	r3, [r2, #96]	; 0x60
 8001066:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <HAL_MspInit+0x44>)
 8001068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <HAL_MspInit+0x44>)
 8001074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001076:	4a08      	ldr	r2, [pc, #32]	; (8001098 <HAL_MspInit+0x44>)
 8001078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800107c:	6593      	str	r3, [r2, #88]	; 0x58
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_MspInit+0x44>)
 8001080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40021000 	.word	0x40021000

0800109c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a17      	ldr	r2, [pc, #92]	; (8001118 <HAL_SPI_MspInit+0x7c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d127      	bne.n	800110e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80010be:	4b17      	ldr	r3, [pc, #92]	; (800111c <HAL_SPI_MspInit+0x80>)
 80010c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c2:	4a16      	ldr	r2, [pc, #88]	; (800111c <HAL_SPI_MspInit+0x80>)
 80010c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010c8:	6593      	str	r3, [r2, #88]	; 0x58
 80010ca:	4b14      	ldr	r3, [pc, #80]	; (800111c <HAL_SPI_MspInit+0x80>)
 80010cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	4b11      	ldr	r3, [pc, #68]	; (800111c <HAL_SPI_MspInit+0x80>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010da:	4a10      	ldr	r2, [pc, #64]	; (800111c <HAL_SPI_MspInit+0x80>)
 80010dc:	f043 0302 	orr.w	r3, r3, #2
 80010e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <HAL_SPI_MspInit+0x80>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = D13_DISP_CLK_Pin|D11_DISP_DIN_Pin;
 80010ee:	2328      	movs	r3, #40	; 0x28
 80010f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f2:	2302      	movs	r3, #2
 80010f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fa:	2303      	movs	r3, #3
 80010fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010fe:	2306      	movs	r3, #6
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	4805      	ldr	r0, [pc, #20]	; (8001120 <HAL_SPI_MspInit+0x84>)
 800110a:	f000 fb89 	bl	8001820 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800110e:	bf00      	nop
 8001110:	3728      	adds	r7, #40	; 0x28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40003c00 	.word	0x40003c00
 800111c:	40021000 	.word	0x40021000
 8001120:	48000400 	.word	0x48000400

08001124 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001134:	d113      	bne.n	800115e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001136:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <HAL_TIM_Base_MspInit+0x44>)
 8001138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113a:	4a0b      	ldr	r2, [pc, #44]	; (8001168 <HAL_TIM_Base_MspInit+0x44>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6593      	str	r3, [r2, #88]	; 0x58
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <HAL_TIM_Base_MspInit+0x44>)
 8001144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	2101      	movs	r1, #1
 8001152:	201c      	movs	r0, #28
 8001154:	f000 fb2d 	bl	80017b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001158:	201c      	movs	r0, #28
 800115a:	f000 fb46 	bl	80017ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40021000 	.word	0x40021000

0800116c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08c      	sub	sp, #48	; 0x30
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 031c 	add.w	r3, r7, #28
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a2f      	ldr	r2, [pc, #188]	; (8001248 <HAL_UART_MspInit+0xdc>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d12a      	bne.n	80011e4 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800118e:	4b2f      	ldr	r3, [pc, #188]	; (800124c <HAL_UART_MspInit+0xe0>)
 8001190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001192:	4a2e      	ldr	r2, [pc, #184]	; (800124c <HAL_UART_MspInit+0xe0>)
 8001194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001198:	6613      	str	r3, [r2, #96]	; 0x60
 800119a:	4b2c      	ldr	r3, [pc, #176]	; (800124c <HAL_UART_MspInit+0xe0>)
 800119c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800119e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a2:	61bb      	str	r3, [r7, #24]
 80011a4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a6:	4b29      	ldr	r3, [pc, #164]	; (800124c <HAL_UART_MspInit+0xe0>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011aa:	4a28      	ldr	r2, [pc, #160]	; (800124c <HAL_UART_MspInit+0xe0>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b2:	4b26      	ldr	r3, [pc, #152]	; (800124c <HAL_UART_MspInit+0xe0>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = D1_UART_ECU_TX_Pin|D0_UART_ECU_RX_Pin;
 80011be:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c4:	2302      	movs	r3, #2
 80011c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011cc:	2303      	movs	r3, #3
 80011ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011d0:	2307      	movs	r3, #7
 80011d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	4619      	mov	r1, r3
 80011da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011de:	f000 fb1f 	bl	8001820 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011e2:	e02d      	b.n	8001240 <HAL_UART_MspInit+0xd4>
  else if(huart->Instance==USART2)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a19      	ldr	r2, [pc, #100]	; (8001250 <HAL_UART_MspInit+0xe4>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d128      	bne.n	8001240 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART2_CLK_ENABLE();
 80011ee:	4b17      	ldr	r3, [pc, #92]	; (800124c <HAL_UART_MspInit+0xe0>)
 80011f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f2:	4a16      	ldr	r2, [pc, #88]	; (800124c <HAL_UART_MspInit+0xe0>)
 80011f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f8:	6593      	str	r3, [r2, #88]	; 0x58
 80011fa:	4b14      	ldr	r3, [pc, #80]	; (800124c <HAL_UART_MspInit+0xe0>)
 80011fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <HAL_UART_MspInit+0xe0>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	4a10      	ldr	r2, [pc, #64]	; (800124c <HAL_UART_MspInit+0xe0>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001212:	4b0e      	ldr	r3, [pc, #56]	; (800124c <HAL_UART_MspInit+0xe0>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = A7_UART_PC_TX_Pin|A2_UART_PC_RX_Pin;
 800121e:	230c      	movs	r3, #12
 8001220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001222:	2302      	movs	r3, #2
 8001224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122a:	2303      	movs	r3, #3
 800122c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800122e:	2307      	movs	r3, #7
 8001230:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001232:	f107 031c 	add.w	r3, r7, #28
 8001236:	4619      	mov	r1, r3
 8001238:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800123c:	f000 faf0 	bl	8001820 <HAL_GPIO_Init>
}
 8001240:	bf00      	nop
 8001242:	3730      	adds	r7, #48	; 0x30
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40013800 	.word	0x40013800
 800124c:	40021000 	.word	0x40021000
 8001250:	40004400 	.word	0x40004400

08001254 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001266:	e7fe      	b.n	8001266 <HardFault_Handler+0x4>

08001268 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800126c:	e7fe      	b.n	800126c <MemManage_Handler+0x4>

0800126e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001272:	e7fe      	b.n	8001272 <BusFault_Handler+0x4>

08001274 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <UsageFault_Handler+0x4>

0800127a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a8:	f000 f968 	bl	800157c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80012b4:	2002      	movs	r0, #2
 80012b6:	f000 fc35 	bl	8001b24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}

080012be <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80012c2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80012c6:	f000 fc2d 	bl	8001b24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012d4:	4802      	ldr	r0, [pc, #8]	; (80012e0 <TIM2_IRQHandler+0x10>)
 80012d6:	f002 f929 	bl	800352c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200001c4 	.word	0x200001c4

080012e4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	e00a      	b.n	800130c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012f6:	f3af 8000 	nop.w
 80012fa:	4601      	mov	r1, r0
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	1c5a      	adds	r2, r3, #1
 8001300:	60ba      	str	r2, [r7, #8]
 8001302:	b2ca      	uxtb	r2, r1
 8001304:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	3301      	adds	r3, #1
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	697a      	ldr	r2, [r7, #20]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	429a      	cmp	r2, r3
 8001312:	dbf0      	blt.n	80012f6 <_read+0x12>
	}

return len;
 8001314:	687b      	ldr	r3, [r7, #4]
}
 8001316:	4618      	mov	r0, r3
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b086      	sub	sp, #24
 8001322:	af00      	add	r7, sp, #0
 8001324:	60f8      	str	r0, [r7, #12]
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	e009      	b.n	8001344 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	1c5a      	adds	r2, r3, #1
 8001334:	60ba      	str	r2, [r7, #8]
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	3301      	adds	r3, #1
 8001342:	617b      	str	r3, [r7, #20]
 8001344:	697a      	ldr	r2, [r7, #20]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	429a      	cmp	r2, r3
 800134a:	dbf1      	blt.n	8001330 <_write+0x12>
	}
	return len;
 800134c:	687b      	ldr	r3, [r7, #4]
}
 800134e:	4618      	mov	r0, r3
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <_close>:

int _close(int file)
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
	return -1;
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001362:	4618      	mov	r0, r3
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
 8001376:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800137e:	605a      	str	r2, [r3, #4]
	return 0;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <_isatty>:

int _isatty(int file)
{
 800138e:	b480      	push	{r7}
 8001390:	b083      	sub	sp, #12
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
	return 1;
 8001396:	2301      	movs	r3, #1
}
 8001398:	4618      	mov	r0, r3
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
	return 0;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
	...

080013c0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <_sbrk+0x50>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d102      	bne.n	80013d6 <_sbrk+0x16>
		heap_end = &end;
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <_sbrk+0x50>)
 80013d2:	4a10      	ldr	r2, [pc, #64]	; (8001414 <_sbrk+0x54>)
 80013d4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <_sbrk+0x50>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <_sbrk+0x50>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4413      	add	r3, r2
 80013e4:	466a      	mov	r2, sp
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d907      	bls.n	80013fa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80013ea:	f004 f8d5 	bl	8005598 <__errno>
 80013ee:	4602      	mov	r2, r0
 80013f0:	230c      	movs	r3, #12
 80013f2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80013f4:	f04f 33ff 	mov.w	r3, #4294967295
 80013f8:	e006      	b.n	8001408 <_sbrk+0x48>
	}

	heap_end += incr;
 80013fa:	4b05      	ldr	r3, [pc, #20]	; (8001410 <_sbrk+0x50>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	4a03      	ldr	r2, [pc, #12]	; (8001410 <_sbrk+0x50>)
 8001404:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001406:	68fb      	ldr	r3, [r7, #12]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	2000009c 	.word	0x2000009c
 8001414:	200002b0 	.word	0x200002b0

08001418 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800141c:	4b17      	ldr	r3, [pc, #92]	; (800147c <SystemInit+0x64>)
 800141e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001422:	4a16      	ldr	r2, [pc, #88]	; (800147c <SystemInit+0x64>)
 8001424:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001428:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800142c:	4b14      	ldr	r3, [pc, #80]	; (8001480 <SystemInit+0x68>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a13      	ldr	r2, [pc, #76]	; (8001480 <SystemInit+0x68>)
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <SystemInit+0x68>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <SystemInit+0x68>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a0f      	ldr	r2, [pc, #60]	; (8001480 <SystemInit+0x68>)
 8001444:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001448:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800144c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <SystemInit+0x68>)
 8001450:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001454:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001456:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <SystemInit+0x68>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a09      	ldr	r2, [pc, #36]	; (8001480 <SystemInit+0x68>)
 800145c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001460:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001462:	4b07      	ldr	r3, [pc, #28]	; (8001480 <SystemInit+0x68>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <SystemInit+0x64>)
 800146a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800146e:	609a      	str	r2, [r3, #8]
#endif
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000ed00 	.word	0xe000ed00
 8001480:	40021000 	.word	0x40021000

08001484 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001484:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014bc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001488:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800148a:	e003      	b.n	8001494 <LoopCopyDataInit>

0800148c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800148e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001490:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001492:	3104      	adds	r1, #4

08001494 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001494:	480b      	ldr	r0, [pc, #44]	; (80014c4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001496:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001498:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800149a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800149c:	d3f6      	bcc.n	800148c <CopyDataInit>
	ldr	r2, =_sbss
 800149e:	4a0b      	ldr	r2, [pc, #44]	; (80014cc <LoopForever+0x12>)
	b	LoopFillZerobss
 80014a0:	e002      	b.n	80014a8 <LoopFillZerobss>

080014a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80014a2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80014a4:	f842 3b04 	str.w	r3, [r2], #4

080014a8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <LoopForever+0x16>)
	cmp	r2, r3
 80014aa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80014ac:	d3f9      	bcc.n	80014a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014ae:	f7ff ffb3 	bl	8001418 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014b2:	f004 f877 	bl	80055a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014b6:	f7ff f809 	bl	80004cc <main>

080014ba <LoopForever>:

LoopForever:
    b LoopForever
 80014ba:	e7fe      	b.n	80014ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014bc:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80014c0:	08008d3c 	.word	0x08008d3c
	ldr	r0, =_sdata
 80014c4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80014c8:	20000080 	.word	0x20000080
	ldr	r2, =_sbss
 80014cc:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 80014d0:	200002b0 	.word	0x200002b0

080014d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014d4:	e7fe      	b.n	80014d4 <ADC1_IRQHandler>

080014d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014dc:	2300      	movs	r3, #0
 80014de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e0:	2003      	movs	r0, #3
 80014e2:	f000 f95b 	bl	800179c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014e6:	2000      	movs	r0, #0
 80014e8:	f000 f80e 	bl	8001508 <HAL_InitTick>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d002      	beq.n	80014f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	71fb      	strb	r3, [r7, #7]
 80014f6:	e001      	b.n	80014fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014f8:	f7ff fdac 	bl	8001054 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014fc:	79fb      	ldrb	r3, [r7, #7]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001510:	2300      	movs	r3, #0
 8001512:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001514:	4b16      	ldr	r3, [pc, #88]	; (8001570 <HAL_InitTick+0x68>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d022      	beq.n	8001562 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800151c:	4b15      	ldr	r3, [pc, #84]	; (8001574 <HAL_InitTick+0x6c>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b13      	ldr	r3, [pc, #76]	; (8001570 <HAL_InitTick+0x68>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001528:	fbb1 f3f3 	udiv	r3, r1, r3
 800152c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001530:	4618      	mov	r0, r3
 8001532:	f000 f968 	bl	8001806 <HAL_SYSTICK_Config>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d10f      	bne.n	800155c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b0f      	cmp	r3, #15
 8001540:	d809      	bhi.n	8001556 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001542:	2200      	movs	r2, #0
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	f04f 30ff 	mov.w	r0, #4294967295
 800154a:	f000 f932 	bl	80017b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800154e:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <HAL_InitTick+0x70>)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	e007      	b.n	8001566 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	73fb      	strb	r3, [r7, #15]
 800155a:	e004      	b.n	8001566 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	73fb      	strb	r3, [r7, #15]
 8001560:	e001      	b.n	8001566 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001566:	7bfb      	ldrb	r3, [r7, #15]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000008 	.word	0x20000008
 8001574:	20000000 	.word	0x20000000
 8001578:	20000004 	.word	0x20000004

0800157c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <HAL_IncTick+0x1c>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <HAL_IncTick+0x20>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4413      	add	r3, r2
 800158a:	4a03      	ldr	r2, [pc, #12]	; (8001598 <HAL_IncTick+0x1c>)
 800158c:	6013      	str	r3, [r2, #0]
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	20000288 	.word	0x20000288
 800159c:	20000008 	.word	0x20000008

080015a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return uwTick;
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <HAL_GetTick+0x14>)
 80015a6:	681b      	ldr	r3, [r3, #0]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	20000288 	.word	0x20000288

080015b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015c0:	f7ff ffee 	bl	80015a0 <HAL_GetTick>
 80015c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d0:	d004      	beq.n	80015dc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <HAL_Delay+0x40>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	4413      	add	r3, r2
 80015da:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015dc:	bf00      	nop
 80015de:	f7ff ffdf 	bl	80015a0 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d8f7      	bhi.n	80015de <HAL_Delay+0x26>
  {
  }
}
 80015ee:	bf00      	nop
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000008 	.word	0x20000008

080015fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <__NVIC_SetPriorityGrouping+0x44>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001618:	4013      	ands	r3, r2
 800161a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001624:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800162c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800162e:	4a04      	ldr	r2, [pc, #16]	; (8001640 <__NVIC_SetPriorityGrouping+0x44>)
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	60d3      	str	r3, [r2, #12]
}
 8001634:	bf00      	nop
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001648:	4b04      	ldr	r3, [pc, #16]	; (800165c <__NVIC_GetPriorityGrouping+0x18>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	0a1b      	lsrs	r3, r3, #8
 800164e:	f003 0307 	and.w	r3, r3, #7
}
 8001652:	4618      	mov	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166e:	2b00      	cmp	r3, #0
 8001670:	db0b      	blt.n	800168a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	f003 021f 	and.w	r2, r3, #31
 8001678:	4907      	ldr	r1, [pc, #28]	; (8001698 <__NVIC_EnableIRQ+0x38>)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	095b      	lsrs	r3, r3, #5
 8001680:	2001      	movs	r0, #1
 8001682:	fa00 f202 	lsl.w	r2, r0, r2
 8001686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000e100 	.word	0xe000e100

0800169c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	6039      	str	r1, [r7, #0]
 80016a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	db0a      	blt.n	80016c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	490c      	ldr	r1, [pc, #48]	; (80016e8 <__NVIC_SetPriority+0x4c>)
 80016b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ba:	0112      	lsls	r2, r2, #4
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	440b      	add	r3, r1
 80016c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c4:	e00a      	b.n	80016dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4908      	ldr	r1, [pc, #32]	; (80016ec <__NVIC_SetPriority+0x50>)
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	3b04      	subs	r3, #4
 80016d4:	0112      	lsls	r2, r2, #4
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	440b      	add	r3, r1
 80016da:	761a      	strb	r2, [r3, #24]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000e100 	.word	0xe000e100
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b089      	sub	sp, #36	; 0x24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f1c3 0307 	rsb	r3, r3, #7
 800170a:	2b04      	cmp	r3, #4
 800170c:	bf28      	it	cs
 800170e:	2304      	movcs	r3, #4
 8001710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3304      	adds	r3, #4
 8001716:	2b06      	cmp	r3, #6
 8001718:	d902      	bls.n	8001720 <NVIC_EncodePriority+0x30>
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3b03      	subs	r3, #3
 800171e:	e000      	b.n	8001722 <NVIC_EncodePriority+0x32>
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001724:	f04f 32ff 	mov.w	r2, #4294967295
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43da      	mvns	r2, r3
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	401a      	ands	r2, r3
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001738:	f04f 31ff 	mov.w	r1, #4294967295
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	fa01 f303 	lsl.w	r3, r1, r3
 8001742:	43d9      	mvns	r1, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	4313      	orrs	r3, r2
         );
}
 800174a:	4618      	mov	r0, r3
 800174c:	3724      	adds	r7, #36	; 0x24
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3b01      	subs	r3, #1
 8001764:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001768:	d301      	bcc.n	800176e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800176a:	2301      	movs	r3, #1
 800176c:	e00f      	b.n	800178e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800176e:	4a0a      	ldr	r2, [pc, #40]	; (8001798 <SysTick_Config+0x40>)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3b01      	subs	r3, #1
 8001774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001776:	210f      	movs	r1, #15
 8001778:	f04f 30ff 	mov.w	r0, #4294967295
 800177c:	f7ff ff8e 	bl	800169c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <SysTick_Config+0x40>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001786:	4b04      	ldr	r3, [pc, #16]	; (8001798 <SysTick_Config+0x40>)
 8001788:	2207      	movs	r2, #7
 800178a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	e000e010 	.word	0xe000e010

0800179c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff ff29 	bl	80015fc <__NVIC_SetPriorityGrouping>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b086      	sub	sp, #24
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	4603      	mov	r3, r0
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	607a      	str	r2, [r7, #4]
 80017be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017c4:	f7ff ff3e 	bl	8001644 <__NVIC_GetPriorityGrouping>
 80017c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	68b9      	ldr	r1, [r7, #8]
 80017ce:	6978      	ldr	r0, [r7, #20]
 80017d0:	f7ff ff8e 	bl	80016f0 <NVIC_EncodePriority>
 80017d4:	4602      	mov	r2, r0
 80017d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017da:	4611      	mov	r1, r2
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff5d 	bl	800169c <__NVIC_SetPriority>
}
 80017e2:	bf00      	nop
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff31 	bl	8001660 <__NVIC_EnableIRQ>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff ffa2 	bl	8001758 <SysTick_Config>
 8001814:	4603      	mov	r3, r0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001820:	b480      	push	{r7}
 8001822:	b087      	sub	sp, #28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800182e:	e148      	b.n	8001ac2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	2101      	movs	r1, #1
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	fa01 f303 	lsl.w	r3, r1, r3
 800183c:	4013      	ands	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 813a 	beq.w	8001abc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d00b      	beq.n	8001868 <HAL_GPIO_Init+0x48>
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b02      	cmp	r3, #2
 8001856:	d007      	beq.n	8001868 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800185c:	2b11      	cmp	r3, #17
 800185e:	d003      	beq.n	8001868 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b12      	cmp	r3, #18
 8001866:	d130      	bne.n	80018ca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	2203      	movs	r2, #3
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4013      	ands	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	68da      	ldr	r2, [r3, #12]
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	4313      	orrs	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800189e:	2201      	movs	r2, #1
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4013      	ands	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	091b      	lsrs	r3, r3, #4
 80018b4:	f003 0201 	and.w	r2, r3, #1
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	2203      	movs	r2, #3
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d003      	beq.n	800190a <HAL_GPIO_Init+0xea>
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b12      	cmp	r3, #18
 8001908:	d123      	bne.n	8001952 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	08da      	lsrs	r2, r3, #3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3208      	adds	r2, #8
 8001912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001916:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	220f      	movs	r2, #15
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	4013      	ands	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	691a      	ldr	r2, [r3, #16]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	08da      	lsrs	r2, r3, #3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3208      	adds	r2, #8
 800194c:	6939      	ldr	r1, [r7, #16]
 800194e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	2203      	movs	r2, #3
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f003 0203 	and.w	r2, r3, #3
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 8094 	beq.w	8001abc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001994:	4b52      	ldr	r3, [pc, #328]	; (8001ae0 <HAL_GPIO_Init+0x2c0>)
 8001996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001998:	4a51      	ldr	r2, [pc, #324]	; (8001ae0 <HAL_GPIO_Init+0x2c0>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	6613      	str	r3, [r2, #96]	; 0x60
 80019a0:	4b4f      	ldr	r3, [pc, #316]	; (8001ae0 <HAL_GPIO_Init+0x2c0>)
 80019a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019ac:	4a4d      	ldr	r2, [pc, #308]	; (8001ae4 <HAL_GPIO_Init+0x2c4>)
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	089b      	lsrs	r3, r3, #2
 80019b2:	3302      	adds	r3, #2
 80019b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	220f      	movs	r2, #15
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4013      	ands	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019d6:	d00d      	beq.n	80019f4 <HAL_GPIO_Init+0x1d4>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a43      	ldr	r2, [pc, #268]	; (8001ae8 <HAL_GPIO_Init+0x2c8>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d007      	beq.n	80019f0 <HAL_GPIO_Init+0x1d0>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a42      	ldr	r2, [pc, #264]	; (8001aec <HAL_GPIO_Init+0x2cc>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d101      	bne.n	80019ec <HAL_GPIO_Init+0x1cc>
 80019e8:	2302      	movs	r3, #2
 80019ea:	e004      	b.n	80019f6 <HAL_GPIO_Init+0x1d6>
 80019ec:	2307      	movs	r3, #7
 80019ee:	e002      	b.n	80019f6 <HAL_GPIO_Init+0x1d6>
 80019f0:	2301      	movs	r3, #1
 80019f2:	e000      	b.n	80019f6 <HAL_GPIO_Init+0x1d6>
 80019f4:	2300      	movs	r3, #0
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	f002 0203 	and.w	r2, r2, #3
 80019fc:	0092      	lsls	r2, r2, #2
 80019fe:	4093      	lsls	r3, r2
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a06:	4937      	ldr	r1, [pc, #220]	; (8001ae4 <HAL_GPIO_Init+0x2c4>)
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	089b      	lsrs	r3, r3, #2
 8001a0c:	3302      	adds	r3, #2
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a14:	4b36      	ldr	r3, [pc, #216]	; (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	4013      	ands	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a38:	4a2d      	ldr	r2, [pc, #180]	; (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001a3e:	4b2c      	ldr	r3, [pc, #176]	; (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	43db      	mvns	r3, r3
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a62:	4a23      	ldr	r2, [pc, #140]	; (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a68:	4b21      	ldr	r3, [pc, #132]	; (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	4013      	ands	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a8c:	4a18      	ldr	r2, [pc, #96]	; (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a92:	4b17      	ldr	r3, [pc, #92]	; (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ab6:	4a0e      	ldr	r2, [pc, #56]	; (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f47f aeaf 	bne.w	8001830 <HAL_GPIO_Init+0x10>
  }
}
 8001ad2:	bf00      	nop
 8001ad4:	371c      	adds	r7, #28
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40010000 	.word	0x40010000
 8001ae8:	48000400 	.word	0x48000400
 8001aec:	48000800 	.word	0x48000800
 8001af0:	40010400 	.word	0x40010400

08001af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	807b      	strh	r3, [r7, #2]
 8001b00:	4613      	mov	r3, r2
 8001b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b04:	787b      	ldrb	r3, [r7, #1]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b0a:	887a      	ldrh	r2, [r7, #2]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b10:	e002      	b.n	8001b18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b12:	887a      	ldrh	r2, [r7, #2]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b2e:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b30:	695a      	ldr	r2, [r3, #20]
 8001b32:	88fb      	ldrh	r3, [r7, #6]
 8001b34:	4013      	ands	r3, r2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d006      	beq.n	8001b48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b3a:	4a05      	ldr	r2, [pc, #20]	; (8001b50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b3c:	88fb      	ldrh	r3, [r7, #6]
 8001b3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b40:	88fb      	ldrh	r3, [r7, #6]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff f8da 	bl	8000cfc <HAL_GPIO_EXTI_Callback>
  }
}
 8001b48:	bf00      	nop
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40010400 	.word	0x40010400

08001b54 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b58:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b62:	6013      	str	r3, [r2, #0]
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40007000 	.word	0x40007000

08001b74 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b78:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <HAL_PWREx_GetVoltageRange+0x18>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40007000 	.word	0x40007000

08001b90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b9e:	d130      	bne.n	8001c02 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ba0:	4b23      	ldr	r3, [pc, #140]	; (8001c30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bac:	d038      	beq.n	8001c20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bae:	4b20      	ldr	r3, [pc, #128]	; (8001c30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bb6:	4a1e      	ldr	r2, [pc, #120]	; (8001c30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bbc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bbe:	4b1d      	ldr	r3, [pc, #116]	; (8001c34 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2232      	movs	r2, #50	; 0x32
 8001bc4:	fb02 f303 	mul.w	r3, r2, r3
 8001bc8:	4a1b      	ldr	r2, [pc, #108]	; (8001c38 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001bca:	fba2 2303 	umull	r2, r3, r2, r3
 8001bce:	0c9b      	lsrs	r3, r3, #18
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bd4:	e002      	b.n	8001bdc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bdc:	4b14      	ldr	r3, [pc, #80]	; (8001c30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001be8:	d102      	bne.n	8001bf0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1f2      	bne.n	8001bd6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bf0:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bf2:	695b      	ldr	r3, [r3, #20]
 8001bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bfc:	d110      	bne.n	8001c20 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e00f      	b.n	8001c22 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c02:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c0e:	d007      	beq.n	8001c20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c10:	4b07      	ldr	r3, [pc, #28]	; (8001c30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c18:	4a05      	ldr	r2, [pc, #20]	; (8001c30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c1e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	40007000 	.word	0x40007000
 8001c34:	20000000 	.word	0x20000000
 8001c38:	431bde83 	.word	0x431bde83

08001c3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b088      	sub	sp, #32
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d102      	bne.n	8001c50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	f000 bc11 	b.w	8002472 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c50:	4ba0      	ldr	r3, [pc, #640]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 030c 	and.w	r3, r3, #12
 8001c58:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c5a:	4b9e      	ldr	r3, [pc, #632]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	f003 0303 	and.w	r3, r3, #3
 8001c62:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0310 	and.w	r3, r3, #16
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 80e4 	beq.w	8001e3a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d007      	beq.n	8001c88 <HAL_RCC_OscConfig+0x4c>
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	2b0c      	cmp	r3, #12
 8001c7c:	f040 808b 	bne.w	8001d96 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	f040 8087 	bne.w	8001d96 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c88:	4b92      	ldr	r3, [pc, #584]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d005      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x64>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e3e8      	b.n	8002472 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a1a      	ldr	r2, [r3, #32]
 8001ca4:	4b8b      	ldr	r3, [pc, #556]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0308 	and.w	r3, r3, #8
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d004      	beq.n	8001cba <HAL_RCC_OscConfig+0x7e>
 8001cb0:	4b88      	ldr	r3, [pc, #544]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cb8:	e005      	b.n	8001cc6 <HAL_RCC_OscConfig+0x8a>
 8001cba:	4b86      	ldr	r3, [pc, #536]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cc0:	091b      	lsrs	r3, r3, #4
 8001cc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d223      	bcs.n	8001d12 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 fd78 	bl	80027c4 <RCC_SetFlashLatencyFromMSIRange>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e3c9      	b.n	8002472 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cde:	4b7d      	ldr	r3, [pc, #500]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a7c      	ldr	r2, [pc, #496]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001ce4:	f043 0308 	orr.w	r3, r3, #8
 8001ce8:	6013      	str	r3, [r2, #0]
 8001cea:	4b7a      	ldr	r3, [pc, #488]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	4977      	ldr	r1, [pc, #476]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cfc:	4b75      	ldr	r3, [pc, #468]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	69db      	ldr	r3, [r3, #28]
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	4972      	ldr	r1, [pc, #456]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	604b      	str	r3, [r1, #4]
 8001d10:	e025      	b.n	8001d5e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d12:	4b70      	ldr	r3, [pc, #448]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a6f      	ldr	r2, [pc, #444]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001d18:	f043 0308 	orr.w	r3, r3, #8
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	4b6d      	ldr	r3, [pc, #436]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	496a      	ldr	r1, [pc, #424]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d30:	4b68      	ldr	r3, [pc, #416]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	021b      	lsls	r3, r3, #8
 8001d3e:	4965      	ldr	r1, [pc, #404]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d109      	bne.n	8001d5e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 fd38 	bl	80027c4 <RCC_SetFlashLatencyFromMSIRange>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e389      	b.n	8002472 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d5e:	f000 fc6f 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 8001d62:	4601      	mov	r1, r0
 8001d64:	4b5b      	ldr	r3, [pc, #364]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	091b      	lsrs	r3, r3, #4
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	4a5a      	ldr	r2, [pc, #360]	; (8001ed8 <HAL_RCC_OscConfig+0x29c>)
 8001d70:	5cd3      	ldrb	r3, [r2, r3]
 8001d72:	f003 031f 	and.w	r3, r3, #31
 8001d76:	fa21 f303 	lsr.w	r3, r1, r3
 8001d7a:	4a58      	ldr	r2, [pc, #352]	; (8001edc <HAL_RCC_OscConfig+0x2a0>)
 8001d7c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d7e:	4b58      	ldr	r3, [pc, #352]	; (8001ee0 <HAL_RCC_OscConfig+0x2a4>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff fbc0 	bl	8001508 <HAL_InitTick>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d052      	beq.n	8001e38 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
 8001d94:	e36d      	b.n	8002472 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d032      	beq.n	8001e04 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d9e:	4b4d      	ldr	r3, [pc, #308]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a4c      	ldr	r2, [pc, #304]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001daa:	f7ff fbf9 	bl	80015a0 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001db2:	f7ff fbf5 	bl	80015a0 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e356      	b.n	8002472 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dc4:	4b43      	ldr	r3, [pc, #268]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0f0      	beq.n	8001db2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dd0:	4b40      	ldr	r3, [pc, #256]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a3f      	ldr	r2, [pc, #252]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001dd6:	f043 0308 	orr.w	r3, r3, #8
 8001dda:	6013      	str	r3, [r2, #0]
 8001ddc:	4b3d      	ldr	r3, [pc, #244]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	493a      	ldr	r1, [pc, #232]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dee:	4b39      	ldr	r3, [pc, #228]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	021b      	lsls	r3, r3, #8
 8001dfc:	4935      	ldr	r1, [pc, #212]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	604b      	str	r3, [r1, #4]
 8001e02:	e01a      	b.n	8001e3a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e04:	4b33      	ldr	r3, [pc, #204]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a32      	ldr	r2, [pc, #200]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001e0a:	f023 0301 	bic.w	r3, r3, #1
 8001e0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e10:	f7ff fbc6 	bl	80015a0 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e18:	f7ff fbc2 	bl	80015a0 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e323      	b.n	8002472 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e2a:	4b2a      	ldr	r3, [pc, #168]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f0      	bne.n	8001e18 <HAL_RCC_OscConfig+0x1dc>
 8001e36:	e000      	b.n	8001e3a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d073      	beq.n	8001f2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	d005      	beq.n	8001e58 <HAL_RCC_OscConfig+0x21c>
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	2b0c      	cmp	r3, #12
 8001e50:	d10e      	bne.n	8001e70 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	2b03      	cmp	r3, #3
 8001e56:	d10b      	bne.n	8001e70 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e58:	4b1e      	ldr	r3, [pc, #120]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d063      	beq.n	8001f2c <HAL_RCC_OscConfig+0x2f0>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d15f      	bne.n	8001f2c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e300      	b.n	8002472 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e78:	d106      	bne.n	8001e88 <HAL_RCC_OscConfig+0x24c>
 8001e7a:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a15      	ldr	r2, [pc, #84]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	e01d      	b.n	8001ec4 <HAL_RCC_OscConfig+0x288>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e90:	d10c      	bne.n	8001eac <HAL_RCC_OscConfig+0x270>
 8001e92:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a0f      	ldr	r2, [pc, #60]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001e98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a0c      	ldr	r2, [pc, #48]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	e00b      	b.n	8001ec4 <HAL_RCC_OscConfig+0x288>
 8001eac:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a08      	ldr	r2, [pc, #32]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a05      	ldr	r2, [pc, #20]	; (8001ed4 <HAL_RCC_OscConfig+0x298>)
 8001ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ec2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d01b      	beq.n	8001f04 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ecc:	f7ff fb68 	bl	80015a0 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ed2:	e010      	b.n	8001ef6 <HAL_RCC_OscConfig+0x2ba>
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	080062c8 	.word	0x080062c8
 8001edc:	20000000 	.word	0x20000000
 8001ee0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee4:	f7ff fb5c 	bl	80015a0 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b64      	cmp	r3, #100	; 0x64
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e2bd      	b.n	8002472 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ef6:	4baf      	ldr	r3, [pc, #700]	; (80021b4 <HAL_RCC_OscConfig+0x578>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x2a8>
 8001f02:	e014      	b.n	8001f2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f04:	f7ff fb4c 	bl	80015a0 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f0c:	f7ff fb48 	bl	80015a0 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b64      	cmp	r3, #100	; 0x64
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e2a9      	b.n	8002472 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f1e:	4ba5      	ldr	r3, [pc, #660]	; (80021b4 <HAL_RCC_OscConfig+0x578>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCC_OscConfig+0x2d0>
 8001f2a:	e000      	b.n	8001f2e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d060      	beq.n	8001ffc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	d005      	beq.n	8001f4c <HAL_RCC_OscConfig+0x310>
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	2b0c      	cmp	r3, #12
 8001f44:	d119      	bne.n	8001f7a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d116      	bne.n	8001f7a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f4c:	4b99      	ldr	r3, [pc, #612]	; (80021b4 <HAL_RCC_OscConfig+0x578>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <HAL_RCC_OscConfig+0x328>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e286      	b.n	8002472 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f64:	4b93      	ldr	r3, [pc, #588]	; (80021b4 <HAL_RCC_OscConfig+0x578>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	061b      	lsls	r3, r3, #24
 8001f72:	4990      	ldr	r1, [pc, #576]	; (80021b4 <HAL_RCC_OscConfig+0x578>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f78:	e040      	b.n	8001ffc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d023      	beq.n	8001fca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f82:	4b8c      	ldr	r3, [pc, #560]	; (80021b4 <HAL_RCC_OscConfig+0x578>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a8b      	ldr	r2, [pc, #556]	; (80021b4 <HAL_RCC_OscConfig+0x578>)
 8001f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8e:	f7ff fb07 	bl	80015a0 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f96:	f7ff fb03 	bl	80015a0 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e264      	b.n	8002472 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fa8:	4b82      	ldr	r3, [pc, #520]	; (80021b4 <HAL_RCC_OscConfig+0x578>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0f0      	beq.n	8001f96 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb4:	4b7f      	ldr	r3, [pc, #508]	; (80021b4 <HAL_RCC_OscConfig+0x578>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	061b      	lsls	r3, r3, #24
 8001fc2:	497c      	ldr	r1, [pc, #496]	; (80021b4 <HAL_RCC_OscConfig+0x578>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	604b      	str	r3, [r1, #4]
 8001fc8:	e018      	b.n	8001ffc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fca:	4b7a      	ldr	r3, [pc, #488]	; (80021b4 <HAL_RCC_OscConfig+0x578>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a79      	ldr	r2, [pc, #484]	; (80021b4 <HAL_RCC_OscConfig+0x578>)
 8001fd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd6:	f7ff fae3 	bl	80015a0 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fde:	f7ff fadf 	bl	80015a0 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e240      	b.n	8002472 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ff0:	4b70      	ldr	r3, [pc, #448]	; (80021b4 <HAL_RCC_OscConfig+0x578>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1f0      	bne.n	8001fde <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0308 	and.w	r3, r3, #8
 8002004:	2b00      	cmp	r3, #0
 8002006:	d03c      	beq.n	8002082 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d01c      	beq.n	800204a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002010:	4b68      	ldr	r3, [pc, #416]	; (80021b4 <HAL_RCC_OscConfig+0x578>)
 8002012:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002016:	4a67      	ldr	r2, [pc, #412]	; (80021b4 <HAL_RCC_OscConfig+0x578>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002020:	f7ff fabe 	bl	80015a0 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002028:	f7ff faba 	bl	80015a0 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e21b      	b.n	8002472 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800203a:	4b5e      	ldr	r3, [pc, #376]	; (80021b4 <HAL_RCC_OscConfig+0x578>)
 800203c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0ef      	beq.n	8002028 <HAL_RCC_OscConfig+0x3ec>
 8002048:	e01b      	b.n	8002082 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800204a:	4b5a      	ldr	r3, [pc, #360]	; (80021b4 <HAL_RCC_OscConfig+0x578>)
 800204c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002050:	4a58      	ldr	r2, [pc, #352]	; (80021b4 <HAL_RCC_OscConfig+0x578>)
 8002052:	f023 0301 	bic.w	r3, r3, #1
 8002056:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205a:	f7ff faa1 	bl	80015a0 <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002062:	f7ff fa9d 	bl	80015a0 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e1fe      	b.n	8002472 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002074:	4b4f      	ldr	r3, [pc, #316]	; (80021b4 <HAL_RCC_OscConfig+0x578>)
 8002076:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1ef      	bne.n	8002062 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0304 	and.w	r3, r3, #4
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 80a6 	beq.w	80021dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002090:	2300      	movs	r3, #0
 8002092:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002094:	4b47      	ldr	r3, [pc, #284]	; (80021b4 <HAL_RCC_OscConfig+0x578>)
 8002096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d10d      	bne.n	80020bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020a0:	4b44      	ldr	r3, [pc, #272]	; (80021b4 <HAL_RCC_OscConfig+0x578>)
 80020a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a4:	4a43      	ldr	r2, [pc, #268]	; (80021b4 <HAL_RCC_OscConfig+0x578>)
 80020a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020aa:	6593      	str	r3, [r2, #88]	; 0x58
 80020ac:	4b41      	ldr	r3, [pc, #260]	; (80021b4 <HAL_RCC_OscConfig+0x578>)
 80020ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b8:	2301      	movs	r3, #1
 80020ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020bc:	4b3e      	ldr	r3, [pc, #248]	; (80021b8 <HAL_RCC_OscConfig+0x57c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d118      	bne.n	80020fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020c8:	4b3b      	ldr	r3, [pc, #236]	; (80021b8 <HAL_RCC_OscConfig+0x57c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a3a      	ldr	r2, [pc, #232]	; (80021b8 <HAL_RCC_OscConfig+0x57c>)
 80020ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020d4:	f7ff fa64 	bl	80015a0 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020dc:	f7ff fa60 	bl	80015a0 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e1c1      	b.n	8002472 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ee:	4b32      	ldr	r3, [pc, #200]	; (80021b8 <HAL_RCC_OscConfig+0x57c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0f0      	beq.n	80020dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d108      	bne.n	8002114 <HAL_RCC_OscConfig+0x4d8>
 8002102:	4b2c      	ldr	r3, [pc, #176]	; (80021b4 <HAL_RCC_OscConfig+0x578>)
 8002104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002108:	4a2a      	ldr	r2, [pc, #168]	; (80021b4 <HAL_RCC_OscConfig+0x578>)
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002112:	e024      	b.n	800215e <HAL_RCC_OscConfig+0x522>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2b05      	cmp	r3, #5
 800211a:	d110      	bne.n	800213e <HAL_RCC_OscConfig+0x502>
 800211c:	4b25      	ldr	r3, [pc, #148]	; (80021b4 <HAL_RCC_OscConfig+0x578>)
 800211e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002122:	4a24      	ldr	r2, [pc, #144]	; (80021b4 <HAL_RCC_OscConfig+0x578>)
 8002124:	f043 0304 	orr.w	r3, r3, #4
 8002128:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800212c:	4b21      	ldr	r3, [pc, #132]	; (80021b4 <HAL_RCC_OscConfig+0x578>)
 800212e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002132:	4a20      	ldr	r2, [pc, #128]	; (80021b4 <HAL_RCC_OscConfig+0x578>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800213c:	e00f      	b.n	800215e <HAL_RCC_OscConfig+0x522>
 800213e:	4b1d      	ldr	r3, [pc, #116]	; (80021b4 <HAL_RCC_OscConfig+0x578>)
 8002140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002144:	4a1b      	ldr	r2, [pc, #108]	; (80021b4 <HAL_RCC_OscConfig+0x578>)
 8002146:	f023 0301 	bic.w	r3, r3, #1
 800214a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800214e:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <HAL_RCC_OscConfig+0x578>)
 8002150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002154:	4a17      	ldr	r2, [pc, #92]	; (80021b4 <HAL_RCC_OscConfig+0x578>)
 8002156:	f023 0304 	bic.w	r3, r3, #4
 800215a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d016      	beq.n	8002194 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002166:	f7ff fa1b 	bl	80015a0 <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800216c:	e00a      	b.n	8002184 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800216e:	f7ff fa17 	bl	80015a0 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	f241 3288 	movw	r2, #5000	; 0x1388
 800217c:	4293      	cmp	r3, r2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e176      	b.n	8002472 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002184:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <HAL_RCC_OscConfig+0x578>)
 8002186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0ed      	beq.n	800216e <HAL_RCC_OscConfig+0x532>
 8002192:	e01a      	b.n	80021ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002194:	f7ff fa04 	bl	80015a0 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800219a:	e00f      	b.n	80021bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219c:	f7ff fa00 	bl	80015a0 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d906      	bls.n	80021bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e15f      	b.n	8002472 <HAL_RCC_OscConfig+0x836>
 80021b2:	bf00      	nop
 80021b4:	40021000 	.word	0x40021000
 80021b8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021bc:	4baa      	ldr	r3, [pc, #680]	; (8002468 <HAL_RCC_OscConfig+0x82c>)
 80021be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1e8      	bne.n	800219c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021ca:	7ffb      	ldrb	r3, [r7, #31]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d105      	bne.n	80021dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d0:	4ba5      	ldr	r3, [pc, #660]	; (8002468 <HAL_RCC_OscConfig+0x82c>)
 80021d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d4:	4aa4      	ldr	r2, [pc, #656]	; (8002468 <HAL_RCC_OscConfig+0x82c>)
 80021d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021da:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0320 	and.w	r3, r3, #32
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d03c      	beq.n	8002262 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d01c      	beq.n	800222a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021f0:	4b9d      	ldr	r3, [pc, #628]	; (8002468 <HAL_RCC_OscConfig+0x82c>)
 80021f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021f6:	4a9c      	ldr	r2, [pc, #624]	; (8002468 <HAL_RCC_OscConfig+0x82c>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002200:	f7ff f9ce 	bl	80015a0 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002208:	f7ff f9ca 	bl	80015a0 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e12b      	b.n	8002472 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800221a:	4b93      	ldr	r3, [pc, #588]	; (8002468 <HAL_RCC_OscConfig+0x82c>)
 800221c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0ef      	beq.n	8002208 <HAL_RCC_OscConfig+0x5cc>
 8002228:	e01b      	b.n	8002262 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800222a:	4b8f      	ldr	r3, [pc, #572]	; (8002468 <HAL_RCC_OscConfig+0x82c>)
 800222c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002230:	4a8d      	ldr	r2, [pc, #564]	; (8002468 <HAL_RCC_OscConfig+0x82c>)
 8002232:	f023 0301 	bic.w	r3, r3, #1
 8002236:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800223a:	f7ff f9b1 	bl	80015a0 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002242:	f7ff f9ad 	bl	80015a0 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e10e      	b.n	8002472 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002254:	4b84      	ldr	r3, [pc, #528]	; (8002468 <HAL_RCC_OscConfig+0x82c>)
 8002256:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1ef      	bne.n	8002242 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 8102 	beq.w	8002470 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002270:	2b02      	cmp	r3, #2
 8002272:	f040 80c5 	bne.w	8002400 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002276:	4b7c      	ldr	r3, [pc, #496]	; (8002468 <HAL_RCC_OscConfig+0x82c>)
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f003 0203 	and.w	r2, r3, #3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002286:	429a      	cmp	r2, r3
 8002288:	d12c      	bne.n	80022e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002294:	3b01      	subs	r3, #1
 8002296:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002298:	429a      	cmp	r2, r3
 800229a:	d123      	bne.n	80022e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d11b      	bne.n	80022e4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d113      	bne.n	80022e4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c6:	085b      	lsrs	r3, r3, #1
 80022c8:	3b01      	subs	r3, #1
 80022ca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d109      	bne.n	80022e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	085b      	lsrs	r3, r3, #1
 80022dc:	3b01      	subs	r3, #1
 80022de:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d067      	beq.n	80023b4 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	2b0c      	cmp	r3, #12
 80022e8:	d062      	beq.n	80023b0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80022ea:	4b5f      	ldr	r3, [pc, #380]	; (8002468 <HAL_RCC_OscConfig+0x82c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e0bb      	b.n	8002472 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80022fa:	4b5b      	ldr	r3, [pc, #364]	; (8002468 <HAL_RCC_OscConfig+0x82c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a5a      	ldr	r2, [pc, #360]	; (8002468 <HAL_RCC_OscConfig+0x82c>)
 8002300:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002304:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002306:	f7ff f94b 	bl	80015a0 <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800230e:	f7ff f947 	bl	80015a0 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e0a8      	b.n	8002472 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002320:	4b51      	ldr	r3, [pc, #324]	; (8002468 <HAL_RCC_OscConfig+0x82c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1f0      	bne.n	800230e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800232c:	4b4e      	ldr	r3, [pc, #312]	; (8002468 <HAL_RCC_OscConfig+0x82c>)
 800232e:	68da      	ldr	r2, [r3, #12]
 8002330:	4b4e      	ldr	r3, [pc, #312]	; (800246c <HAL_RCC_OscConfig+0x830>)
 8002332:	4013      	ands	r3, r2
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800233c:	3a01      	subs	r2, #1
 800233e:	0112      	lsls	r2, r2, #4
 8002340:	4311      	orrs	r1, r2
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002346:	0212      	lsls	r2, r2, #8
 8002348:	4311      	orrs	r1, r2
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800234e:	0852      	lsrs	r2, r2, #1
 8002350:	3a01      	subs	r2, #1
 8002352:	0552      	lsls	r2, r2, #21
 8002354:	4311      	orrs	r1, r2
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800235a:	0852      	lsrs	r2, r2, #1
 800235c:	3a01      	subs	r2, #1
 800235e:	0652      	lsls	r2, r2, #25
 8002360:	4311      	orrs	r1, r2
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002366:	06d2      	lsls	r2, r2, #27
 8002368:	430a      	orrs	r2, r1
 800236a:	493f      	ldr	r1, [pc, #252]	; (8002468 <HAL_RCC_OscConfig+0x82c>)
 800236c:	4313      	orrs	r3, r2
 800236e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002370:	4b3d      	ldr	r3, [pc, #244]	; (8002468 <HAL_RCC_OscConfig+0x82c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a3c      	ldr	r2, [pc, #240]	; (8002468 <HAL_RCC_OscConfig+0x82c>)
 8002376:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800237a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800237c:	4b3a      	ldr	r3, [pc, #232]	; (8002468 <HAL_RCC_OscConfig+0x82c>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	4a39      	ldr	r2, [pc, #228]	; (8002468 <HAL_RCC_OscConfig+0x82c>)
 8002382:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002386:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002388:	f7ff f90a 	bl	80015a0 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002390:	f7ff f906 	bl	80015a0 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e067      	b.n	8002472 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023a2:	4b31      	ldr	r3, [pc, #196]	; (8002468 <HAL_RCC_OscConfig+0x82c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0f0      	beq.n	8002390 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023ae:	e05f      	b.n	8002470 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e05e      	b.n	8002472 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023b4:	4b2c      	ldr	r3, [pc, #176]	; (8002468 <HAL_RCC_OscConfig+0x82c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d157      	bne.n	8002470 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023c0:	4b29      	ldr	r3, [pc, #164]	; (8002468 <HAL_RCC_OscConfig+0x82c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a28      	ldr	r2, [pc, #160]	; (8002468 <HAL_RCC_OscConfig+0x82c>)
 80023c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023cc:	4b26      	ldr	r3, [pc, #152]	; (8002468 <HAL_RCC_OscConfig+0x82c>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	4a25      	ldr	r2, [pc, #148]	; (8002468 <HAL_RCC_OscConfig+0x82c>)
 80023d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023d8:	f7ff f8e2 	bl	80015a0 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e0:	f7ff f8de 	bl	80015a0 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e03f      	b.n	8002472 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023f2:	4b1d      	ldr	r3, [pc, #116]	; (8002468 <HAL_RCC_OscConfig+0x82c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0f0      	beq.n	80023e0 <HAL_RCC_OscConfig+0x7a4>
 80023fe:	e037      	b.n	8002470 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	2b0c      	cmp	r3, #12
 8002404:	d02d      	beq.n	8002462 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002406:	4b18      	ldr	r3, [pc, #96]	; (8002468 <HAL_RCC_OscConfig+0x82c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a17      	ldr	r2, [pc, #92]	; (8002468 <HAL_RCC_OscConfig+0x82c>)
 800240c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002410:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002412:	4b15      	ldr	r3, [pc, #84]	; (8002468 <HAL_RCC_OscConfig+0x82c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d105      	bne.n	800242a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800241e:	4b12      	ldr	r3, [pc, #72]	; (8002468 <HAL_RCC_OscConfig+0x82c>)
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	4a11      	ldr	r2, [pc, #68]	; (8002468 <HAL_RCC_OscConfig+0x82c>)
 8002424:	f023 0303 	bic.w	r3, r3, #3
 8002428:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800242a:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <HAL_RCC_OscConfig+0x82c>)
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	4a0e      	ldr	r2, [pc, #56]	; (8002468 <HAL_RCC_OscConfig+0x82c>)
 8002430:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002434:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002438:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243a:	f7ff f8b1 	bl	80015a0 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002442:	f7ff f8ad 	bl	80015a0 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e00e      	b.n	8002472 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002454:	4b04      	ldr	r3, [pc, #16]	; (8002468 <HAL_RCC_OscConfig+0x82c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1f0      	bne.n	8002442 <HAL_RCC_OscConfig+0x806>
 8002460:	e006      	b.n	8002470 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e005      	b.n	8002472 <HAL_RCC_OscConfig+0x836>
 8002466:	bf00      	nop
 8002468:	40021000 	.word	0x40021000
 800246c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3720      	adds	r7, #32
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop

0800247c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e0c8      	b.n	8002622 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002490:	4b66      	ldr	r3, [pc, #408]	; (800262c <HAL_RCC_ClockConfig+0x1b0>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d910      	bls.n	80024c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249e:	4b63      	ldr	r3, [pc, #396]	; (800262c <HAL_RCC_ClockConfig+0x1b0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f023 0207 	bic.w	r2, r3, #7
 80024a6:	4961      	ldr	r1, [pc, #388]	; (800262c <HAL_RCC_ClockConfig+0x1b0>)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ae:	4b5f      	ldr	r3, [pc, #380]	; (800262c <HAL_RCC_ClockConfig+0x1b0>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d001      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0b0      	b.n	8002622 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d04c      	beq.n	8002566 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d107      	bne.n	80024e4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024d4:	4b56      	ldr	r3, [pc, #344]	; (8002630 <HAL_RCC_ClockConfig+0x1b4>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d121      	bne.n	8002524 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e09e      	b.n	8002622 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d107      	bne.n	80024fc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ec:	4b50      	ldr	r3, [pc, #320]	; (8002630 <HAL_RCC_ClockConfig+0x1b4>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d115      	bne.n	8002524 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e092      	b.n	8002622 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d107      	bne.n	8002514 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002504:	4b4a      	ldr	r3, [pc, #296]	; (8002630 <HAL_RCC_ClockConfig+0x1b4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d109      	bne.n	8002524 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e086      	b.n	8002622 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002514:	4b46      	ldr	r3, [pc, #280]	; (8002630 <HAL_RCC_ClockConfig+0x1b4>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e07e      	b.n	8002622 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002524:	4b42      	ldr	r3, [pc, #264]	; (8002630 <HAL_RCC_ClockConfig+0x1b4>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f023 0203 	bic.w	r2, r3, #3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	493f      	ldr	r1, [pc, #252]	; (8002630 <HAL_RCC_ClockConfig+0x1b4>)
 8002532:	4313      	orrs	r3, r2
 8002534:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002536:	f7ff f833 	bl	80015a0 <HAL_GetTick>
 800253a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800253c:	e00a      	b.n	8002554 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800253e:	f7ff f82f 	bl	80015a0 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	f241 3288 	movw	r2, #5000	; 0x1388
 800254c:	4293      	cmp	r3, r2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e066      	b.n	8002622 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002554:	4b36      	ldr	r3, [pc, #216]	; (8002630 <HAL_RCC_ClockConfig+0x1b4>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 020c 	and.w	r2, r3, #12
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	429a      	cmp	r2, r3
 8002564:	d1eb      	bne.n	800253e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d008      	beq.n	8002584 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002572:	4b2f      	ldr	r3, [pc, #188]	; (8002630 <HAL_RCC_ClockConfig+0x1b4>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	492c      	ldr	r1, [pc, #176]	; (8002630 <HAL_RCC_ClockConfig+0x1b4>)
 8002580:	4313      	orrs	r3, r2
 8002582:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002584:	4b29      	ldr	r3, [pc, #164]	; (800262c <HAL_RCC_ClockConfig+0x1b0>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	429a      	cmp	r2, r3
 8002590:	d210      	bcs.n	80025b4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002592:	4b26      	ldr	r3, [pc, #152]	; (800262c <HAL_RCC_ClockConfig+0x1b0>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f023 0207 	bic.w	r2, r3, #7
 800259a:	4924      	ldr	r1, [pc, #144]	; (800262c <HAL_RCC_ClockConfig+0x1b0>)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	4313      	orrs	r3, r2
 80025a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a2:	4b22      	ldr	r3, [pc, #136]	; (800262c <HAL_RCC_ClockConfig+0x1b0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d001      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e036      	b.n	8002622 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d008      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025c0:	4b1b      	ldr	r3, [pc, #108]	; (8002630 <HAL_RCC_ClockConfig+0x1b4>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	4918      	ldr	r1, [pc, #96]	; (8002630 <HAL_RCC_ClockConfig+0x1b4>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d009      	beq.n	80025f2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025de:	4b14      	ldr	r3, [pc, #80]	; (8002630 <HAL_RCC_ClockConfig+0x1b4>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	4910      	ldr	r1, [pc, #64]	; (8002630 <HAL_RCC_ClockConfig+0x1b4>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025f2:	f000 f825 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 80025f6:	4601      	mov	r1, r0
 80025f8:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <HAL_RCC_ClockConfig+0x1b4>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	091b      	lsrs	r3, r3, #4
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	4a0c      	ldr	r2, [pc, #48]	; (8002634 <HAL_RCC_ClockConfig+0x1b8>)
 8002604:	5cd3      	ldrb	r3, [r2, r3]
 8002606:	f003 031f 	and.w	r3, r3, #31
 800260a:	fa21 f303 	lsr.w	r3, r1, r3
 800260e:	4a0a      	ldr	r2, [pc, #40]	; (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 8002610:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002612:	4b0a      	ldr	r3, [pc, #40]	; (800263c <HAL_RCC_ClockConfig+0x1c0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f7fe ff76 	bl	8001508 <HAL_InitTick>
 800261c:	4603      	mov	r3, r0
 800261e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002620:	7afb      	ldrb	r3, [r7, #11]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40022000 	.word	0x40022000
 8002630:	40021000 	.word	0x40021000
 8002634:	080062c8 	.word	0x080062c8
 8002638:	20000000 	.word	0x20000000
 800263c:	20000004 	.word	0x20000004

08002640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002640:	b480      	push	{r7}
 8002642:	b089      	sub	sp, #36	; 0x24
 8002644:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002646:	2300      	movs	r3, #0
 8002648:	61fb      	str	r3, [r7, #28]
 800264a:	2300      	movs	r3, #0
 800264c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800264e:	4b3d      	ldr	r3, [pc, #244]	; (8002744 <HAL_RCC_GetSysClockFreq+0x104>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 030c 	and.w	r3, r3, #12
 8002656:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002658:	4b3a      	ldr	r3, [pc, #232]	; (8002744 <HAL_RCC_GetSysClockFreq+0x104>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	f003 0303 	and.w	r3, r3, #3
 8002660:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d005      	beq.n	8002674 <HAL_RCC_GetSysClockFreq+0x34>
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	2b0c      	cmp	r3, #12
 800266c:	d121      	bne.n	80026b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d11e      	bne.n	80026b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002674:	4b33      	ldr	r3, [pc, #204]	; (8002744 <HAL_RCC_GetSysClockFreq+0x104>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	2b00      	cmp	r3, #0
 800267e:	d107      	bne.n	8002690 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002680:	4b30      	ldr	r3, [pc, #192]	; (8002744 <HAL_RCC_GetSysClockFreq+0x104>)
 8002682:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002686:	0a1b      	lsrs	r3, r3, #8
 8002688:	f003 030f 	and.w	r3, r3, #15
 800268c:	61fb      	str	r3, [r7, #28]
 800268e:	e005      	b.n	800269c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002690:	4b2c      	ldr	r3, [pc, #176]	; (8002744 <HAL_RCC_GetSysClockFreq+0x104>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	091b      	lsrs	r3, r3, #4
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800269c:	4a2a      	ldr	r2, [pc, #168]	; (8002748 <HAL_RCC_GetSysClockFreq+0x108>)
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10d      	bne.n	80026c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026b0:	e00a      	b.n	80026c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	2b04      	cmp	r3, #4
 80026b6:	d102      	bne.n	80026be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026b8:	4b24      	ldr	r3, [pc, #144]	; (800274c <HAL_RCC_GetSysClockFreq+0x10c>)
 80026ba:	61bb      	str	r3, [r7, #24]
 80026bc:	e004      	b.n	80026c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d101      	bne.n	80026c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026c4:	4b22      	ldr	r3, [pc, #136]	; (8002750 <HAL_RCC_GetSysClockFreq+0x110>)
 80026c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	2b0c      	cmp	r3, #12
 80026cc:	d133      	bne.n	8002736 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026ce:	4b1d      	ldr	r3, [pc, #116]	; (8002744 <HAL_RCC_GetSysClockFreq+0x104>)
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d002      	beq.n	80026e4 <HAL_RCC_GetSysClockFreq+0xa4>
 80026de:	2b03      	cmp	r3, #3
 80026e0:	d003      	beq.n	80026ea <HAL_RCC_GetSysClockFreq+0xaa>
 80026e2:	e005      	b.n	80026f0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80026e4:	4b19      	ldr	r3, [pc, #100]	; (800274c <HAL_RCC_GetSysClockFreq+0x10c>)
 80026e6:	617b      	str	r3, [r7, #20]
      break;
 80026e8:	e005      	b.n	80026f6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80026ea:	4b19      	ldr	r3, [pc, #100]	; (8002750 <HAL_RCC_GetSysClockFreq+0x110>)
 80026ec:	617b      	str	r3, [r7, #20]
      break;
 80026ee:	e002      	b.n	80026f6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	617b      	str	r3, [r7, #20]
      break;
 80026f4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026f6:	4b13      	ldr	r3, [pc, #76]	; (8002744 <HAL_RCC_GetSysClockFreq+0x104>)
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	091b      	lsrs	r3, r3, #4
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	3301      	adds	r3, #1
 8002702:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002704:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <HAL_RCC_GetSysClockFreq+0x104>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	0a1b      	lsrs	r3, r3, #8
 800270a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	fb02 f203 	mul.w	r2, r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	fbb2 f3f3 	udiv	r3, r2, r3
 800271a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800271c:	4b09      	ldr	r3, [pc, #36]	; (8002744 <HAL_RCC_GetSysClockFreq+0x104>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	0e5b      	lsrs	r3, r3, #25
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	3301      	adds	r3, #1
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	fbb2 f3f3 	udiv	r3, r2, r3
 8002734:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002736:	69bb      	ldr	r3, [r7, #24]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3724      	adds	r7, #36	; 0x24
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	40021000 	.word	0x40021000
 8002748:	080062e0 	.word	0x080062e0
 800274c:	00f42400 	.word	0x00f42400
 8002750:	007a1200 	.word	0x007a1200

08002754 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002758:	4b03      	ldr	r3, [pc, #12]	; (8002768 <HAL_RCC_GetHCLKFreq+0x14>)
 800275a:	681b      	ldr	r3, [r3, #0]
}
 800275c:	4618      	mov	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	20000000 	.word	0x20000000

0800276c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002770:	f7ff fff0 	bl	8002754 <HAL_RCC_GetHCLKFreq>
 8002774:	4601      	mov	r1, r0
 8002776:	4b06      	ldr	r3, [pc, #24]	; (8002790 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	0a1b      	lsrs	r3, r3, #8
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	4a04      	ldr	r2, [pc, #16]	; (8002794 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002782:	5cd3      	ldrb	r3, [r2, r3]
 8002784:	f003 031f 	and.w	r3, r3, #31
 8002788:	fa21 f303 	lsr.w	r3, r1, r3
}
 800278c:	4618      	mov	r0, r3
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40021000 	.word	0x40021000
 8002794:	080062d8 	.word	0x080062d8

08002798 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800279c:	f7ff ffda 	bl	8002754 <HAL_RCC_GetHCLKFreq>
 80027a0:	4601      	mov	r1, r0
 80027a2:	4b06      	ldr	r3, [pc, #24]	; (80027bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	0adb      	lsrs	r3, r3, #11
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	4a04      	ldr	r2, [pc, #16]	; (80027c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027ae:	5cd3      	ldrb	r3, [r2, r3]
 80027b0:	f003 031f 	and.w	r3, r3, #31
 80027b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40021000 	.word	0x40021000
 80027c0:	080062d8 	.word	0x080062d8

080027c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027cc:	2300      	movs	r3, #0
 80027ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027d0:	4b2a      	ldr	r3, [pc, #168]	; (800287c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027dc:	f7ff f9ca 	bl	8001b74 <HAL_PWREx_GetVoltageRange>
 80027e0:	6178      	str	r0, [r7, #20]
 80027e2:	e014      	b.n	800280e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027e4:	4b25      	ldr	r3, [pc, #148]	; (800287c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e8:	4a24      	ldr	r2, [pc, #144]	; (800287c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ee:	6593      	str	r3, [r2, #88]	; 0x58
 80027f0:	4b22      	ldr	r3, [pc, #136]	; (800287c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80027fc:	f7ff f9ba 	bl	8001b74 <HAL_PWREx_GetVoltageRange>
 8002800:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002802:	4b1e      	ldr	r3, [pc, #120]	; (800287c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002806:	4a1d      	ldr	r2, [pc, #116]	; (800287c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002808:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800280c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002814:	d10b      	bne.n	800282e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b80      	cmp	r3, #128	; 0x80
 800281a:	d919      	bls.n	8002850 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2ba0      	cmp	r3, #160	; 0xa0
 8002820:	d902      	bls.n	8002828 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002822:	2302      	movs	r3, #2
 8002824:	613b      	str	r3, [r7, #16]
 8002826:	e013      	b.n	8002850 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002828:	2301      	movs	r3, #1
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	e010      	b.n	8002850 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b80      	cmp	r3, #128	; 0x80
 8002832:	d902      	bls.n	800283a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002834:	2303      	movs	r3, #3
 8002836:	613b      	str	r3, [r7, #16]
 8002838:	e00a      	b.n	8002850 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b80      	cmp	r3, #128	; 0x80
 800283e:	d102      	bne.n	8002846 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002840:	2302      	movs	r3, #2
 8002842:	613b      	str	r3, [r7, #16]
 8002844:	e004      	b.n	8002850 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b70      	cmp	r3, #112	; 0x70
 800284a:	d101      	bne.n	8002850 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800284c:	2301      	movs	r3, #1
 800284e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f023 0207 	bic.w	r2, r3, #7
 8002858:	4909      	ldr	r1, [pc, #36]	; (8002880 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	4313      	orrs	r3, r2
 800285e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002860:	4b07      	ldr	r3, [pc, #28]	; (8002880 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	429a      	cmp	r2, r3
 800286c:	d001      	beq.n	8002872 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e000      	b.n	8002874 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40021000 	.word	0x40021000
 8002880:	40022000 	.word	0x40022000

08002884 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800288c:	2300      	movs	r3, #0
 800288e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002890:	2300      	movs	r3, #0
 8002892:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800289c:	2b00      	cmp	r3, #0
 800289e:	d02f      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028a8:	d005      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80028aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028ae:	d015      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x58>
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d007      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80028b4:	e00f      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80028b6:	4bac      	ldr	r3, [pc, #688]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	4aab      	ldr	r2, [pc, #684]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028c2:	e00c      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3304      	adds	r3, #4
 80028c8:	2100      	movs	r1, #0
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 f9dc 	bl	8002c88 <RCCEx_PLLSAI1_Config>
 80028d0:	4603      	mov	r3, r0
 80028d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028d4:	e003      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	74fb      	strb	r3, [r7, #19]
      break;
 80028da:	e000      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 80028dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028de:	7cfb      	ldrb	r3, [r7, #19]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10b      	bne.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028e4:	4ba0      	ldr	r3, [pc, #640]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f2:	499d      	ldr	r1, [pc, #628]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028fa:	e001      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028fc:	7cfb      	ldrb	r3, [r7, #19]
 80028fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 8099 	beq.w	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 800290e:	2300      	movs	r3, #0
 8002910:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002912:	4b95      	ldr	r3, [pc, #596]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002922:	2300      	movs	r3, #0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00d      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002928:	4b8f      	ldr	r3, [pc, #572]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800292a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292c:	4a8e      	ldr	r2, [pc, #568]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800292e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002932:	6593      	str	r3, [r2, #88]	; 0x58
 8002934:	4b8c      	ldr	r3, [pc, #560]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002940:	2301      	movs	r3, #1
 8002942:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002944:	4b89      	ldr	r3, [pc, #548]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a88      	ldr	r2, [pc, #544]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800294a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800294e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002950:	f7fe fe26 	bl	80015a0 <HAL_GetTick>
 8002954:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002956:	e009      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002958:	f7fe fe22 	bl	80015a0 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d902      	bls.n	800296c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	74fb      	strb	r3, [r7, #19]
        break;
 800296a:	e005      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800296c:	4b7f      	ldr	r3, [pc, #508]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0ef      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8002978:	7cfb      	ldrb	r3, [r7, #19]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d155      	bne.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800297e:	4b7a      	ldr	r3, [pc, #488]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002984:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002988:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d01e      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	429a      	cmp	r2, r3
 8002998:	d019      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800299a:	4b73      	ldr	r3, [pc, #460]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800299c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029a4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029a6:	4b70      	ldr	r3, [pc, #448]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ac:	4a6e      	ldr	r2, [pc, #440]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029b6:	4b6c      	ldr	r3, [pc, #432]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029bc:	4a6a      	ldr	r2, [pc, #424]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029c6:	4a68      	ldr	r2, [pc, #416]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d016      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d8:	f7fe fde2 	bl	80015a0 <HAL_GetTick>
 80029dc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029de:	e00b      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e0:	f7fe fdde 	bl	80015a0 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d902      	bls.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	74fb      	strb	r3, [r7, #19]
            break;
 80029f6:	e006      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029f8:	4b5b      	ldr	r3, [pc, #364]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0ec      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8002a06:	7cfb      	ldrb	r3, [r7, #19]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10b      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a0c:	4b56      	ldr	r3, [pc, #344]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a1a:	4953      	ldr	r1, [pc, #332]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a22:	e004      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a24:	7cfb      	ldrb	r3, [r7, #19]
 8002a26:	74bb      	strb	r3, [r7, #18]
 8002a28:	e001      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a2a:	7cfb      	ldrb	r3, [r7, #19]
 8002a2c:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a2e:	7c7b      	ldrb	r3, [r7, #17]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d105      	bne.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a34:	4b4c      	ldr	r3, [pc, #304]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a38:	4a4b      	ldr	r2, [pc, #300]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a3e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00a      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a4c:	4b46      	ldr	r3, [pc, #280]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a52:	f023 0203 	bic.w	r2, r3, #3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	4943      	ldr	r1, [pc, #268]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00a      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a6e:	4b3e      	ldr	r3, [pc, #248]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a74:	f023 020c 	bic.w	r2, r3, #12
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	493a      	ldr	r1, [pc, #232]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0320 	and.w	r3, r3, #32
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00a      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a90:	4b35      	ldr	r3, [pc, #212]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9e:	4932      	ldr	r1, [pc, #200]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00a      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ab2:	4b2d      	ldr	r3, [pc, #180]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac0:	4929      	ldr	r1, [pc, #164]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00a      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ad4:	4b24      	ldr	r3, [pc, #144]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ada:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae2:	4921      	ldr	r1, [pc, #132]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00a      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002af6:	4b1c      	ldr	r3, [pc, #112]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b04:	4918      	ldr	r1, [pc, #96]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00a      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b18:	4b13      	ldr	r3, [pc, #76]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	4910      	ldr	r1, [pc, #64]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d02c      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b3a:	4b0b      	ldr	r3, [pc, #44]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b40:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	4907      	ldr	r1, [pc, #28]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b58:	d10a      	bne.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b5a:	4b03      	ldr	r3, [pc, #12]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	4a02      	ldr	r2, [pc, #8]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b64:	60d3      	str	r3, [r2, #12]
 8002b66:	e015      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b78:	d10c      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	3304      	adds	r3, #4
 8002b7e:	2101      	movs	r1, #1
 8002b80:	4618      	mov	r0, r3
 8002b82:	f000 f881 	bl	8002c88 <RCCEx_PLLSAI1_Config>
 8002b86:	4603      	mov	r3, r0
 8002b88:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b8a:	7cfb      	ldrb	r3, [r7, #19]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8002b90:	7cfb      	ldrb	r3, [r7, #19]
 8002b92:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d028      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ba0:	4b30      	ldr	r3, [pc, #192]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	492d      	ldr	r1, [pc, #180]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bbe:	d106      	bne.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bc0:	4b28      	ldr	r3, [pc, #160]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	4a27      	ldr	r2, [pc, #156]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bca:	60d3      	str	r3, [r2, #12]
 8002bcc:	e011      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bd6:	d10c      	bne.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3304      	adds	r3, #4
 8002bdc:	2101      	movs	r1, #1
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 f852 	bl	8002c88 <RCCEx_PLLSAI1_Config>
 8002be4:	4603      	mov	r3, r0
 8002be6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002be8:	7cfb      	ldrb	r3, [r7, #19]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8002bee:	7cfb      	ldrb	r3, [r7, #19]
 8002bf0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d01c      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bfe:	4b19      	ldr	r3, [pc, #100]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c04:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c0c:	4915      	ldr	r1, [pc, #84]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c1c:	d10c      	bne.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3304      	adds	r3, #4
 8002c22:	2102      	movs	r1, #2
 8002c24:	4618      	mov	r0, r3
 8002c26:	f000 f82f 	bl	8002c88 <RCCEx_PLLSAI1_Config>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c2e:	7cfb      	ldrb	r3, [r7, #19]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8002c34:	7cfb      	ldrb	r3, [r7, #19]
 8002c36:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00a      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c44:	4b07      	ldr	r3, [pc, #28]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c52:	4904      	ldr	r1, [pc, #16]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c5a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40021000 	.word	0x40021000

08002c68 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002c6c:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a04      	ldr	r2, [pc, #16]	; (8002c84 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002c72:	f043 0304 	orr.w	r3, r3, #4
 8002c76:	6013      	str	r3, [r2, #0]
}
 8002c78:	bf00      	nop
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	40021000 	.word	0x40021000

08002c88 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c92:	2300      	movs	r3, #0
 8002c94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c96:	4b73      	ldr	r3, [pc, #460]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d018      	beq.n	8002cd4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ca2:	4b70      	ldr	r3, [pc, #448]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f003 0203 	and.w	r2, r3, #3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d10d      	bne.n	8002cce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
       ||
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d009      	beq.n	8002cce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002cba:	4b6a      	ldr	r3, [pc, #424]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	091b      	lsrs	r3, r3, #4
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	1c5a      	adds	r2, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
       ||
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d044      	beq.n	8002d58 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	73fb      	strb	r3, [r7, #15]
 8002cd2:	e041      	b.n	8002d58 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d00c      	beq.n	8002cf6 <RCCEx_PLLSAI1_Config+0x6e>
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d013      	beq.n	8002d08 <RCCEx_PLLSAI1_Config+0x80>
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d120      	bne.n	8002d26 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ce4:	4b5f      	ldr	r3, [pc, #380]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d11d      	bne.n	8002d2c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cf4:	e01a      	b.n	8002d2c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cf6:	4b5b      	ldr	r3, [pc, #364]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d116      	bne.n	8002d30 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d06:	e013      	b.n	8002d30 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d08:	4b56      	ldr	r3, [pc, #344]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10f      	bne.n	8002d34 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d14:	4b53      	ldr	r3, [pc, #332]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d109      	bne.n	8002d34 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d24:	e006      	b.n	8002d34 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	73fb      	strb	r3, [r7, #15]
      break;
 8002d2a:	e004      	b.n	8002d36 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002d2c:	bf00      	nop
 8002d2e:	e002      	b.n	8002d36 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002d30:	bf00      	nop
 8002d32:	e000      	b.n	8002d36 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002d34:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d36:	7bfb      	ldrb	r3, [r7, #15]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10d      	bne.n	8002d58 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d3c:	4b49      	ldr	r3, [pc, #292]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6819      	ldr	r1, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	011b      	lsls	r3, r3, #4
 8002d50:	430b      	orrs	r3, r1
 8002d52:	4944      	ldr	r1, [pc, #272]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d17c      	bne.n	8002e58 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d5e:	4b41      	ldr	r3, [pc, #260]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a40      	ldr	r2, [pc, #256]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d6a:	f7fe fc19 	bl	80015a0 <HAL_GetTick>
 8002d6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d70:	e009      	b.n	8002d86 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d72:	f7fe fc15 	bl	80015a0 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d902      	bls.n	8002d86 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	73fb      	strb	r3, [r7, #15]
        break;
 8002d84:	e005      	b.n	8002d92 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d86:	4b37      	ldr	r3, [pc, #220]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1ef      	bne.n	8002d72 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d15f      	bne.n	8002e58 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d110      	bne.n	8002dc0 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d9e:	4b31      	ldr	r3, [pc, #196]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002da6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6892      	ldr	r2, [r2, #8]
 8002dae:	0211      	lsls	r1, r2, #8
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	68d2      	ldr	r2, [r2, #12]
 8002db4:	06d2      	lsls	r2, r2, #27
 8002db6:	430a      	orrs	r2, r1
 8002db8:	492a      	ldr	r1, [pc, #168]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	610b      	str	r3, [r1, #16]
 8002dbe:	e027      	b.n	8002e10 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d112      	bne.n	8002dec <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dc6:	4b27      	ldr	r3, [pc, #156]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002dce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	6892      	ldr	r2, [r2, #8]
 8002dd6:	0211      	lsls	r1, r2, #8
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6912      	ldr	r2, [r2, #16]
 8002ddc:	0852      	lsrs	r2, r2, #1
 8002dde:	3a01      	subs	r2, #1
 8002de0:	0552      	lsls	r2, r2, #21
 8002de2:	430a      	orrs	r2, r1
 8002de4:	491f      	ldr	r1, [pc, #124]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	610b      	str	r3, [r1, #16]
 8002dea:	e011      	b.n	8002e10 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dec:	4b1d      	ldr	r3, [pc, #116]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002df4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6892      	ldr	r2, [r2, #8]
 8002dfc:	0211      	lsls	r1, r2, #8
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6952      	ldr	r2, [r2, #20]
 8002e02:	0852      	lsrs	r2, r2, #1
 8002e04:	3a01      	subs	r2, #1
 8002e06:	0652      	lsls	r2, r2, #25
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	4916      	ldr	r1, [pc, #88]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e10:	4b14      	ldr	r3, [pc, #80]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a13      	ldr	r2, [pc, #76]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1c:	f7fe fbc0 	bl	80015a0 <HAL_GetTick>
 8002e20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e22:	e009      	b.n	8002e38 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e24:	f7fe fbbc 	bl	80015a0 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d902      	bls.n	8002e38 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	73fb      	strb	r3, [r7, #15]
          break;
 8002e36:	e005      	b.n	8002e44 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e38:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0ef      	beq.n	8002e24 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8002e44:	7bfb      	ldrb	r3, [r7, #15]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d106      	bne.n	8002e58 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e4a:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e4c:	691a      	ldr	r2, [r3, #16]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	4904      	ldr	r1, [pc, #16]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40021000 	.word	0x40021000

08002e68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e07c      	b.n	8002f74 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d106      	bne.n	8002e9a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7fe f901 	bl	800109c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eb0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002eba:	d902      	bls.n	8002ec2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	e002      	b.n	8002ec8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ec6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002ed0:	d007      	beq.n	8002ee2 <HAL_SPI_Init+0x7a>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002eda:	d002      	beq.n	8002ee2 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10b      	bne.n	8002f02 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ef2:	d903      	bls.n	8002efc <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	631a      	str	r2, [r3, #48]	; 0x30
 8002efa:	e002      	b.n	8002f02 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	431a      	orrs	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f20:	431a      	orrs	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	ea42 0103 	orr.w	r1, r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	0c1b      	lsrs	r3, r3, #16
 8002f42:	f003 0204 	and.w	r2, r3, #4
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f50:	431a      	orrs	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	ea42 0103 	orr.w	r1, r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b088      	sub	sp, #32
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	603b      	str	r3, [r7, #0]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <HAL_SPI_Transmit+0x22>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e150      	b.n	8003240 <HAL_SPI_Transmit+0x2c4>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fa6:	f7fe fafb 	bl	80015a0 <HAL_GetTick>
 8002faa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002fac:	88fb      	ldrh	r3, [r7, #6]
 8002fae:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d002      	beq.n	8002fc2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002fc0:	e135      	b.n	800322e <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d002      	beq.n	8002fce <HAL_SPI_Transmit+0x52>
 8002fc8:	88fb      	ldrh	r3, [r7, #6]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d102      	bne.n	8002fd4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002fd2:	e12c      	b.n	800322e <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2203      	movs	r2, #3
 8002fd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	88fa      	ldrh	r2, [r7, #6]
 8002fec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	88fa      	ldrh	r2, [r7, #6]
 8002ff2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800301e:	d107      	bne.n	8003030 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800302e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800303a:	2b40      	cmp	r3, #64	; 0x40
 800303c:	d007      	beq.n	800304e <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800304c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003056:	d94b      	bls.n	80030f0 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d002      	beq.n	8003066 <HAL_SPI_Transmit+0xea>
 8003060:	8afb      	ldrh	r3, [r7, #22]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d13e      	bne.n	80030e4 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306a:	881a      	ldrh	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003076:	1c9a      	adds	r2, r3, #2
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003080:	b29b      	uxth	r3, r3
 8003082:	3b01      	subs	r3, #1
 8003084:	b29a      	uxth	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800308a:	e02b      	b.n	80030e4 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b02      	cmp	r3, #2
 8003098:	d112      	bne.n	80030c0 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309e:	881a      	ldrh	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030aa:	1c9a      	adds	r2, r3, #2
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	3b01      	subs	r3, #1
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030be:	e011      	b.n	80030e4 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030c0:	f7fe fa6e 	bl	80015a0 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d803      	bhi.n	80030d8 <HAL_SPI_Transmit+0x15c>
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d6:	d102      	bne.n	80030de <HAL_SPI_Transmit+0x162>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d102      	bne.n	80030e4 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80030e2:	e0a4      	b.n	800322e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1ce      	bne.n	800308c <HAL_SPI_Transmit+0x110>
 80030ee:	e07c      	b.n	80031ea <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d002      	beq.n	80030fe <HAL_SPI_Transmit+0x182>
 80030f8:	8afb      	ldrh	r3, [r7, #22]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d170      	bne.n	80031e0 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003102:	b29b      	uxth	r3, r3
 8003104:	2b01      	cmp	r3, #1
 8003106:	d912      	bls.n	800312e <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310c:	881a      	ldrh	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003118:	1c9a      	adds	r2, r3, #2
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003122:	b29b      	uxth	r3, r3
 8003124:	3b02      	subs	r3, #2
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800312c:	e058      	b.n	80031e0 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	330c      	adds	r3, #12
 8003138:	7812      	ldrb	r2, [r2, #0]
 800313a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003140:	1c5a      	adds	r2, r3, #1
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800314a:	b29b      	uxth	r3, r3
 800314c:	3b01      	subs	r3, #1
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003154:	e044      	b.n	80031e0 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b02      	cmp	r3, #2
 8003162:	d12b      	bne.n	80031bc <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003168:	b29b      	uxth	r3, r3
 800316a:	2b01      	cmp	r3, #1
 800316c:	d912      	bls.n	8003194 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003172:	881a      	ldrh	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317e:	1c9a      	adds	r2, r3, #2
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003188:	b29b      	uxth	r3, r3
 800318a:	3b02      	subs	r3, #2
 800318c:	b29a      	uxth	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003192:	e025      	b.n	80031e0 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	330c      	adds	r3, #12
 800319e:	7812      	ldrb	r2, [r2, #0]
 80031a0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	3b01      	subs	r3, #1
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031ba:	e011      	b.n	80031e0 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031bc:	f7fe f9f0 	bl	80015a0 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d803      	bhi.n	80031d4 <HAL_SPI_Transmit+0x258>
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d2:	d102      	bne.n	80031da <HAL_SPI_Transmit+0x25e>
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d102      	bne.n	80031e0 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80031de:	e026      	b.n	800322e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1b5      	bne.n	8003156 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	6839      	ldr	r1, [r7, #0]
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 f901 	bl	80033f6 <SPI_EndRxTxTransaction>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d002      	beq.n	8003200 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2220      	movs	r2, #32
 80031fe:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10a      	bne.n	800321e <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003208:	2300      	movs	r3, #0
 800320a:	613b      	str	r3, [r7, #16]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	613b      	str	r3, [r7, #16]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	613b      	str	r3, [r7, #16]
 800321c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003222:	2b00      	cmp	r3, #0
 8003224:	d002      	beq.n	800322c <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	77fb      	strb	r3, [r7, #31]
 800322a:	e000      	b.n	800322e <HAL_SPI_Transmit+0x2b2>
  }

error:
 800322c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800323e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003240:	4618      	mov	r0, r3
 8003242:	3720      	adds	r7, #32
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	603b      	str	r3, [r7, #0]
 8003254:	4613      	mov	r3, r2
 8003256:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003258:	e04c      	b.n	80032f4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003260:	d048      	beq.n	80032f4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003262:	f7fe f99d 	bl	80015a0 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	429a      	cmp	r2, r3
 8003270:	d902      	bls.n	8003278 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d13d      	bne.n	80032f4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003286:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003290:	d111      	bne.n	80032b6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800329a:	d004      	beq.n	80032a6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a4:	d107      	bne.n	80032b6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032b4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032be:	d10f      	bne.n	80032e0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032de:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e00f      	b.n	8003314 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	4013      	ands	r3, r2
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	429a      	cmp	r2, r3
 8003302:	bf0c      	ite	eq
 8003304:	2301      	moveq	r3, #1
 8003306:	2300      	movne	r3, #0
 8003308:	b2db      	uxtb	r3, r3
 800330a:	461a      	mov	r2, r3
 800330c:	79fb      	ldrb	r3, [r7, #7]
 800330e:	429a      	cmp	r2, r3
 8003310:	d1a3      	bne.n	800325a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
 8003328:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800332a:	e057      	b.n	80033dc <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003332:	d106      	bne.n	8003342 <SPI_WaitFifoStateUntilTimeout+0x26>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d103      	bne.n	8003342 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	330c      	adds	r3, #12
 8003340:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003348:	d048      	beq.n	80033dc <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800334a:	f7fe f929 	bl	80015a0 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	429a      	cmp	r2, r3
 8003358:	d902      	bls.n	8003360 <SPI_WaitFifoStateUntilTimeout+0x44>
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d13d      	bne.n	80033dc <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800336e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003378:	d111      	bne.n	800339e <SPI_WaitFifoStateUntilTimeout+0x82>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003382:	d004      	beq.n	800338e <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800338c:	d107      	bne.n	800339e <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800339c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033a6:	d10f      	bne.n	80033c8 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033c6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e008      	b.n	80033ee <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689a      	ldr	r2, [r3, #8]
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	4013      	ands	r3, r2
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d19f      	bne.n	800332c <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b086      	sub	sp, #24
 80033fa:	af02      	add	r7, sp, #8
 80033fc:	60f8      	str	r0, [r7, #12]
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	2200      	movs	r2, #0
 800340a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f7ff ff84 	bl	800331c <SPI_WaitFifoStateUntilTimeout>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d007      	beq.n	800342a <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800341e:	f043 0220 	orr.w	r2, r3, #32
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e027      	b.n	800347a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	2200      	movs	r2, #0
 8003432:	2180      	movs	r1, #128	; 0x80
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f7ff ff07 	bl	8003248 <SPI_WaitFlagStateUntilTimeout>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d007      	beq.n	8003450 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003444:	f043 0220 	orr.w	r2, r3, #32
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e014      	b.n	800347a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2200      	movs	r2, #0
 8003458:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f7ff ff5d 	bl	800331c <SPI_WaitFifoStateUntilTimeout>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d007      	beq.n	8003478 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800346c:	f043 0220 	orr.w	r2, r3, #32
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e000      	b.n	800347a <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b082      	sub	sp, #8
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e01d      	b.n	80034d0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b00      	cmp	r3, #0
 800349e:	d106      	bne.n	80034ae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7fd fe3b 	bl	8001124 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2202      	movs	r2, #2
 80034b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3304      	adds	r3, #4
 80034be:	4619      	mov	r1, r3
 80034c0:	4610      	mov	r0, r2
 80034c2:	f000 fa33 	bl	800392c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68da      	ldr	r2, [r3, #12]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0201 	orr.w	r2, r2, #1
 80034ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	4b0c      	ldr	r3, [pc, #48]	; (8003528 <HAL_TIM_Base_Start_IT+0x50>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2b06      	cmp	r3, #6
 8003500:	d00b      	beq.n	800351a <HAL_TIM_Base_Start_IT+0x42>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003508:	d007      	beq.n	800351a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f042 0201 	orr.w	r2, r2, #1
 8003518:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	00010007 	.word	0x00010007

0800352c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b02      	cmp	r3, #2
 8003540:	d122      	bne.n	8003588 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b02      	cmp	r3, #2
 800354e:	d11b      	bne.n	8003588 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f06f 0202 	mvn.w	r2, #2
 8003558:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	f003 0303 	and.w	r3, r3, #3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f9be 	bl	80038f0 <HAL_TIM_IC_CaptureCallback>
 8003574:	e005      	b.n	8003582 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f9b0 	bl	80038dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 f9c1 	bl	8003904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f003 0304 	and.w	r3, r3, #4
 8003592:	2b04      	cmp	r3, #4
 8003594:	d122      	bne.n	80035dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b04      	cmp	r3, #4
 80035a2:	d11b      	bne.n	80035dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f06f 0204 	mvn.w	r2, #4
 80035ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2202      	movs	r2, #2
 80035b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f994 	bl	80038f0 <HAL_TIM_IC_CaptureCallback>
 80035c8:	e005      	b.n	80035d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f986 	bl	80038dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f997 	bl	8003904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	f003 0308 	and.w	r3, r3, #8
 80035e6:	2b08      	cmp	r3, #8
 80035e8:	d122      	bne.n	8003630 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f003 0308 	and.w	r3, r3, #8
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d11b      	bne.n	8003630 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f06f 0208 	mvn.w	r2, #8
 8003600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2204      	movs	r2, #4
 8003606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	f003 0303 	and.w	r3, r3, #3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f96a 	bl	80038f0 <HAL_TIM_IC_CaptureCallback>
 800361c:	e005      	b.n	800362a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f95c 	bl	80038dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f96d 	bl	8003904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f003 0310 	and.w	r3, r3, #16
 800363a:	2b10      	cmp	r3, #16
 800363c:	d122      	bne.n	8003684 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f003 0310 	and.w	r3, r3, #16
 8003648:	2b10      	cmp	r3, #16
 800364a:	d11b      	bne.n	8003684 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f06f 0210 	mvn.w	r2, #16
 8003654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2208      	movs	r2, #8
 800365a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f940 	bl	80038f0 <HAL_TIM_IC_CaptureCallback>
 8003670:	e005      	b.n	800367e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f932 	bl	80038dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f943 	bl	8003904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b01      	cmp	r3, #1
 8003690:	d10e      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b01      	cmp	r3, #1
 800369e:	d107      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f06f 0201 	mvn.w	r2, #1
 80036a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7fd fb64 	bl	8000d78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ba:	2b80      	cmp	r3, #128	; 0x80
 80036bc:	d10e      	bne.n	80036dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c8:	2b80      	cmp	r3, #128	; 0x80
 80036ca:	d107      	bne.n	80036dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 fa96 	bl	8003c08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036ea:	d10e      	bne.n	800370a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f6:	2b80      	cmp	r3, #128	; 0x80
 80036f8:	d107      	bne.n	800370a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 fa89 	bl	8003c1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003714:	2b40      	cmp	r3, #64	; 0x40
 8003716:	d10e      	bne.n	8003736 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003722:	2b40      	cmp	r3, #64	; 0x40
 8003724:	d107      	bne.n	8003736 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800372e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f8f1 	bl	8003918 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	f003 0320 	and.w	r3, r3, #32
 8003740:	2b20      	cmp	r3, #32
 8003742:	d10e      	bne.n	8003762 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f003 0320 	and.w	r3, r3, #32
 800374e:	2b20      	cmp	r3, #32
 8003750:	d107      	bne.n	8003762 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f06f 0220 	mvn.w	r2, #32
 800375a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 fa49 	bl	8003bf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003762:	bf00      	nop
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b084      	sub	sp, #16
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
 8003772:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800377a:	2b01      	cmp	r3, #1
 800377c:	d101      	bne.n	8003782 <HAL_TIM_ConfigClockSource+0x18>
 800377e:	2302      	movs	r3, #2
 8003780:	e0a8      	b.n	80038d4 <HAL_TIM_ConfigClockSource+0x16a>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2202      	movs	r2, #2
 800378e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037a0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037a4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037ac:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2b40      	cmp	r3, #64	; 0x40
 80037bc:	d067      	beq.n	800388e <HAL_TIM_ConfigClockSource+0x124>
 80037be:	2b40      	cmp	r3, #64	; 0x40
 80037c0:	d80b      	bhi.n	80037da <HAL_TIM_ConfigClockSource+0x70>
 80037c2:	2b10      	cmp	r3, #16
 80037c4:	d073      	beq.n	80038ae <HAL_TIM_ConfigClockSource+0x144>
 80037c6:	2b10      	cmp	r3, #16
 80037c8:	d802      	bhi.n	80037d0 <HAL_TIM_ConfigClockSource+0x66>
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d06f      	beq.n	80038ae <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80037ce:	e078      	b.n	80038c2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80037d0:	2b20      	cmp	r3, #32
 80037d2:	d06c      	beq.n	80038ae <HAL_TIM_ConfigClockSource+0x144>
 80037d4:	2b30      	cmp	r3, #48	; 0x30
 80037d6:	d06a      	beq.n	80038ae <HAL_TIM_ConfigClockSource+0x144>
      break;
 80037d8:	e073      	b.n	80038c2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80037da:	2b70      	cmp	r3, #112	; 0x70
 80037dc:	d00d      	beq.n	80037fa <HAL_TIM_ConfigClockSource+0x90>
 80037de:	2b70      	cmp	r3, #112	; 0x70
 80037e0:	d804      	bhi.n	80037ec <HAL_TIM_ConfigClockSource+0x82>
 80037e2:	2b50      	cmp	r3, #80	; 0x50
 80037e4:	d033      	beq.n	800384e <HAL_TIM_ConfigClockSource+0xe4>
 80037e6:	2b60      	cmp	r3, #96	; 0x60
 80037e8:	d041      	beq.n	800386e <HAL_TIM_ConfigClockSource+0x104>
      break;
 80037ea:	e06a      	b.n	80038c2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80037ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f0:	d066      	beq.n	80038c0 <HAL_TIM_ConfigClockSource+0x156>
 80037f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037f6:	d017      	beq.n	8003828 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80037f8:	e063      	b.n	80038c2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6818      	ldr	r0, [r3, #0]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	6899      	ldr	r1, [r3, #8]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	f000 f96d 	bl	8003ae8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800381c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	609a      	str	r2, [r3, #8]
      break;
 8003826:	e04c      	b.n	80038c2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6818      	ldr	r0, [r3, #0]
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	6899      	ldr	r1, [r3, #8]
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	f000 f956 	bl	8003ae8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	689a      	ldr	r2, [r3, #8]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800384a:	609a      	str	r2, [r3, #8]
      break;
 800384c:	e039      	b.n	80038c2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6818      	ldr	r0, [r3, #0]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	6859      	ldr	r1, [r3, #4]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	461a      	mov	r2, r3
 800385c:	f000 f8ca 	bl	80039f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2150      	movs	r1, #80	; 0x50
 8003866:	4618      	mov	r0, r3
 8003868:	f000 f923 	bl	8003ab2 <TIM_ITRx_SetConfig>
      break;
 800386c:	e029      	b.n	80038c2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6818      	ldr	r0, [r3, #0]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	6859      	ldr	r1, [r3, #4]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	461a      	mov	r2, r3
 800387c:	f000 f8e9 	bl	8003a52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2160      	movs	r1, #96	; 0x60
 8003886:	4618      	mov	r0, r3
 8003888:	f000 f913 	bl	8003ab2 <TIM_ITRx_SetConfig>
      break;
 800388c:	e019      	b.n	80038c2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6818      	ldr	r0, [r3, #0]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	6859      	ldr	r1, [r3, #4]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	461a      	mov	r2, r3
 800389c:	f000 f8aa 	bl	80039f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2140      	movs	r1, #64	; 0x40
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 f903 	bl	8003ab2 <TIM_ITRx_SetConfig>
      break;
 80038ac:	e009      	b.n	80038c2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4619      	mov	r1, r3
 80038b8:	4610      	mov	r0, r2
 80038ba:	f000 f8fa 	bl	8003ab2 <TIM_ITRx_SetConfig>
      break;
 80038be:	e000      	b.n	80038c2 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80038c0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a2a      	ldr	r2, [pc, #168]	; (80039e8 <TIM_Base_SetConfig+0xbc>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d003      	beq.n	800394c <TIM_Base_SetConfig+0x20>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800394a:	d108      	bne.n	800395e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003952:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	4313      	orrs	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a21      	ldr	r2, [pc, #132]	; (80039e8 <TIM_Base_SetConfig+0xbc>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d00b      	beq.n	800397e <TIM_Base_SetConfig+0x52>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800396c:	d007      	beq.n	800397e <TIM_Base_SetConfig+0x52>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a1e      	ldr	r2, [pc, #120]	; (80039ec <TIM_Base_SetConfig+0xc0>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d003      	beq.n	800397e <TIM_Base_SetConfig+0x52>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a1d      	ldr	r2, [pc, #116]	; (80039f0 <TIM_Base_SetConfig+0xc4>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d108      	bne.n	8003990 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003984:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	4313      	orrs	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	4313      	orrs	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a0c      	ldr	r2, [pc, #48]	; (80039e8 <TIM_Base_SetConfig+0xbc>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d007      	beq.n	80039cc <TIM_Base_SetConfig+0xa0>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a0b      	ldr	r2, [pc, #44]	; (80039ec <TIM_Base_SetConfig+0xc0>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d003      	beq.n	80039cc <TIM_Base_SetConfig+0xa0>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a0a      	ldr	r2, [pc, #40]	; (80039f0 <TIM_Base_SetConfig+0xc4>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d103      	bne.n	80039d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	691a      	ldr	r2, [r3, #16]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	615a      	str	r2, [r3, #20]
}
 80039da:	bf00      	nop
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40012c00 	.word	0x40012c00
 80039ec:	40014000 	.word	0x40014000
 80039f0:	40014400 	.word	0x40014400

080039f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b087      	sub	sp, #28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	f023 0201 	bic.w	r2, r3, #1
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f023 030a 	bic.w	r3, r3, #10
 8003a30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	621a      	str	r2, [r3, #32]
}
 8003a46:	bf00      	nop
 8003a48:	371c      	adds	r7, #28
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b087      	sub	sp, #28
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	60f8      	str	r0, [r7, #12]
 8003a5a:	60b9      	str	r1, [r7, #8]
 8003a5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	f023 0210 	bic.w	r2, r3, #16
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	031b      	lsls	r3, r3, #12
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	011b      	lsls	r3, r3, #4
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	621a      	str	r2, [r3, #32]
}
 8003aa6:	bf00      	nop
 8003aa8:	371c      	adds	r7, #28
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b085      	sub	sp, #20
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
 8003aba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	f043 0307 	orr.w	r3, r3, #7
 8003ad4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	609a      	str	r2, [r3, #8]
}
 8003adc:	bf00      	nop
 8003ade:	3714      	adds	r7, #20
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b087      	sub	sp, #28
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
 8003af4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	021a      	lsls	r2, r3, #8
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	609a      	str	r2, [r3, #8]
}
 8003b1c:	bf00      	nop
 8003b1e:	371c      	adds	r7, #28
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d101      	bne.n	8003b40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	e04f      	b.n	8003be0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a21      	ldr	r2, [pc, #132]	; (8003bec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d108      	bne.n	8003b7c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003b70:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a14      	ldr	r2, [pc, #80]	; (8003bec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d009      	beq.n	8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba8:	d004      	beq.n	8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a10      	ldr	r2, [pc, #64]	; (8003bf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d10c      	bne.n	8003bce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr
 8003bec:	40012c00 	.word	0x40012c00
 8003bf0:	40014000 	.word	0x40014000

08003bf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e040      	b.n	8003cc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d106      	bne.n	8003c58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7fd fa8a 	bl	800116c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2224      	movs	r2, #36	; 0x24
 8003c5c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 0201 	bic.w	r2, r2, #1
 8003c6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f8c0 	bl	8003df4 <UART_SetConfig>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d101      	bne.n	8003c7e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e022      	b.n	8003cc4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d002      	beq.n	8003c8c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 fb9a 	bl	80043c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689a      	ldr	r2, [r3, #8]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003caa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 0201 	orr.w	r2, r2, #1
 8003cba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 fc21 	bl	8004504 <UART_CheckIdleState>
 8003cc2:	4603      	mov	r3, r0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3708      	adds	r7, #8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b08a      	sub	sp, #40	; 0x28
 8003cd0:	af02      	add	r7, sp, #8
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	603b      	str	r3, [r7, #0]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ce0:	2b20      	cmp	r3, #32
 8003ce2:	f040 8081 	bne.w	8003de8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d002      	beq.n	8003cf2 <HAL_UART_Transmit+0x26>
 8003cec:	88fb      	ldrh	r3, [r7, #6]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e079      	b.n	8003dea <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d101      	bne.n	8003d04 <HAL_UART_Transmit+0x38>
 8003d00:	2302      	movs	r3, #2
 8003d02:	e072      	b.n	8003dea <HAL_UART_Transmit+0x11e>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2221      	movs	r2, #33	; 0x21
 8003d16:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003d18:	f7fd fc42 	bl	80015a0 <HAL_GetTick>
 8003d1c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	88fa      	ldrh	r2, [r7, #6]
 8003d22:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	88fa      	ldrh	r2, [r7, #6]
 8003d2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d36:	d108      	bne.n	8003d4a <HAL_UART_Transmit+0x7e>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d104      	bne.n	8003d4a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003d40:	2300      	movs	r3, #0
 8003d42:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	61bb      	str	r3, [r7, #24]
 8003d48:	e003      	b.n	8003d52 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003d5a:	e02d      	b.n	8003db8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	2200      	movs	r2, #0
 8003d64:	2180      	movs	r1, #128	; 0x80
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f000 fc11 	bl	800458e <UART_WaitOnFlagUntilTimeout>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e039      	b.n	8003dea <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10b      	bne.n	8003d94 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	881a      	ldrh	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d88:	b292      	uxth	r2, r2
 8003d8a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	3302      	adds	r3, #2
 8003d90:	61bb      	str	r3, [r7, #24]
 8003d92:	e008      	b.n	8003da6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	781a      	ldrb	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	b292      	uxth	r2, r2
 8003d9e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	3301      	adds	r3, #1
 8003da4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	3b01      	subs	r3, #1
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1cb      	bne.n	8003d5c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	9300      	str	r3, [sp, #0]
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	2140      	movs	r1, #64	; 0x40
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 fbdd 	bl	800458e <UART_WaitOnFlagUntilTimeout>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e005      	b.n	8003dea <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2220      	movs	r2, #32
 8003de2:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003de4:	2300      	movs	r3, #0
 8003de6:	e000      	b.n	8003dea <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003de8:	2302      	movs	r3, #2
  }
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3720      	adds	r7, #32
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
	...

08003df4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003df4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003df8:	b08a      	sub	sp, #40	; 0x28
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e02:	2300      	movs	r3, #0
 8003e04:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003e06:	2300      	movs	r3, #0
 8003e08:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689a      	ldr	r2, [r3, #8]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	4bb3      	ldr	r3, [pc, #716]	; (80040f8 <UART_SetConfig+0x304>)
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6812      	ldr	r2, [r2, #0]
 8003e30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e32:	430b      	orrs	r3, r1
 8003e34:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4aa9      	ldr	r2, [pc, #676]	; (80040fc <UART_SetConfig+0x308>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d004      	beq.n	8003e66 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e62:	4313      	orrs	r3, r2
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e76:	430a      	orrs	r2, r1
 8003e78:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4aa0      	ldr	r2, [pc, #640]	; (8004100 <UART_SetConfig+0x30c>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d126      	bne.n	8003ed2 <UART_SetConfig+0xde>
 8003e84:	4b9f      	ldr	r3, [pc, #636]	; (8004104 <UART_SetConfig+0x310>)
 8003e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	2b03      	cmp	r3, #3
 8003e90:	d81a      	bhi.n	8003ec8 <UART_SetConfig+0xd4>
 8003e92:	a201      	add	r2, pc, #4	; (adr r2, 8003e98 <UART_SetConfig+0xa4>)
 8003e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e98:	08003ea9 	.word	0x08003ea9
 8003e9c:	08003eb9 	.word	0x08003eb9
 8003ea0:	08003eb1 	.word	0x08003eb1
 8003ea4:	08003ec1 	.word	0x08003ec1
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eae:	e080      	b.n	8003fb2 <UART_SetConfig+0x1be>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eb6:	e07c      	b.n	8003fb2 <UART_SetConfig+0x1be>
 8003eb8:	2304      	movs	r3, #4
 8003eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ebe:	e078      	b.n	8003fb2 <UART_SetConfig+0x1be>
 8003ec0:	2308      	movs	r3, #8
 8003ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ec6:	e074      	b.n	8003fb2 <UART_SetConfig+0x1be>
 8003ec8:	2310      	movs	r3, #16
 8003eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ece:	bf00      	nop
 8003ed0:	e06f      	b.n	8003fb2 <UART_SetConfig+0x1be>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a8c      	ldr	r2, [pc, #560]	; (8004108 <UART_SetConfig+0x314>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d138      	bne.n	8003f4e <UART_SetConfig+0x15a>
 8003edc:	4b89      	ldr	r3, [pc, #548]	; (8004104 <UART_SetConfig+0x310>)
 8003ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee2:	f003 030c 	and.w	r3, r3, #12
 8003ee6:	2b0c      	cmp	r3, #12
 8003ee8:	d82c      	bhi.n	8003f44 <UART_SetConfig+0x150>
 8003eea:	a201      	add	r2, pc, #4	; (adr r2, 8003ef0 <UART_SetConfig+0xfc>)
 8003eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef0:	08003f25 	.word	0x08003f25
 8003ef4:	08003f45 	.word	0x08003f45
 8003ef8:	08003f45 	.word	0x08003f45
 8003efc:	08003f45 	.word	0x08003f45
 8003f00:	08003f35 	.word	0x08003f35
 8003f04:	08003f45 	.word	0x08003f45
 8003f08:	08003f45 	.word	0x08003f45
 8003f0c:	08003f45 	.word	0x08003f45
 8003f10:	08003f2d 	.word	0x08003f2d
 8003f14:	08003f45 	.word	0x08003f45
 8003f18:	08003f45 	.word	0x08003f45
 8003f1c:	08003f45 	.word	0x08003f45
 8003f20:	08003f3d 	.word	0x08003f3d
 8003f24:	2300      	movs	r3, #0
 8003f26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f2a:	e042      	b.n	8003fb2 <UART_SetConfig+0x1be>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f32:	e03e      	b.n	8003fb2 <UART_SetConfig+0x1be>
 8003f34:	2304      	movs	r3, #4
 8003f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f3a:	e03a      	b.n	8003fb2 <UART_SetConfig+0x1be>
 8003f3c:	2308      	movs	r3, #8
 8003f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f42:	e036      	b.n	8003fb2 <UART_SetConfig+0x1be>
 8003f44:	2310      	movs	r3, #16
 8003f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f4a:	bf00      	nop
 8003f4c:	e031      	b.n	8003fb2 <UART_SetConfig+0x1be>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a6a      	ldr	r2, [pc, #424]	; (80040fc <UART_SetConfig+0x308>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d129      	bne.n	8003fac <UART_SetConfig+0x1b8>
 8003f58:	4b6a      	ldr	r3, [pc, #424]	; (8004104 <UART_SetConfig+0x310>)
 8003f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f66:	d014      	beq.n	8003f92 <UART_SetConfig+0x19e>
 8003f68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f6c:	d802      	bhi.n	8003f74 <UART_SetConfig+0x180>
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d007      	beq.n	8003f82 <UART_SetConfig+0x18e>
 8003f72:	e016      	b.n	8003fa2 <UART_SetConfig+0x1ae>
 8003f74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f78:	d007      	beq.n	8003f8a <UART_SetConfig+0x196>
 8003f7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f7e:	d00c      	beq.n	8003f9a <UART_SetConfig+0x1a6>
 8003f80:	e00f      	b.n	8003fa2 <UART_SetConfig+0x1ae>
 8003f82:	2300      	movs	r3, #0
 8003f84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f88:	e013      	b.n	8003fb2 <UART_SetConfig+0x1be>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f90:	e00f      	b.n	8003fb2 <UART_SetConfig+0x1be>
 8003f92:	2304      	movs	r3, #4
 8003f94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f98:	e00b      	b.n	8003fb2 <UART_SetConfig+0x1be>
 8003f9a:	2308      	movs	r3, #8
 8003f9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fa0:	e007      	b.n	8003fb2 <UART_SetConfig+0x1be>
 8003fa2:	2310      	movs	r3, #16
 8003fa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fa8:	bf00      	nop
 8003faa:	e002      	b.n	8003fb2 <UART_SetConfig+0x1be>
 8003fac:	2310      	movs	r3, #16
 8003fae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a51      	ldr	r2, [pc, #324]	; (80040fc <UART_SetConfig+0x308>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	f040 80fa 	bne.w	80041b2 <UART_SetConfig+0x3be>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003fbe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fc2:	2b08      	cmp	r3, #8
 8003fc4:	d823      	bhi.n	800400e <UART_SetConfig+0x21a>
 8003fc6:	a201      	add	r2, pc, #4	; (adr r2, 8003fcc <UART_SetConfig+0x1d8>)
 8003fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fcc:	08003ff1 	.word	0x08003ff1
 8003fd0:	0800400f 	.word	0x0800400f
 8003fd4:	08003ff9 	.word	0x08003ff9
 8003fd8:	0800400f 	.word	0x0800400f
 8003fdc:	08003fff 	.word	0x08003fff
 8003fe0:	0800400f 	.word	0x0800400f
 8003fe4:	0800400f 	.word	0x0800400f
 8003fe8:	0800400f 	.word	0x0800400f
 8003fec:	08004007 	.word	0x08004007
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003ff0:	f7fe fbbc 	bl	800276c <HAL_RCC_GetPCLK1Freq>
 8003ff4:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003ff6:	e00d      	b.n	8004014 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003ff8:	4b44      	ldr	r3, [pc, #272]	; (800410c <UART_SetConfig+0x318>)
 8003ffa:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003ffc:	e00a      	b.n	8004014 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003ffe:	f7fe fb1f 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 8004002:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004004:	e006      	b.n	8004014 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800400a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800400c:	e002      	b.n	8004014 <UART_SetConfig+0x220>
      default:
        ret = HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	76fb      	strb	r3, [r7, #27]
        break;
 8004012:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	2b00      	cmp	r3, #0
 8004018:	f000 81c6 	beq.w	80043a8 <UART_SetConfig+0x5b4>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	4613      	mov	r3, r2
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	4413      	add	r3, r2
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	429a      	cmp	r2, r3
 800402a:	d305      	bcc.n	8004038 <UART_SetConfig+0x244>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	429a      	cmp	r2, r3
 8004036:	d902      	bls.n	800403e <UART_SetConfig+0x24a>
      {
        ret = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	76fb      	strb	r3, [r7, #27]
 800403c:	e1b4      	b.n	80043a8 <UART_SetConfig+0x5b4>
      }
      else
      {
        switch (clocksource)
 800403e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004042:	2b08      	cmp	r3, #8
 8004044:	f200 80a2 	bhi.w	800418c <UART_SetConfig+0x398>
 8004048:	a201      	add	r2, pc, #4	; (adr r2, 8004050 <UART_SetConfig+0x25c>)
 800404a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404e:	bf00      	nop
 8004050:	08004075 	.word	0x08004075
 8004054:	0800418d 	.word	0x0800418d
 8004058:	080040c3 	.word	0x080040c3
 800405c:	0800418d 	.word	0x0800418d
 8004060:	08004115 	.word	0x08004115
 8004064:	0800418d 	.word	0x0800418d
 8004068:	0800418d 	.word	0x0800418d
 800406c:	0800418d 	.word	0x0800418d
 8004070:	08004163 	.word	0x08004163
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004074:	f7fe fb7a 	bl	800276c <HAL_RCC_GetPCLK1Freq>
 8004078:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	4619      	mov	r1, r3
 800407e:	f04f 0200 	mov.w	r2, #0
 8004082:	f04f 0300 	mov.w	r3, #0
 8004086:	f04f 0400 	mov.w	r4, #0
 800408a:	0214      	lsls	r4, r2, #8
 800408c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004090:	020b      	lsls	r3, r1, #8
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6852      	ldr	r2, [r2, #4]
 8004096:	0852      	lsrs	r2, r2, #1
 8004098:	4611      	mov	r1, r2
 800409a:	f04f 0200 	mov.w	r2, #0
 800409e:	eb13 0b01 	adds.w	fp, r3, r1
 80040a2:	eb44 0c02 	adc.w	ip, r4, r2
 80040a6:	4658      	mov	r0, fp
 80040a8:	4661      	mov	r1, ip
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f04f 0400 	mov.w	r4, #0
 80040b2:	461a      	mov	r2, r3
 80040b4:	4623      	mov	r3, r4
 80040b6:	f7fc f889 	bl	80001cc <__aeabi_uldivmod>
 80040ba:	4603      	mov	r3, r0
 80040bc:	460c      	mov	r4, r1
 80040be:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80040c0:	e067      	b.n	8004192 <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	085b      	lsrs	r3, r3, #1
 80040c8:	f04f 0400 	mov.w	r4, #0
 80040cc:	4910      	ldr	r1, [pc, #64]	; (8004110 <UART_SetConfig+0x31c>)
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	eb13 0b01 	adds.w	fp, r3, r1
 80040d6:	eb44 0c02 	adc.w	ip, r4, r2
 80040da:	4658      	mov	r0, fp
 80040dc:	4661      	mov	r1, ip
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f04f 0400 	mov.w	r4, #0
 80040e6:	461a      	mov	r2, r3
 80040e8:	4623      	mov	r3, r4
 80040ea:	f7fc f86f 	bl	80001cc <__aeabi_uldivmod>
 80040ee:	4603      	mov	r3, r0
 80040f0:	460c      	mov	r4, r1
 80040f2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80040f4:	e04d      	b.n	8004192 <UART_SetConfig+0x39e>
 80040f6:	bf00      	nop
 80040f8:	efff69f3 	.word	0xefff69f3
 80040fc:	40008000 	.word	0x40008000
 8004100:	40013800 	.word	0x40013800
 8004104:	40021000 	.word	0x40021000
 8004108:	40004400 	.word	0x40004400
 800410c:	00f42400 	.word	0x00f42400
 8004110:	f4240000 	.word	0xf4240000
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8004114:	f7fe fa94 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 8004118:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	4619      	mov	r1, r3
 800411e:	f04f 0200 	mov.w	r2, #0
 8004122:	f04f 0300 	mov.w	r3, #0
 8004126:	f04f 0400 	mov.w	r4, #0
 800412a:	0214      	lsls	r4, r2, #8
 800412c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004130:	020b      	lsls	r3, r1, #8
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6852      	ldr	r2, [r2, #4]
 8004136:	0852      	lsrs	r2, r2, #1
 8004138:	4611      	mov	r1, r2
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	eb13 0b01 	adds.w	fp, r3, r1
 8004142:	eb44 0c02 	adc.w	ip, r4, r2
 8004146:	4658      	mov	r0, fp
 8004148:	4661      	mov	r1, ip
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f04f 0400 	mov.w	r4, #0
 8004152:	461a      	mov	r2, r3
 8004154:	4623      	mov	r3, r4
 8004156:	f7fc f839 	bl	80001cc <__aeabi_uldivmod>
 800415a:	4603      	mov	r3, r0
 800415c:	460c      	mov	r4, r1
 800415e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004160:	e017      	b.n	8004192 <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	085b      	lsrs	r3, r3, #1
 8004168:	f04f 0400 	mov.w	r4, #0
 800416c:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004170:	f144 0100 	adc.w	r1, r4, #0
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f04f 0400 	mov.w	r4, #0
 800417c:	461a      	mov	r2, r3
 800417e:	4623      	mov	r3, r4
 8004180:	f7fc f824 	bl	80001cc <__aeabi_uldivmod>
 8004184:	4603      	mov	r3, r0
 8004186:	460c      	mov	r4, r1
 8004188:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800418a:	e002      	b.n	8004192 <UART_SetConfig+0x39e>
          default:
            ret = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	76fb      	strb	r3, [r7, #27]
            break;
 8004190:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004198:	d308      	bcc.n	80041ac <UART_SetConfig+0x3b8>
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041a0:	d204      	bcs.n	80041ac <UART_SetConfig+0x3b8>
        {
          huart->Instance->BRR = usartdiv;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69fa      	ldr	r2, [r7, #28]
 80041a8:	60da      	str	r2, [r3, #12]
 80041aa:	e0fd      	b.n	80043a8 <UART_SetConfig+0x5b4>
        }
        else
        {
          ret = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	76fb      	strb	r3, [r7, #27]
 80041b0:	e0fa      	b.n	80043a8 <UART_SetConfig+0x5b4>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ba:	f040 8083 	bne.w	80042c4 <UART_SetConfig+0x4d0>
  {
    switch (clocksource)
 80041be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041c2:	2b08      	cmp	r3, #8
 80041c4:	d85e      	bhi.n	8004284 <UART_SetConfig+0x490>
 80041c6:	a201      	add	r2, pc, #4	; (adr r2, 80041cc <UART_SetConfig+0x3d8>)
 80041c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041cc:	080041f1 	.word	0x080041f1
 80041d0:	08004211 	.word	0x08004211
 80041d4:	08004231 	.word	0x08004231
 80041d8:	08004285 	.word	0x08004285
 80041dc:	0800424d 	.word	0x0800424d
 80041e0:	08004285 	.word	0x08004285
 80041e4:	08004285 	.word	0x08004285
 80041e8:	08004285 	.word	0x08004285
 80041ec:	0800426d 	.word	0x0800426d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041f0:	f7fe fabc 	bl	800276c <HAL_RCC_GetPCLK1Freq>
 80041f4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	005a      	lsls	r2, r3, #1
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	085b      	lsrs	r3, r3, #1
 8004200:	441a      	add	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	fbb2 f3f3 	udiv	r3, r2, r3
 800420a:	b29b      	uxth	r3, r3
 800420c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800420e:	e03c      	b.n	800428a <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004210:	f7fe fac2 	bl	8002798 <HAL_RCC_GetPCLK2Freq>
 8004214:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	005a      	lsls	r2, r3, #1
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	085b      	lsrs	r3, r3, #1
 8004220:	441a      	add	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	fbb2 f3f3 	udiv	r3, r2, r3
 800422a:	b29b      	uxth	r3, r3
 800422c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800422e:	e02c      	b.n	800428a <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	085b      	lsrs	r3, r3, #1
 8004236:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800423a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	6852      	ldr	r2, [r2, #4]
 8004242:	fbb3 f3f2 	udiv	r3, r3, r2
 8004246:	b29b      	uxth	r3, r3
 8004248:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800424a:	e01e      	b.n	800428a <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800424c:	f7fe f9f8 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 8004250:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	005a      	lsls	r2, r3, #1
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	085b      	lsrs	r3, r3, #1
 800425c:	441a      	add	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	fbb2 f3f3 	udiv	r3, r2, r3
 8004266:	b29b      	uxth	r3, r3
 8004268:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800426a:	e00e      	b.n	800428a <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	085b      	lsrs	r3, r3, #1
 8004272:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	fbb2 f3f3 	udiv	r3, r2, r3
 800427e:	b29b      	uxth	r3, r3
 8004280:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004282:	e002      	b.n	800428a <UART_SetConfig+0x496>
      default:
        ret = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	76fb      	strb	r3, [r7, #27]
        break;
 8004288:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	2b0f      	cmp	r3, #15
 800428e:	d916      	bls.n	80042be <UART_SetConfig+0x4ca>
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004296:	d212      	bcs.n	80042be <UART_SetConfig+0x4ca>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	b29b      	uxth	r3, r3
 800429c:	f023 030f 	bic.w	r3, r3, #15
 80042a0:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	085b      	lsrs	r3, r3, #1
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	89fb      	ldrh	r3, [r7, #14]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	89fa      	ldrh	r2, [r7, #14]
 80042ba:	60da      	str	r2, [r3, #12]
 80042bc:	e074      	b.n	80043a8 <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	76fb      	strb	r3, [r7, #27]
 80042c2:	e071      	b.n	80043a8 <UART_SetConfig+0x5b4>
    }
  }
  else
  {
    switch (clocksource)
 80042c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	d85c      	bhi.n	8004386 <UART_SetConfig+0x592>
 80042cc:	a201      	add	r2, pc, #4	; (adr r2, 80042d4 <UART_SetConfig+0x4e0>)
 80042ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d2:	bf00      	nop
 80042d4:	080042f9 	.word	0x080042f9
 80042d8:	08004317 	.word	0x08004317
 80042dc:	08004335 	.word	0x08004335
 80042e0:	08004387 	.word	0x08004387
 80042e4:	08004351 	.word	0x08004351
 80042e8:	08004387 	.word	0x08004387
 80042ec:	08004387 	.word	0x08004387
 80042f0:	08004387 	.word	0x08004387
 80042f4:	0800436f 	.word	0x0800436f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042f8:	f7fe fa38 	bl	800276c <HAL_RCC_GetPCLK1Freq>
 80042fc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	085a      	lsrs	r2, r3, #1
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	441a      	add	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004310:	b29b      	uxth	r3, r3
 8004312:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004314:	e03a      	b.n	800438c <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004316:	f7fe fa3f 	bl	8002798 <HAL_RCC_GetPCLK2Freq>
 800431a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	085a      	lsrs	r2, r3, #1
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	441a      	add	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	fbb2 f3f3 	udiv	r3, r2, r3
 800432e:	b29b      	uxth	r3, r3
 8004330:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004332:	e02b      	b.n	800438c <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	085b      	lsrs	r3, r3, #1
 800433a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800433e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6852      	ldr	r2, [r2, #4]
 8004346:	fbb3 f3f2 	udiv	r3, r3, r2
 800434a:	b29b      	uxth	r3, r3
 800434c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800434e:	e01d      	b.n	800438c <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004350:	f7fe f976 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 8004354:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	085a      	lsrs	r2, r3, #1
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	441a      	add	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	fbb2 f3f3 	udiv	r3, r2, r3
 8004368:	b29b      	uxth	r3, r3
 800436a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800436c:	e00e      	b.n	800438c <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	085b      	lsrs	r3, r3, #1
 8004374:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004380:	b29b      	uxth	r3, r3
 8004382:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004384:	e002      	b.n	800438c <UART_SetConfig+0x598>
      default:
        ret = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	76fb      	strb	r3, [r7, #27]
        break;
 800438a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	2b0f      	cmp	r3, #15
 8004390:	d908      	bls.n	80043a4 <UART_SetConfig+0x5b0>
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004398:	d204      	bcs.n	80043a4 <UART_SetConfig+0x5b0>
    {
      huart->Instance->BRR = usartdiv;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69fa      	ldr	r2, [r7, #28]
 80043a0:	60da      	str	r2, [r3, #12]
 80043a2:	e001      	b.n	80043a8 <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80043b4:	7efb      	ldrb	r3, [r7, #27]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3728      	adds	r7, #40	; 0x28
 80043ba:	46bd      	mov	sp, r7
 80043bc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080043c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00a      	beq.n	80043ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00a      	beq.n	800440c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	f003 0304 	and.w	r3, r3, #4
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00a      	beq.n	800442e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00a      	beq.n	8004450 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004454:	f003 0310 	and.w	r3, r3, #16
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00a      	beq.n	8004472 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	f003 0320 	and.w	r3, r3, #32
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449c:	2b00      	cmp	r3, #0
 800449e:	d01a      	beq.n	80044d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044be:	d10a      	bne.n	80044d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00a      	beq.n	80044f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	430a      	orrs	r2, r1
 80044f6:	605a      	str	r2, [r3, #4]
  }
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af02      	add	r7, sp, #8
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004512:	f7fd f845 	bl	80015a0 <HAL_GetTick>
 8004516:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0308 	and.w	r3, r3, #8
 8004522:	2b08      	cmp	r3, #8
 8004524:	d10e      	bne.n	8004544 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004526:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f82a 	bl	800458e <UART_WaitOnFlagUntilTimeout>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e020      	b.n	8004586 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0304 	and.w	r3, r3, #4
 800454e:	2b04      	cmp	r3, #4
 8004550:	d10e      	bne.n	8004570 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004552:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004556:	9300      	str	r3, [sp, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f814 	bl	800458e <UART_WaitOnFlagUntilTimeout>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e00a      	b.n	8004586 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2220      	movs	r2, #32
 8004574:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2220      	movs	r2, #32
 800457a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b084      	sub	sp, #16
 8004592:	af00      	add	r7, sp, #0
 8004594:	60f8      	str	r0, [r7, #12]
 8004596:	60b9      	str	r1, [r7, #8]
 8004598:	603b      	str	r3, [r7, #0]
 800459a:	4613      	mov	r3, r2
 800459c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800459e:	e05d      	b.n	800465c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a6:	d059      	beq.n	800465c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045a8:	f7fc fffa 	bl	80015a0 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d302      	bcc.n	80045be <UART_WaitOnFlagUntilTimeout+0x30>
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d11b      	bne.n	80045f6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80045cc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0201 	bic.w	r2, r2, #1
 80045dc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2220      	movs	r2, #32
 80045e2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2220      	movs	r2, #32
 80045e8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e042      	b.n	800467c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b00      	cmp	r3, #0
 8004602:	d02b      	beq.n	800465c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800460e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004612:	d123      	bne.n	800465c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800461c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800462c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 0201 	bic.w	r2, r2, #1
 800463c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2220      	movs	r2, #32
 8004642:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2220      	movs	r2, #32
 8004648:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2220      	movs	r2, #32
 800464e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e00f      	b.n	800467c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	69da      	ldr	r2, [r3, #28]
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	4013      	ands	r3, r2
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	429a      	cmp	r2, r3
 800466a:	bf0c      	ite	eq
 800466c:	2301      	moveq	r3, #1
 800466e:	2300      	movne	r3, #0
 8004670:	b2db      	uxtb	r3, r3
 8004672:	461a      	mov	r2, r3
 8004674:	79fb      	ldrb	r3, [r7, #7]
 8004676:	429a      	cmp	r2, r3
 8004678:	d092      	beq.n	80045a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <DISP_Reset>:
#include "disp_conf.h"

static void DISP_Reset(void) {
 8004684:	b580      	push	{r7, lr}
 8004686:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(DISP_RST_PIN, GPIO_PIN_SET);
 8004688:	2201      	movs	r2, #1
 800468a:	2101      	movs	r1, #1
 800468c:	480b      	ldr	r0, [pc, #44]	; (80046bc <DISP_Reset+0x38>)
 800468e:	f7fd fa31 	bl	8001af4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8004692:	2064      	movs	r0, #100	; 0x64
 8004694:	f7fc ff90 	bl	80015b8 <HAL_Delay>
    HAL_GPIO_WritePin(DISP_RST_PIN, GPIO_PIN_RESET);
 8004698:	2200      	movs	r2, #0
 800469a:	2101      	movs	r1, #1
 800469c:	4807      	ldr	r0, [pc, #28]	; (80046bc <DISP_Reset+0x38>)
 800469e:	f7fd fa29 	bl	8001af4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80046a2:	2064      	movs	r0, #100	; 0x64
 80046a4:	f7fc ff88 	bl	80015b8 <HAL_Delay>
    HAL_GPIO_WritePin(DISP_RST_PIN, GPIO_PIN_SET);
 80046a8:	2201      	movs	r2, #1
 80046aa:	2101      	movs	r1, #1
 80046ac:	4803      	ldr	r0, [pc, #12]	; (80046bc <DISP_Reset+0x38>)
 80046ae:	f7fd fa21 	bl	8001af4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80046b2:	2064      	movs	r0, #100	; 0x64
 80046b4:	f7fc ff80 	bl	80015b8 <HAL_Delay>
}
 80046b8:	bf00      	nop
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	48000400 	.word	0x48000400

080046c0 <DISP_SPI_send>:

static void DISP_SPI_send(uint8_t data) {
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	4603      	mov	r3, r0
 80046c8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 80046ca:	1df9      	adds	r1, r7, #7
 80046cc:	2364      	movs	r3, #100	; 0x64
 80046ce:	2201      	movs	r2, #1
 80046d0:	4803      	ldr	r0, [pc, #12]	; (80046e0 <DISP_SPI_send+0x20>)
 80046d2:	f7fe fc53 	bl	8002f7c <HAL_SPI_Transmit>
}
 80046d6:	bf00      	nop
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	200000cc 	.word	0x200000cc

080046e4 <DISP_SendCommand>:

void DISP_SendCommand(uint8_t reg) {
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	4603      	mov	r3, r0
 80046ec:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(DISP_CS_PIN, GPIO_PIN_RESET);
 80046ee:	2200      	movs	r2, #0
 80046f0:	2110      	movs	r1, #16
 80046f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046f6:	f7fd f9fd 	bl	8001af4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_PIN, GPIO_PIN_RESET);
 80046fa:	2200      	movs	r2, #0
 80046fc:	2180      	movs	r1, #128	; 0x80
 80046fe:	4805      	ldr	r0, [pc, #20]	; (8004714 <DISP_SendCommand+0x30>)
 8004700:	f7fd f9f8 	bl	8001af4 <HAL_GPIO_WritePin>
	DISP_SPI_send(reg);
 8004704:	79fb      	ldrb	r3, [r7, #7]
 8004706:	4618      	mov	r0, r3
 8004708:	f7ff ffda 	bl	80046c0 <DISP_SPI_send>
}
 800470c:	bf00      	nop
 800470e:	3708      	adds	r7, #8
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	48000400 	.word	0x48000400

08004718 <DISP_SendData_8Bit>:

void DISP_SendData_8Bit(uint8_t data) {
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	4603      	mov	r3, r0
 8004720:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISP_CS_PIN, GPIO_PIN_RESET);
 8004722:	2200      	movs	r2, #0
 8004724:	2110      	movs	r1, #16
 8004726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800472a:	f7fd f9e3 	bl	8001af4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_PIN, GPIO_PIN_SET);
 800472e:	2201      	movs	r2, #1
 8004730:	2180      	movs	r1, #128	; 0x80
 8004732:	4808      	ldr	r0, [pc, #32]	; (8004754 <DISP_SendData_8Bit+0x3c>)
 8004734:	f7fd f9de 	bl	8001af4 <HAL_GPIO_WritePin>
	DISP_SPI_send(data);
 8004738:	79fb      	ldrb	r3, [r7, #7]
 800473a:	4618      	mov	r0, r3
 800473c:	f7ff ffc0 	bl	80046c0 <DISP_SPI_send>
    HAL_GPIO_WritePin(DISP_CS_PIN, GPIO_PIN_SET);
 8004740:	2201      	movs	r2, #1
 8004742:	2110      	movs	r1, #16
 8004744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004748:	f7fd f9d4 	bl	8001af4 <HAL_GPIO_WritePin>
}
 800474c:	bf00      	nop
 800474e:	3708      	adds	r7, #8
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	48000400 	.word	0x48000400

08004758 <DISP_SendData_16Bit>:

void DISP_SendData_16Bit(uint16_t data) {
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	4603      	mov	r3, r0
 8004760:	80fb      	strh	r3, [r7, #6]

	uint8_t data_h = (uint8_t)(data >> 8);
 8004762:	88fb      	ldrh	r3, [r7, #6]
 8004764:	0a1b      	lsrs	r3, r3, #8
 8004766:	b29b      	uxth	r3, r3
 8004768:	73fb      	strb	r3, [r7, #15]
	uint8_t data_l = (uint8_t) data;
 800476a:	88fb      	ldrh	r3, [r7, #6]
 800476c:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(DISP_CS_PIN, GPIO_PIN_RESET);
 800476e:	2200      	movs	r2, #0
 8004770:	2110      	movs	r1, #16
 8004772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004776:	f7fd f9bd 	bl	8001af4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_PIN, GPIO_PIN_SET);
 800477a:	2201      	movs	r2, #1
 800477c:	2180      	movs	r1, #128	; 0x80
 800477e:	480a      	ldr	r0, [pc, #40]	; (80047a8 <DISP_SendData_16Bit+0x50>)
 8004780:	f7fd f9b8 	bl	8001af4 <HAL_GPIO_WritePin>
	DISP_SPI_send(data_h);
 8004784:	7bfb      	ldrb	r3, [r7, #15]
 8004786:	4618      	mov	r0, r3
 8004788:	f7ff ff9a 	bl	80046c0 <DISP_SPI_send>
	DISP_SPI_send(data_l);
 800478c:	7bbb      	ldrb	r3, [r7, #14]
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff ff96 	bl	80046c0 <DISP_SPI_send>
    HAL_GPIO_WritePin(DISP_CS_PIN, GPIO_PIN_SET);
 8004794:	2201      	movs	r2, #1
 8004796:	2110      	movs	r1, #16
 8004798:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800479c:	f7fd f9aa 	bl	8001af4 <HAL_GPIO_WritePin>
}
 80047a0:	bf00      	nop
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	48000400 	.word	0x48000400

080047ac <DISP_SetAttributes>:

static void DISP_SetAttributes(uint8_t Scan_dir) {
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	4603      	mov	r3, r0
 80047b4:	71fb      	strb	r3, [r7, #7]

    //Get the screen scan direction
    uint8_t MemoryAccessReg = 0x08;
 80047b6:	2308      	movs	r3, #8
 80047b8:	73fb      	strb	r3, [r7, #15]

    //Get GRAM and LCD width and height
    if(Scan_dir == HORIZONTAL) {
 80047ba:	79fb      	ldrb	r3, [r7, #7]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d102      	bne.n	80047c6 <DISP_SetAttributes+0x1a>
        MemoryAccessReg = 0XC8;
 80047c0:	23c8      	movs	r3, #200	; 0xc8
 80047c2:	73fb      	strb	r3, [r7, #15]
 80047c4:	e001      	b.n	80047ca <DISP_SetAttributes+0x1e>
    } else {
        MemoryAccessReg = 0X68;
 80047c6:	2368      	movs	r3, #104	; 0x68
 80047c8:	73fb      	strb	r3, [r7, #15]
    }

    // Set the read / write scan direction of the frame memory
    DISP_SendCommand(0x36); //MX, MY, RGB mode
 80047ca:	2036      	movs	r0, #54	; 0x36
 80047cc:	f7ff ff8a 	bl	80046e4 <DISP_SendCommand>
    DISP_SendData_8Bit(MemoryAccessReg);	//0x08 set RGB
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7ff ffa0 	bl	8004718 <DISP_SendData_8Bit>
}
 80047d8:	bf00      	nop
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <DISP_InitReg>:

static void DISP_InitReg(void) {
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0

	DISP_SendCommand(0xEF);
 80047e4:	20ef      	movs	r0, #239	; 0xef
 80047e6:	f7ff ff7d 	bl	80046e4 <DISP_SendCommand>
	DISP_SendCommand(0xEB);
 80047ea:	20eb      	movs	r0, #235	; 0xeb
 80047ec:	f7ff ff7a 	bl	80046e4 <DISP_SendCommand>
	DISP_SendData_8Bit(0x14);
 80047f0:	2014      	movs	r0, #20
 80047f2:	f7ff ff91 	bl	8004718 <DISP_SendData_8Bit>

	DISP_SendCommand(0xFE);
 80047f6:	20fe      	movs	r0, #254	; 0xfe
 80047f8:	f7ff ff74 	bl	80046e4 <DISP_SendCommand>
	DISP_SendCommand(0xEF);
 80047fc:	20ef      	movs	r0, #239	; 0xef
 80047fe:	f7ff ff71 	bl	80046e4 <DISP_SendCommand>

	DISP_SendCommand(0xEB);
 8004802:	20eb      	movs	r0, #235	; 0xeb
 8004804:	f7ff ff6e 	bl	80046e4 <DISP_SendCommand>
	DISP_SendData_8Bit(0x14);
 8004808:	2014      	movs	r0, #20
 800480a:	f7ff ff85 	bl	8004718 <DISP_SendData_8Bit>

	DISP_SendCommand(0x84);
 800480e:	2084      	movs	r0, #132	; 0x84
 8004810:	f7ff ff68 	bl	80046e4 <DISP_SendCommand>
	DISP_SendData_8Bit(0x40);
 8004814:	2040      	movs	r0, #64	; 0x40
 8004816:	f7ff ff7f 	bl	8004718 <DISP_SendData_8Bit>

	DISP_SendCommand(0x85);
 800481a:	2085      	movs	r0, #133	; 0x85
 800481c:	f7ff ff62 	bl	80046e4 <DISP_SendCommand>
	DISP_SendData_8Bit(0xFF);
 8004820:	20ff      	movs	r0, #255	; 0xff
 8004822:	f7ff ff79 	bl	8004718 <DISP_SendData_8Bit>

	DISP_SendCommand(0x86);
 8004826:	2086      	movs	r0, #134	; 0x86
 8004828:	f7ff ff5c 	bl	80046e4 <DISP_SendCommand>
	DISP_SendData_8Bit(0xFF);
 800482c:	20ff      	movs	r0, #255	; 0xff
 800482e:	f7ff ff73 	bl	8004718 <DISP_SendData_8Bit>

	DISP_SendCommand(0x87);
 8004832:	2087      	movs	r0, #135	; 0x87
 8004834:	f7ff ff56 	bl	80046e4 <DISP_SendCommand>
	DISP_SendData_8Bit(0xFF);
 8004838:	20ff      	movs	r0, #255	; 0xff
 800483a:	f7ff ff6d 	bl	8004718 <DISP_SendData_8Bit>

	DISP_SendCommand(0x88);
 800483e:	2088      	movs	r0, #136	; 0x88
 8004840:	f7ff ff50 	bl	80046e4 <DISP_SendCommand>
	DISP_SendData_8Bit(0x0A);
 8004844:	200a      	movs	r0, #10
 8004846:	f7ff ff67 	bl	8004718 <DISP_SendData_8Bit>

	DISP_SendCommand(0x89);
 800484a:	2089      	movs	r0, #137	; 0x89
 800484c:	f7ff ff4a 	bl	80046e4 <DISP_SendCommand>
	DISP_SendData_8Bit(0x21);
 8004850:	2021      	movs	r0, #33	; 0x21
 8004852:	f7ff ff61 	bl	8004718 <DISP_SendData_8Bit>

	DISP_SendCommand(0x8A);
 8004856:	208a      	movs	r0, #138	; 0x8a
 8004858:	f7ff ff44 	bl	80046e4 <DISP_SendCommand>
	DISP_SendData_8Bit(0x00);
 800485c:	2000      	movs	r0, #0
 800485e:	f7ff ff5b 	bl	8004718 <DISP_SendData_8Bit>

	DISP_SendCommand(0x8B);
 8004862:	208b      	movs	r0, #139	; 0x8b
 8004864:	f7ff ff3e 	bl	80046e4 <DISP_SendCommand>
	DISP_SendData_8Bit(0x80);
 8004868:	2080      	movs	r0, #128	; 0x80
 800486a:	f7ff ff55 	bl	8004718 <DISP_SendData_8Bit>

	DISP_SendCommand(0x8C);
 800486e:	208c      	movs	r0, #140	; 0x8c
 8004870:	f7ff ff38 	bl	80046e4 <DISP_SendCommand>
	DISP_SendData_8Bit(0x01);
 8004874:	2001      	movs	r0, #1
 8004876:	f7ff ff4f 	bl	8004718 <DISP_SendData_8Bit>

	DISP_SendCommand(0x8D);
 800487a:	208d      	movs	r0, #141	; 0x8d
 800487c:	f7ff ff32 	bl	80046e4 <DISP_SendCommand>
	DISP_SendData_8Bit(0x01);
 8004880:	2001      	movs	r0, #1
 8004882:	f7ff ff49 	bl	8004718 <DISP_SendData_8Bit>

	DISP_SendCommand(0x8E);
 8004886:	208e      	movs	r0, #142	; 0x8e
 8004888:	f7ff ff2c 	bl	80046e4 <DISP_SendCommand>
	DISP_SendData_8Bit(0xFF);
 800488c:	20ff      	movs	r0, #255	; 0xff
 800488e:	f7ff ff43 	bl	8004718 <DISP_SendData_8Bit>

	DISP_SendCommand(0x8F);
 8004892:	208f      	movs	r0, #143	; 0x8f
 8004894:	f7ff ff26 	bl	80046e4 <DISP_SendCommand>
	DISP_SendData_8Bit(0xFF);
 8004898:	20ff      	movs	r0, #255	; 0xff
 800489a:	f7ff ff3d 	bl	8004718 <DISP_SendData_8Bit>


	DISP_SendCommand(0xB6);
 800489e:	20b6      	movs	r0, #182	; 0xb6
 80048a0:	f7ff ff20 	bl	80046e4 <DISP_SendCommand>
	DISP_SendData_8Bit(0x00);
 80048a4:	2000      	movs	r0, #0
 80048a6:	f7ff ff37 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x20);
 80048aa:	2020      	movs	r0, #32
 80048ac:	f7ff ff34 	bl	8004718 <DISP_SendData_8Bit>

	DISP_SendCommand(0x36);
 80048b0:	2036      	movs	r0, #54	; 0x36
 80048b2:	f7ff ff17 	bl	80046e4 <DISP_SendCommand>
	DISP_SendData_8Bit(0x08);//Set as vertical screen
 80048b6:	2008      	movs	r0, #8
 80048b8:	f7ff ff2e 	bl	8004718 <DISP_SendData_8Bit>

	DISP_SendCommand(0x3A);
 80048bc:	203a      	movs	r0, #58	; 0x3a
 80048be:	f7ff ff11 	bl	80046e4 <DISP_SendCommand>
	DISP_SendData_8Bit(0x05);
 80048c2:	2005      	movs	r0, #5
 80048c4:	f7ff ff28 	bl	8004718 <DISP_SendData_8Bit>


	DISP_SendCommand(0x90);
 80048c8:	2090      	movs	r0, #144	; 0x90
 80048ca:	f7ff ff0b 	bl	80046e4 <DISP_SendCommand>
	DISP_SendData_8Bit(0x08);
 80048ce:	2008      	movs	r0, #8
 80048d0:	f7ff ff22 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x08);
 80048d4:	2008      	movs	r0, #8
 80048d6:	f7ff ff1f 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x08);
 80048da:	2008      	movs	r0, #8
 80048dc:	f7ff ff1c 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x08);
 80048e0:	2008      	movs	r0, #8
 80048e2:	f7ff ff19 	bl	8004718 <DISP_SendData_8Bit>

	DISP_SendCommand(0xBD);
 80048e6:	20bd      	movs	r0, #189	; 0xbd
 80048e8:	f7ff fefc 	bl	80046e4 <DISP_SendCommand>
	DISP_SendData_8Bit(0x06);
 80048ec:	2006      	movs	r0, #6
 80048ee:	f7ff ff13 	bl	8004718 <DISP_SendData_8Bit>

	DISP_SendCommand(0xBC);
 80048f2:	20bc      	movs	r0, #188	; 0xbc
 80048f4:	f7ff fef6 	bl	80046e4 <DISP_SendCommand>
	DISP_SendData_8Bit(0x00);
 80048f8:	2000      	movs	r0, #0
 80048fa:	f7ff ff0d 	bl	8004718 <DISP_SendData_8Bit>

	DISP_SendCommand(0xFF);
 80048fe:	20ff      	movs	r0, #255	; 0xff
 8004900:	f7ff fef0 	bl	80046e4 <DISP_SendCommand>
	DISP_SendData_8Bit(0x60);
 8004904:	2060      	movs	r0, #96	; 0x60
 8004906:	f7ff ff07 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x01);
 800490a:	2001      	movs	r0, #1
 800490c:	f7ff ff04 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x04);
 8004910:	2004      	movs	r0, #4
 8004912:	f7ff ff01 	bl	8004718 <DISP_SendData_8Bit>

	DISP_SendCommand(0xC3);
 8004916:	20c3      	movs	r0, #195	; 0xc3
 8004918:	f7ff fee4 	bl	80046e4 <DISP_SendCommand>
	DISP_SendData_8Bit(0x13);
 800491c:	2013      	movs	r0, #19
 800491e:	f7ff fefb 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendCommand(0xC4);
 8004922:	20c4      	movs	r0, #196	; 0xc4
 8004924:	f7ff fede 	bl	80046e4 <DISP_SendCommand>
	DISP_SendData_8Bit(0x13);
 8004928:	2013      	movs	r0, #19
 800492a:	f7ff fef5 	bl	8004718 <DISP_SendData_8Bit>

	DISP_SendCommand(0xC9);
 800492e:	20c9      	movs	r0, #201	; 0xc9
 8004930:	f7ff fed8 	bl	80046e4 <DISP_SendCommand>
	DISP_SendData_8Bit(0x22);
 8004934:	2022      	movs	r0, #34	; 0x22
 8004936:	f7ff feef 	bl	8004718 <DISP_SendData_8Bit>

	DISP_SendCommand(0xBE);
 800493a:	20be      	movs	r0, #190	; 0xbe
 800493c:	f7ff fed2 	bl	80046e4 <DISP_SendCommand>
	DISP_SendData_8Bit(0x11);
 8004940:	2011      	movs	r0, #17
 8004942:	f7ff fee9 	bl	8004718 <DISP_SendData_8Bit>

	DISP_SendCommand(0xE1);
 8004946:	20e1      	movs	r0, #225	; 0xe1
 8004948:	f7ff fecc 	bl	80046e4 <DISP_SendCommand>
	DISP_SendData_8Bit(0x10);
 800494c:	2010      	movs	r0, #16
 800494e:	f7ff fee3 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x0E);
 8004952:	200e      	movs	r0, #14
 8004954:	f7ff fee0 	bl	8004718 <DISP_SendData_8Bit>

	DISP_SendCommand(0xDF);
 8004958:	20df      	movs	r0, #223	; 0xdf
 800495a:	f7ff fec3 	bl	80046e4 <DISP_SendCommand>
	DISP_SendData_8Bit(0x21);
 800495e:	2021      	movs	r0, #33	; 0x21
 8004960:	f7ff feda 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x0c);
 8004964:	200c      	movs	r0, #12
 8004966:	f7ff fed7 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x02);
 800496a:	2002      	movs	r0, #2
 800496c:	f7ff fed4 	bl	8004718 <DISP_SendData_8Bit>

	DISP_SendCommand(0xF0);
 8004970:	20f0      	movs	r0, #240	; 0xf0
 8004972:	f7ff feb7 	bl	80046e4 <DISP_SendCommand>
	DISP_SendData_8Bit(0x45);
 8004976:	2045      	movs	r0, #69	; 0x45
 8004978:	f7ff fece 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x09);
 800497c:	2009      	movs	r0, #9
 800497e:	f7ff fecb 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x08);
 8004982:	2008      	movs	r0, #8
 8004984:	f7ff fec8 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x08);
 8004988:	2008      	movs	r0, #8
 800498a:	f7ff fec5 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x26);
 800498e:	2026      	movs	r0, #38	; 0x26
 8004990:	f7ff fec2 	bl	8004718 <DISP_SendData_8Bit>
 	DISP_SendData_8Bit(0x2A);
 8004994:	202a      	movs	r0, #42	; 0x2a
 8004996:	f7ff febf 	bl	8004718 <DISP_SendData_8Bit>

 	DISP_SendCommand(0xF1);
 800499a:	20f1      	movs	r0, #241	; 0xf1
 800499c:	f7ff fea2 	bl	80046e4 <DISP_SendCommand>
 	DISP_SendData_8Bit(0x43);
 80049a0:	2043      	movs	r0, #67	; 0x43
 80049a2:	f7ff feb9 	bl	8004718 <DISP_SendData_8Bit>
 	DISP_SendData_8Bit(0x70);
 80049a6:	2070      	movs	r0, #112	; 0x70
 80049a8:	f7ff feb6 	bl	8004718 <DISP_SendData_8Bit>
 	DISP_SendData_8Bit(0x72);
 80049ac:	2072      	movs	r0, #114	; 0x72
 80049ae:	f7ff feb3 	bl	8004718 <DISP_SendData_8Bit>
 	DISP_SendData_8Bit(0x36);
 80049b2:	2036      	movs	r0, #54	; 0x36
 80049b4:	f7ff feb0 	bl	8004718 <DISP_SendData_8Bit>
 	DISP_SendData_8Bit(0x37);
 80049b8:	2037      	movs	r0, #55	; 0x37
 80049ba:	f7ff fead 	bl	8004718 <DISP_SendData_8Bit>
 	DISP_SendData_8Bit(0x6F);
 80049be:	206f      	movs	r0, #111	; 0x6f
 80049c0:	f7ff feaa 	bl	8004718 <DISP_SendData_8Bit>


 	DISP_SendCommand(0xF2);
 80049c4:	20f2      	movs	r0, #242	; 0xf2
 80049c6:	f7ff fe8d 	bl	80046e4 <DISP_SendCommand>
 	DISP_SendData_8Bit(0x45);
 80049ca:	2045      	movs	r0, #69	; 0x45
 80049cc:	f7ff fea4 	bl	8004718 <DISP_SendData_8Bit>
 	DISP_SendData_8Bit(0x09);
 80049d0:	2009      	movs	r0, #9
 80049d2:	f7ff fea1 	bl	8004718 <DISP_SendData_8Bit>
 	DISP_SendData_8Bit(0x08);
 80049d6:	2008      	movs	r0, #8
 80049d8:	f7ff fe9e 	bl	8004718 <DISP_SendData_8Bit>
 	DISP_SendData_8Bit(0x08);
 80049dc:	2008      	movs	r0, #8
 80049de:	f7ff fe9b 	bl	8004718 <DISP_SendData_8Bit>
 	DISP_SendData_8Bit(0x26);
 80049e2:	2026      	movs	r0, #38	; 0x26
 80049e4:	f7ff fe98 	bl	8004718 <DISP_SendData_8Bit>
 	DISP_SendData_8Bit(0x2A);
 80049e8:	202a      	movs	r0, #42	; 0x2a
 80049ea:	f7ff fe95 	bl	8004718 <DISP_SendData_8Bit>

 	DISP_SendCommand(0xF3);
 80049ee:	20f3      	movs	r0, #243	; 0xf3
 80049f0:	f7ff fe78 	bl	80046e4 <DISP_SendCommand>
 	DISP_SendData_8Bit(0x43);
 80049f4:	2043      	movs	r0, #67	; 0x43
 80049f6:	f7ff fe8f 	bl	8004718 <DISP_SendData_8Bit>
 	DISP_SendData_8Bit(0x70);
 80049fa:	2070      	movs	r0, #112	; 0x70
 80049fc:	f7ff fe8c 	bl	8004718 <DISP_SendData_8Bit>
 	DISP_SendData_8Bit(0x72);
 8004a00:	2072      	movs	r0, #114	; 0x72
 8004a02:	f7ff fe89 	bl	8004718 <DISP_SendData_8Bit>
 	DISP_SendData_8Bit(0x36);
 8004a06:	2036      	movs	r0, #54	; 0x36
 8004a08:	f7ff fe86 	bl	8004718 <DISP_SendData_8Bit>
 	DISP_SendData_8Bit(0x37);
 8004a0c:	2037      	movs	r0, #55	; 0x37
 8004a0e:	f7ff fe83 	bl	8004718 <DISP_SendData_8Bit>
 	DISP_SendData_8Bit(0x6F);
 8004a12:	206f      	movs	r0, #111	; 0x6f
 8004a14:	f7ff fe80 	bl	8004718 <DISP_SendData_8Bit>

	DISP_SendCommand(0xED);
 8004a18:	20ed      	movs	r0, #237	; 0xed
 8004a1a:	f7ff fe63 	bl	80046e4 <DISP_SendCommand>
	DISP_SendData_8Bit(0x1B);
 8004a1e:	201b      	movs	r0, #27
 8004a20:	f7ff fe7a 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x0B);
 8004a24:	200b      	movs	r0, #11
 8004a26:	f7ff fe77 	bl	8004718 <DISP_SendData_8Bit>

	DISP_SendCommand(0xAE);
 8004a2a:	20ae      	movs	r0, #174	; 0xae
 8004a2c:	f7ff fe5a 	bl	80046e4 <DISP_SendCommand>
	DISP_SendData_8Bit(0x77);
 8004a30:	2077      	movs	r0, #119	; 0x77
 8004a32:	f7ff fe71 	bl	8004718 <DISP_SendData_8Bit>

	DISP_SendCommand(0xCD);
 8004a36:	20cd      	movs	r0, #205	; 0xcd
 8004a38:	f7ff fe54 	bl	80046e4 <DISP_SendCommand>
	DISP_SendData_8Bit(0x63);
 8004a3c:	2063      	movs	r0, #99	; 0x63
 8004a3e:	f7ff fe6b 	bl	8004718 <DISP_SendData_8Bit>


	DISP_SendCommand(0x70);
 8004a42:	2070      	movs	r0, #112	; 0x70
 8004a44:	f7ff fe4e 	bl	80046e4 <DISP_SendCommand>
	DISP_SendData_8Bit(0x07);
 8004a48:	2007      	movs	r0, #7
 8004a4a:	f7ff fe65 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x07);
 8004a4e:	2007      	movs	r0, #7
 8004a50:	f7ff fe62 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x04);
 8004a54:	2004      	movs	r0, #4
 8004a56:	f7ff fe5f 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x0E);
 8004a5a:	200e      	movs	r0, #14
 8004a5c:	f7ff fe5c 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x0F);
 8004a60:	200f      	movs	r0, #15
 8004a62:	f7ff fe59 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x09);
 8004a66:	2009      	movs	r0, #9
 8004a68:	f7ff fe56 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x07);
 8004a6c:	2007      	movs	r0, #7
 8004a6e:	f7ff fe53 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x08);
 8004a72:	2008      	movs	r0, #8
 8004a74:	f7ff fe50 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x03);
 8004a78:	2003      	movs	r0, #3
 8004a7a:	f7ff fe4d 	bl	8004718 <DISP_SendData_8Bit>

	DISP_SendCommand(0xE8);
 8004a7e:	20e8      	movs	r0, #232	; 0xe8
 8004a80:	f7ff fe30 	bl	80046e4 <DISP_SendCommand>
	DISP_SendData_8Bit(0x34);
 8004a84:	2034      	movs	r0, #52	; 0x34
 8004a86:	f7ff fe47 	bl	8004718 <DISP_SendData_8Bit>

	DISP_SendCommand(0x62);
 8004a8a:	2062      	movs	r0, #98	; 0x62
 8004a8c:	f7ff fe2a 	bl	80046e4 <DISP_SendCommand>
	DISP_SendData_8Bit(0x18);
 8004a90:	2018      	movs	r0, #24
 8004a92:	f7ff fe41 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x0D);
 8004a96:	200d      	movs	r0, #13
 8004a98:	f7ff fe3e 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x71);
 8004a9c:	2071      	movs	r0, #113	; 0x71
 8004a9e:	f7ff fe3b 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0xED);
 8004aa2:	20ed      	movs	r0, #237	; 0xed
 8004aa4:	f7ff fe38 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x70);
 8004aa8:	2070      	movs	r0, #112	; 0x70
 8004aaa:	f7ff fe35 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x70);
 8004aae:	2070      	movs	r0, #112	; 0x70
 8004ab0:	f7ff fe32 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x18);
 8004ab4:	2018      	movs	r0, #24
 8004ab6:	f7ff fe2f 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x0F);
 8004aba:	200f      	movs	r0, #15
 8004abc:	f7ff fe2c 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x71);
 8004ac0:	2071      	movs	r0, #113	; 0x71
 8004ac2:	f7ff fe29 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0xEF);
 8004ac6:	20ef      	movs	r0, #239	; 0xef
 8004ac8:	f7ff fe26 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x70);
 8004acc:	2070      	movs	r0, #112	; 0x70
 8004ace:	f7ff fe23 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x70);
 8004ad2:	2070      	movs	r0, #112	; 0x70
 8004ad4:	f7ff fe20 	bl	8004718 <DISP_SendData_8Bit>

	DISP_SendCommand(0x63);
 8004ad8:	2063      	movs	r0, #99	; 0x63
 8004ada:	f7ff fe03 	bl	80046e4 <DISP_SendCommand>
	DISP_SendData_8Bit(0x18);
 8004ade:	2018      	movs	r0, #24
 8004ae0:	f7ff fe1a 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x11);
 8004ae4:	2011      	movs	r0, #17
 8004ae6:	f7ff fe17 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x71);
 8004aea:	2071      	movs	r0, #113	; 0x71
 8004aec:	f7ff fe14 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0xF1);
 8004af0:	20f1      	movs	r0, #241	; 0xf1
 8004af2:	f7ff fe11 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x70);
 8004af6:	2070      	movs	r0, #112	; 0x70
 8004af8:	f7ff fe0e 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x70);
 8004afc:	2070      	movs	r0, #112	; 0x70
 8004afe:	f7ff fe0b 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x18);
 8004b02:	2018      	movs	r0, #24
 8004b04:	f7ff fe08 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x13);
 8004b08:	2013      	movs	r0, #19
 8004b0a:	f7ff fe05 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x71);
 8004b0e:	2071      	movs	r0, #113	; 0x71
 8004b10:	f7ff fe02 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0xF3);
 8004b14:	20f3      	movs	r0, #243	; 0xf3
 8004b16:	f7ff fdff 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x70);
 8004b1a:	2070      	movs	r0, #112	; 0x70
 8004b1c:	f7ff fdfc 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x70);
 8004b20:	2070      	movs	r0, #112	; 0x70
 8004b22:	f7ff fdf9 	bl	8004718 <DISP_SendData_8Bit>

	DISP_SendCommand(0x64);
 8004b26:	2064      	movs	r0, #100	; 0x64
 8004b28:	f7ff fddc 	bl	80046e4 <DISP_SendCommand>
	DISP_SendData_8Bit(0x28);
 8004b2c:	2028      	movs	r0, #40	; 0x28
 8004b2e:	f7ff fdf3 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x29);
 8004b32:	2029      	movs	r0, #41	; 0x29
 8004b34:	f7ff fdf0 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0xF1);
 8004b38:	20f1      	movs	r0, #241	; 0xf1
 8004b3a:	f7ff fded 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x01);
 8004b3e:	2001      	movs	r0, #1
 8004b40:	f7ff fdea 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0xF1);
 8004b44:	20f1      	movs	r0, #241	; 0xf1
 8004b46:	f7ff fde7 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x00);
 8004b4a:	2000      	movs	r0, #0
 8004b4c:	f7ff fde4 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x07);
 8004b50:	2007      	movs	r0, #7
 8004b52:	f7ff fde1 	bl	8004718 <DISP_SendData_8Bit>

	DISP_SendCommand(0x66);
 8004b56:	2066      	movs	r0, #102	; 0x66
 8004b58:	f7ff fdc4 	bl	80046e4 <DISP_SendCommand>
	DISP_SendData_8Bit(0x3C);
 8004b5c:	203c      	movs	r0, #60	; 0x3c
 8004b5e:	f7ff fddb 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x00);
 8004b62:	2000      	movs	r0, #0
 8004b64:	f7ff fdd8 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0xCD);
 8004b68:	20cd      	movs	r0, #205	; 0xcd
 8004b6a:	f7ff fdd5 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x67);
 8004b6e:	2067      	movs	r0, #103	; 0x67
 8004b70:	f7ff fdd2 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x45);
 8004b74:	2045      	movs	r0, #69	; 0x45
 8004b76:	f7ff fdcf 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x45);
 8004b7a:	2045      	movs	r0, #69	; 0x45
 8004b7c:	f7ff fdcc 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x10);
 8004b80:	2010      	movs	r0, #16
 8004b82:	f7ff fdc9 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x00);
 8004b86:	2000      	movs	r0, #0
 8004b88:	f7ff fdc6 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x00);
 8004b8c:	2000      	movs	r0, #0
 8004b8e:	f7ff fdc3 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x00);
 8004b92:	2000      	movs	r0, #0
 8004b94:	f7ff fdc0 	bl	8004718 <DISP_SendData_8Bit>

	DISP_SendCommand(0x67);
 8004b98:	2067      	movs	r0, #103	; 0x67
 8004b9a:	f7ff fda3 	bl	80046e4 <DISP_SendCommand>
	DISP_SendData_8Bit(0x00);
 8004b9e:	2000      	movs	r0, #0
 8004ba0:	f7ff fdba 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x3C);
 8004ba4:	203c      	movs	r0, #60	; 0x3c
 8004ba6:	f7ff fdb7 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x00);
 8004baa:	2000      	movs	r0, #0
 8004bac:	f7ff fdb4 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x00);
 8004bb0:	2000      	movs	r0, #0
 8004bb2:	f7ff fdb1 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x00);
 8004bb6:	2000      	movs	r0, #0
 8004bb8:	f7ff fdae 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x01);
 8004bbc:	2001      	movs	r0, #1
 8004bbe:	f7ff fdab 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x54);
 8004bc2:	2054      	movs	r0, #84	; 0x54
 8004bc4:	f7ff fda8 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x10);
 8004bc8:	2010      	movs	r0, #16
 8004bca:	f7ff fda5 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x32);
 8004bce:	2032      	movs	r0, #50	; 0x32
 8004bd0:	f7ff fda2 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x98);
 8004bd4:	2098      	movs	r0, #152	; 0x98
 8004bd6:	f7ff fd9f 	bl	8004718 <DISP_SendData_8Bit>

	DISP_SendCommand(0x74);
 8004bda:	2074      	movs	r0, #116	; 0x74
 8004bdc:	f7ff fd82 	bl	80046e4 <DISP_SendCommand>
	DISP_SendData_8Bit(0x10);
 8004be0:	2010      	movs	r0, #16
 8004be2:	f7ff fd99 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x85);
 8004be6:	2085      	movs	r0, #133	; 0x85
 8004be8:	f7ff fd96 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x80);
 8004bec:	2080      	movs	r0, #128	; 0x80
 8004bee:	f7ff fd93 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x00);
 8004bf2:	2000      	movs	r0, #0
 8004bf4:	f7ff fd90 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x00);
 8004bf8:	2000      	movs	r0, #0
 8004bfa:	f7ff fd8d 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x4E);
 8004bfe:	204e      	movs	r0, #78	; 0x4e
 8004c00:	f7ff fd8a 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x00);
 8004c04:	2000      	movs	r0, #0
 8004c06:	f7ff fd87 	bl	8004718 <DISP_SendData_8Bit>

	DISP_SendCommand(0x98);
 8004c0a:	2098      	movs	r0, #152	; 0x98
 8004c0c:	f7ff fd6a 	bl	80046e4 <DISP_SendCommand>
	DISP_SendData_8Bit(0x3e);
 8004c10:	203e      	movs	r0, #62	; 0x3e
 8004c12:	f7ff fd81 	bl	8004718 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x07);
 8004c16:	2007      	movs	r0, #7
 8004c18:	f7ff fd7e 	bl	8004718 <DISP_SendData_8Bit>

	DISP_SendCommand(0x35);
 8004c1c:	2035      	movs	r0, #53	; 0x35
 8004c1e:	f7ff fd61 	bl	80046e4 <DISP_SendCommand>
	DISP_SendCommand(0x21);
 8004c22:	2021      	movs	r0, #33	; 0x21
 8004c24:	f7ff fd5e 	bl	80046e4 <DISP_SendCommand>

	DISP_SendCommand(0x11);
 8004c28:	2011      	movs	r0, #17
 8004c2a:	f7ff fd5b 	bl	80046e4 <DISP_SendCommand>
	HAL_Delay(120);
 8004c2e:	2078      	movs	r0, #120	; 0x78
 8004c30:	f7fc fcc2 	bl	80015b8 <HAL_Delay>
	DISP_SendCommand(0x29);
 8004c34:	2029      	movs	r0, #41	; 0x29
 8004c36:	f7ff fd55 	bl	80046e4 <DISP_SendCommand>
	HAL_Delay(20);
 8004c3a:	2014      	movs	r0, #20
 8004c3c:	f7fc fcbc 	bl	80015b8 <HAL_Delay>
}
 8004c40:	bf00      	nop
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <DISP_Init>:

void DISP_Init(uint8_t Scan_dir) {
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(DISP_DC_PIN, GPIO_PIN_SET);
 8004c4e:	2201      	movs	r2, #1
 8004c50:	2180      	movs	r1, #128	; 0x80
 8004c52:	4812      	ldr	r0, [pc, #72]	; (8004c9c <DISP_Init+0x58>)
 8004c54:	f7fc ff4e 	bl	8001af4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DISP_CS_PIN, GPIO_PIN_SET);
 8004c58:	2201      	movs	r2, #1
 8004c5a:	2110      	movs	r1, #16
 8004c5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c60:	f7fc ff48 	bl	8001af4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DISP_RST_PIN, GPIO_PIN_SET);
 8004c64:	2201      	movs	r2, #1
 8004c66:	2101      	movs	r1, #1
 8004c68:	480c      	ldr	r0, [pc, #48]	; (8004c9c <DISP_Init+0x58>)
 8004c6a:	f7fc ff43 	bl	8001af4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DISP_BL_PIN, GPIO_PIN_SET);
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004c74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c78:	f7fc ff3c 	bl	8001af4 <HAL_GPIO_WritePin>

    DISP_Reset();
 8004c7c:	f7ff fd02 	bl	8004684 <DISP_Reset>
    DISP_SetAttributes(Scan_dir);
 8004c80:	79fb      	ldrb	r3, [r7, #7]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7ff fd92 	bl	80047ac <DISP_SetAttributes>
    DISP_InitReg();
 8004c88:	f7ff fdaa 	bl	80047e0 <DISP_InitReg>

    DISP_SetBackLight(1);
 8004c8c:	2001      	movs	r0, #1
 8004c8e:	f000 f88e 	bl	8004dae <DISP_SetBackLight>
}
 8004c92:	bf00      	nop
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	48000400 	.word	0x48000400

08004ca0 <DISP_SetCursor>:
		Xstart 	:   X direction Start coordinates
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void DISP_SetCursor(uint16_t Xstart, uint16_t Ystart, uint16_t Xend, uint16_t Yend) {
 8004ca0:	b590      	push	{r4, r7, lr}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	4604      	mov	r4, r0
 8004ca8:	4608      	mov	r0, r1
 8004caa:	4611      	mov	r1, r2
 8004cac:	461a      	mov	r2, r3
 8004cae:	4623      	mov	r3, r4
 8004cb0:	80fb      	strh	r3, [r7, #6]
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	80bb      	strh	r3, [r7, #4]
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	807b      	strh	r3, [r7, #2]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	803b      	strh	r3, [r7, #0]

    //set the X coordinates
    DISP_SendCommand(0x2A);
 8004cbe:	202a      	movs	r0, #42	; 0x2a
 8004cc0:	f7ff fd10 	bl	80046e4 <DISP_SendCommand>
    DISP_SendData_8Bit(0x00);
 8004cc4:	2000      	movs	r0, #0
 8004cc6:	f7ff fd27 	bl	8004718 <DISP_SendData_8Bit>
    DISP_SendData_8Bit(Xstart);
 8004cca:	88fb      	ldrh	r3, [r7, #6]
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7ff fd22 	bl	8004718 <DISP_SendData_8Bit>
    DISP_SendData_8Bit(0x00);
 8004cd4:	2000      	movs	r0, #0
 8004cd6:	f7ff fd1f 	bl	8004718 <DISP_SendData_8Bit>
    DISP_SendData_8Bit(Xend);
 8004cda:	887b      	ldrh	r3, [r7, #2]
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7ff fd1a 	bl	8004718 <DISP_SendData_8Bit>

    //set the Y coordinates
    DISP_SendCommand(0x2B);
 8004ce4:	202b      	movs	r0, #43	; 0x2b
 8004ce6:	f7ff fcfd 	bl	80046e4 <DISP_SendCommand>
    DISP_SendData_8Bit(0x00);
 8004cea:	2000      	movs	r0, #0
 8004cec:	f7ff fd14 	bl	8004718 <DISP_SendData_8Bit>
    DISP_SendData_8Bit(Ystart);
 8004cf0:	88bb      	ldrh	r3, [r7, #4]
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7ff fd0f 	bl	8004718 <DISP_SendData_8Bit>
    DISP_SendData_8Bit(0x00);
 8004cfa:	2000      	movs	r0, #0
 8004cfc:	f7ff fd0c 	bl	8004718 <DISP_SendData_8Bit>
    DISP_SendData_8Bit(Yend);
 8004d00:	883b      	ldrh	r3, [r7, #0]
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff fd07 	bl	8004718 <DISP_SendData_8Bit>

    DISP_SendCommand(0X2C);
 8004d0a:	202c      	movs	r0, #44	; 0x2c
 8004d0c:	f7ff fcea 	bl	80046e4 <DISP_SendCommand>
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd90      	pop	{r4, r7, pc}

08004d18 <DISP_Clear>:

void DISP_Clear(uint16_t Color) {
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	4603      	mov	r3, r0
 8004d20:	80fb      	strh	r3, [r7, #6]

    uint16_t i,j;
    DISP_SetCursor(0, 0, DISP_WIDTH-1, DISP_HEIGHT-1);
 8004d22:	23ef      	movs	r3, #239	; 0xef
 8004d24:	22ef      	movs	r2, #239	; 0xef
 8004d26:	2100      	movs	r1, #0
 8004d28:	2000      	movs	r0, #0
 8004d2a:	f7ff ffb9 	bl	8004ca0 <DISP_SetCursor>

    HAL_GPIO_WritePin(DISP_DC_PIN, GPIO_PIN_SET);
 8004d2e:	2201      	movs	r2, #1
 8004d30:	2180      	movs	r1, #128	; 0x80
 8004d32:	4812      	ldr	r0, [pc, #72]	; (8004d7c <DISP_Clear+0x64>)
 8004d34:	f7fc fede 	bl	8001af4 <HAL_GPIO_WritePin>
	for(i = 0; i < DISP_WIDTH; i++){
 8004d38:	2300      	movs	r3, #0
 8004d3a:	81fb      	strh	r3, [r7, #14]
 8004d3c:	e017      	b.n	8004d6e <DISP_Clear+0x56>
		for(j = 0; j < DISP_HEIGHT; j++){
 8004d3e:	2300      	movs	r3, #0
 8004d40:	81bb      	strh	r3, [r7, #12]
 8004d42:	e00e      	b.n	8004d62 <DISP_Clear+0x4a>
			DISP_SPI_send(Color>>8);
 8004d44:	88fb      	ldrh	r3, [r7, #6]
 8004d46:	0a1b      	lsrs	r3, r3, #8
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7ff fcb7 	bl	80046c0 <DISP_SPI_send>
			DISP_SPI_send(Color);
 8004d52:	88fb      	ldrh	r3, [r7, #6]
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7ff fcb2 	bl	80046c0 <DISP_SPI_send>
		for(j = 0; j < DISP_HEIGHT; j++){
 8004d5c:	89bb      	ldrh	r3, [r7, #12]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	81bb      	strh	r3, [r7, #12]
 8004d62:	89bb      	ldrh	r3, [r7, #12]
 8004d64:	2bef      	cmp	r3, #239	; 0xef
 8004d66:	d9ed      	bls.n	8004d44 <DISP_Clear+0x2c>
	for(i = 0; i < DISP_WIDTH; i++){
 8004d68:	89fb      	ldrh	r3, [r7, #14]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	81fb      	strh	r3, [r7, #14]
 8004d6e:	89fb      	ldrh	r3, [r7, #14]
 8004d70:	2bef      	cmp	r3, #239	; 0xef
 8004d72:	d9e4      	bls.n	8004d3e <DISP_Clear+0x26>
		}
	 }
}
 8004d74:	bf00      	nop
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	48000400 	.word	0x48000400

08004d80 <DISP_DrawPaint>:
	    X	: 	Set the X coordinate
	    Y	:	Set the Y coordinate
	  Color :	Set the color
******************************************************************************/
void DISP_DrawPaint(uint16_t x, uint16_t y, uint16_t Color)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	4603      	mov	r3, r0
 8004d88:	80fb      	strh	r3, [r7, #6]
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	80bb      	strh	r3, [r7, #4]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	807b      	strh	r3, [r7, #2]
	DISP_SetCursor(x,y,x,y);
 8004d92:	88bb      	ldrh	r3, [r7, #4]
 8004d94:	88fa      	ldrh	r2, [r7, #6]
 8004d96:	88b9      	ldrh	r1, [r7, #4]
 8004d98:	88f8      	ldrh	r0, [r7, #6]
 8004d9a:	f7ff ff81 	bl	8004ca0 <DISP_SetCursor>
	DISP_SendData_16Bit(Color);
 8004d9e:	887b      	ldrh	r3, [r7, #2]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7ff fcd9 	bl	8004758 <DISP_SendData_16Bit>
}
 8004da6:	bf00      	nop
 8004da8:	3708      	adds	r7, #8
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <DISP_SetBackLight>:


void DISP_SetBackLight(uint8_t Value) {
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b082      	sub	sp, #8
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	4603      	mov	r3, r0
 8004db6:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(DISP_BL_PIN, Value);
 8004db8:	79fb      	ldrb	r3, [r7, #7]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004dc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004dc4:	f7fc fe96 	bl	8001af4 <HAL_GPIO_WritePin>
}
 8004dc8:	bf00      	nop
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <DISP_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void DISP_NewImage(uint16_t Width, uint16_t Height, uint16_t Rotate, uint16_t Color)
{
 8004dd0:	b490      	push	{r4, r7}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	4604      	mov	r4, r0
 8004dd8:	4608      	mov	r0, r1
 8004dda:	4611      	mov	r1, r2
 8004ddc:	461a      	mov	r2, r3
 8004dde:	4623      	mov	r3, r4
 8004de0:	80fb      	strh	r3, [r7, #6]
 8004de2:	4603      	mov	r3, r0
 8004de4:	80bb      	strh	r3, [r7, #4]
 8004de6:	460b      	mov	r3, r1
 8004de8:	807b      	strh	r3, [r7, #2]
 8004dea:	4613      	mov	r3, r2
 8004dec:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 8004dee:	4a16      	ldr	r2, [pc, #88]	; (8004e48 <DISP_NewImage+0x78>)
 8004df0:	88fb      	ldrh	r3, [r7, #6]
 8004df2:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8004df4:	4a14      	ldr	r2, [pc, #80]	; (8004e48 <DISP_NewImage+0x78>)
 8004df6:	88bb      	ldrh	r3, [r7, #4]
 8004df8:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8004dfa:	4a13      	ldr	r2, [pc, #76]	; (8004e48 <DISP_NewImage+0x78>)
 8004dfc:	883b      	ldrh	r3, [r7, #0]
 8004dfe:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 8004e00:	4a11      	ldr	r2, [pc, #68]	; (8004e48 <DISP_NewImage+0x78>)
 8004e02:	88fb      	ldrh	r3, [r7, #6]
 8004e04:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;
 8004e06:	4a10      	ldr	r2, [pc, #64]	; (8004e48 <DISP_NewImage+0x78>)
 8004e08:	88bb      	ldrh	r3, [r7, #4]
 8004e0a:	8293      	strh	r3, [r2, #20]
   
    Paint.Rotate = Rotate;
 8004e0c:	4a0e      	ldr	r2, [pc, #56]	; (8004e48 <DISP_NewImage+0x78>)
 8004e0e:	887b      	ldrh	r3, [r7, #2]
 8004e10:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8004e12:	4b0d      	ldr	r3, [pc, #52]	; (8004e48 <DISP_NewImage+0x78>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8004e18:	887b      	ldrh	r3, [r7, #2]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d002      	beq.n	8004e24 <DISP_NewImage+0x54>
 8004e1e:	887b      	ldrh	r3, [r7, #2]
 8004e20:	2bb4      	cmp	r3, #180	; 0xb4
 8004e22:	d106      	bne.n	8004e32 <DISP_NewImage+0x62>
        Paint.Width = Width;
 8004e24:	4a08      	ldr	r2, [pc, #32]	; (8004e48 <DISP_NewImage+0x78>)
 8004e26:	88fb      	ldrh	r3, [r7, #6]
 8004e28:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8004e2a:	4a07      	ldr	r2, [pc, #28]	; (8004e48 <DISP_NewImage+0x78>)
 8004e2c:	88bb      	ldrh	r3, [r7, #4]
 8004e2e:	80d3      	strh	r3, [r2, #6]
 8004e30:	e005      	b.n	8004e3e <DISP_NewImage+0x6e>
    } else {
        Paint.Width = Height;
 8004e32:	4a05      	ldr	r2, [pc, #20]	; (8004e48 <DISP_NewImage+0x78>)
 8004e34:	88bb      	ldrh	r3, [r7, #4]
 8004e36:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8004e38:	4a03      	ldr	r2, [pc, #12]	; (8004e48 <DISP_NewImage+0x78>)
 8004e3a:	88fb      	ldrh	r3, [r7, #6]
 8004e3c:	80d3      	strh	r3, [r2, #6]
    }
}
 8004e3e:	bf00      	nop
 8004e40:	3708      	adds	r7, #8
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bc90      	pop	{r4, r7}
 8004e46:	4770      	bx	lr
 8004e48:	20000290 	.word	0x20000290

08004e4c <DISP_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void DISP_SetPixel(uint16_t Xpoint, uint16_t Ypoint, uint16_t Color)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	4603      	mov	r3, r0
 8004e54:	80fb      	strh	r3, [r7, #6]
 8004e56:	460b      	mov	r3, r1
 8004e58:	80bb      	strh	r3, [r7, #4]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8004e5e:	4b4e      	ldr	r3, [pc, #312]	; (8004f98 <DISP_SetPixel+0x14c>)
 8004e60:	889b      	ldrh	r3, [r3, #4]
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	88fa      	ldrh	r2, [r7, #6]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d805      	bhi.n	8004e76 <DISP_SetPixel+0x2a>
 8004e6a:	4b4b      	ldr	r3, [pc, #300]	; (8004f98 <DISP_SetPixel+0x14c>)
 8004e6c:	88db      	ldrh	r3, [r3, #6]
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	88ba      	ldrh	r2, [r7, #4]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d903      	bls.n	8004e7e <DISP_SetPixel+0x32>
        Debug("Exceeding display boundaries\r\n");
 8004e76:	4849      	ldr	r0, [pc, #292]	; (8004f9c <DISP_SetPixel+0x150>)
 8004e78:	f000 fc36 	bl	80056e8 <puts>
        return;
 8004e7c:	e088      	b.n	8004f90 <DISP_SetPixel+0x144>
    }      
    uint16_t X, Y;

    switch(Paint.Rotate) {
 8004e7e:	4b46      	ldr	r3, [pc, #280]	; (8004f98 <DISP_SetPixel+0x14c>)
 8004e80:	89db      	ldrh	r3, [r3, #14]
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	2b5a      	cmp	r3, #90	; 0x5a
 8004e86:	d00f      	beq.n	8004ea8 <DISP_SetPixel+0x5c>
 8004e88:	2b5a      	cmp	r3, #90	; 0x5a
 8004e8a:	dc02      	bgt.n	8004e92 <DISP_SetPixel+0x46>
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d006      	beq.n	8004e9e <DISP_SetPixel+0x52>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 8004e90:	e07e      	b.n	8004f90 <DISP_SetPixel+0x144>
    switch(Paint.Rotate) {
 8004e92:	2bb4      	cmp	r3, #180	; 0xb4
 8004e94:	d013      	beq.n	8004ebe <DISP_SetPixel+0x72>
 8004e96:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8004e9a:	d021      	beq.n	8004ee0 <DISP_SetPixel+0x94>
        return;
 8004e9c:	e078      	b.n	8004f90 <DISP_SetPixel+0x144>
        X = Xpoint;
 8004e9e:	88fb      	ldrh	r3, [r7, #6]
 8004ea0:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 8004ea2:	88bb      	ldrh	r3, [r7, #4]
 8004ea4:	81bb      	strh	r3, [r7, #12]
        break;
 8004ea6:	e026      	b.n	8004ef6 <DISP_SetPixel+0xaa>
        X = Paint.WidthMemory - Ypoint - 1;
 8004ea8:	4b3b      	ldr	r3, [pc, #236]	; (8004f98 <DISP_SetPixel+0x14c>)
 8004eaa:	891b      	ldrh	r3, [r3, #8]
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	88bb      	ldrh	r3, [r7, #4]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 8004eb8:	88fb      	ldrh	r3, [r7, #6]
 8004eba:	81bb      	strh	r3, [r7, #12]
        break;
 8004ebc:	e01b      	b.n	8004ef6 <DISP_SetPixel+0xaa>
        X = Paint.WidthMemory - Xpoint - 1;
 8004ebe:	4b36      	ldr	r3, [pc, #216]	; (8004f98 <DISP_SetPixel+0x14c>)
 8004ec0:	891b      	ldrh	r3, [r3, #8]
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	88fb      	ldrh	r3, [r7, #6]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 8004ece:	4b32      	ldr	r3, [pc, #200]	; (8004f98 <DISP_SetPixel+0x14c>)
 8004ed0:	895b      	ldrh	r3, [r3, #10]
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	88bb      	ldrh	r3, [r7, #4]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	3b01      	subs	r3, #1
 8004edc:	81bb      	strh	r3, [r7, #12]
        break;
 8004ede:	e00a      	b.n	8004ef6 <DISP_SetPixel+0xaa>
        X = Ypoint;
 8004ee0:	88bb      	ldrh	r3, [r7, #4]
 8004ee2:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 8004ee4:	4b2c      	ldr	r3, [pc, #176]	; (8004f98 <DISP_SetPixel+0x14c>)
 8004ee6:	895b      	ldrh	r3, [r3, #10]
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	88fb      	ldrh	r3, [r7, #6]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	81bb      	strh	r3, [r7, #12]
        break;
 8004ef4:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8004ef6:	4b28      	ldr	r3, [pc, #160]	; (8004f98 <DISP_SetPixel+0x14c>)
 8004ef8:	8a1b      	ldrh	r3, [r3, #16]
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	2b03      	cmp	r3, #3
 8004efe:	d846      	bhi.n	8004f8e <DISP_SetPixel+0x142>
 8004f00:	a201      	add	r2, pc, #4	; (adr r2, 8004f08 <DISP_SetPixel+0xbc>)
 8004f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f06:	bf00      	nop
 8004f08:	08004f5f 	.word	0x08004f5f
 8004f0c:	08004f19 	.word	0x08004f19
 8004f10:	08004f2b 	.word	0x08004f2b
 8004f14:	08004f3d 	.word	0x08004f3d
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8004f18:	4b1f      	ldr	r3, [pc, #124]	; (8004f98 <DISP_SetPixel+0x14c>)
 8004f1a:	891b      	ldrh	r3, [r3, #8]
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	89fb      	ldrh	r3, [r7, #14]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	3b01      	subs	r3, #1
 8004f26:	81fb      	strh	r3, [r7, #14]
        break;
 8004f28:	e01a      	b.n	8004f60 <DISP_SetPixel+0x114>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8004f2a:	4b1b      	ldr	r3, [pc, #108]	; (8004f98 <DISP_SetPixel+0x14c>)
 8004f2c:	895b      	ldrh	r3, [r3, #10]
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	89bb      	ldrh	r3, [r7, #12]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	3b01      	subs	r3, #1
 8004f38:	81bb      	strh	r3, [r7, #12]
        break;
 8004f3a:	e011      	b.n	8004f60 <DISP_SetPixel+0x114>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8004f3c:	4b16      	ldr	r3, [pc, #88]	; (8004f98 <DISP_SetPixel+0x14c>)
 8004f3e:	891b      	ldrh	r3, [r3, #8]
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	89fb      	ldrh	r3, [r7, #14]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 8004f4c:	4b12      	ldr	r3, [pc, #72]	; (8004f98 <DISP_SetPixel+0x14c>)
 8004f4e:	895b      	ldrh	r3, [r3, #10]
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	89bb      	ldrh	r3, [r7, #12]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	81bb      	strh	r3, [r7, #12]
        break;
 8004f5c:	e000      	b.n	8004f60 <DISP_SetPixel+0x114>
        break;
 8004f5e:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8004f60:	4b0d      	ldr	r3, [pc, #52]	; (8004f98 <DISP_SetPixel+0x14c>)
 8004f62:	891b      	ldrh	r3, [r3, #8]
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	89fa      	ldrh	r2, [r7, #14]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d805      	bhi.n	8004f78 <DISP_SetPixel+0x12c>
 8004f6c:	4b0a      	ldr	r3, [pc, #40]	; (8004f98 <DISP_SetPixel+0x14c>)
 8004f6e:	895b      	ldrh	r3, [r3, #10]
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	89ba      	ldrh	r2, [r7, #12]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d903      	bls.n	8004f80 <DISP_SetPixel+0x134>
        Debug("Exceeding display boundaries\r\n");
 8004f78:	4808      	ldr	r0, [pc, #32]	; (8004f9c <DISP_SetPixel+0x150>)
 8004f7a:	f000 fbb5 	bl	80056e8 <puts>
        return;
 8004f7e:	e007      	b.n	8004f90 <DISP_SetPixel+0x144>
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		//DISPLAY(X,Y, Color);
    DISP_DrawPaint(X, Y, Color);
 8004f80:	887a      	ldrh	r2, [r7, #2]
 8004f82:	89b9      	ldrh	r1, [r7, #12]
 8004f84:	89fb      	ldrh	r3, [r7, #14]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7ff fefa 	bl	8004d80 <DISP_DrawPaint>
 8004f8c:	e000      	b.n	8004f90 <DISP_SetPixel+0x144>
        return;
 8004f8e:	bf00      	nop
}
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	20000290 	.word	0x20000290
 8004f9c:	080060e4 	.word	0x080060e4

08004fa0 <DISP_DrawPoint>:
    Color		:   Set color
    Dot_Pixel	:	point size
******************************************************************************/
void DISP_DrawPoint( uint16_t Xpoint,       uint16_t Ypoint, uint16_t Color,
                      DOT_PIXEL Dot_Pixel,DOT_STYLE Dot_FillWay)
{
 8004fa0:	b590      	push	{r4, r7, lr}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	4604      	mov	r4, r0
 8004fa8:	4608      	mov	r0, r1
 8004faa:	4611      	mov	r1, r2
 8004fac:	461a      	mov	r2, r3
 8004fae:	4623      	mov	r3, r4
 8004fb0:	80fb      	strh	r3, [r7, #6]
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	80bb      	strh	r3, [r7, #4]
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	807b      	strh	r3, [r7, #2]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8004fbe:	4b44      	ldr	r3, [pc, #272]	; (80050d0 <DISP_DrawPoint+0x130>)
 8004fc0:	889b      	ldrh	r3, [r3, #4]
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	88fa      	ldrh	r2, [r7, #6]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d805      	bhi.n	8004fd6 <DISP_DrawPoint+0x36>
 8004fca:	4b41      	ldr	r3, [pc, #260]	; (80050d0 <DISP_DrawPoint+0x130>)
 8004fcc:	88db      	ldrh	r3, [r3, #6]
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	88ba      	ldrh	r2, [r7, #4]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d903      	bls.n	8004fde <DISP_DrawPoint+0x3e>
        Debug("DISP_DrawPoint Input exceeds the normal display range\r\n");
 8004fd6:	483f      	ldr	r0, [pc, #252]	; (80050d4 <DISP_DrawPoint+0x134>)
 8004fd8:	f000 fb86 	bl	80056e8 <puts>
        return;
 8004fdc:	e074      	b.n	80050c8 <DISP_DrawPoint+0x128>
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_FillWay == DOT_FILL_AROUND) {
 8004fde:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d144      	bne.n	8005070 <DISP_DrawPoint+0xd0>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	81fb      	strh	r3, [r7, #14]
 8004fea:	e039      	b.n	8005060 <DISP_DrawPoint+0xc0>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8004fec:	2300      	movs	r3, #0
 8004fee:	81bb      	strh	r3, [r7, #12]
 8004ff0:	e029      	b.n	8005046 <DISP_DrawPoint+0xa6>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 8004ff2:	88fa      	ldrh	r2, [r7, #6]
 8004ff4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ff8:	441a      	add	r2, r3
 8004ffa:	787b      	ldrb	r3, [r7, #1]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	db28      	blt.n	8005054 <DISP_DrawPoint+0xb4>
 8005002:	88ba      	ldrh	r2, [r7, #4]
 8005004:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005008:	441a      	add	r2, r3
 800500a:	787b      	ldrb	r3, [r7, #1]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b00      	cmp	r3, #0
 8005010:	db20      	blt.n	8005054 <DISP_DrawPoint+0xb4>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                DISP_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 8005012:	89fa      	ldrh	r2, [r7, #14]
 8005014:	88fb      	ldrh	r3, [r7, #6]
 8005016:	4413      	add	r3, r2
 8005018:	b29a      	uxth	r2, r3
 800501a:	787b      	ldrb	r3, [r7, #1]
 800501c:	b29b      	uxth	r3, r3
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	b298      	uxth	r0, r3
 8005022:	89ba      	ldrh	r2, [r7, #12]
 8005024:	88bb      	ldrh	r3, [r7, #4]
 8005026:	4413      	add	r3, r2
 8005028:	b29a      	uxth	r2, r3
 800502a:	787b      	ldrb	r3, [r7, #1]
 800502c:	b29b      	uxth	r3, r3
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	b29b      	uxth	r3, r3
 8005032:	887a      	ldrh	r2, [r7, #2]
 8005034:	4619      	mov	r1, r3
 8005036:	f7ff ff09 	bl	8004e4c <DISP_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 800503a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800503e:	b29b      	uxth	r3, r3
 8005040:	3301      	adds	r3, #1
 8005042:	b29b      	uxth	r3, r3
 8005044:	81bb      	strh	r3, [r7, #12]
 8005046:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800504a:	787b      	ldrb	r3, [r7, #1]
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	3b01      	subs	r3, #1
 8005050:	429a      	cmp	r2, r3
 8005052:	dbce      	blt.n	8004ff2 <DISP_DrawPoint+0x52>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 8005054:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005058:	b29b      	uxth	r3, r3
 800505a:	3301      	adds	r3, #1
 800505c:	b29b      	uxth	r3, r3
 800505e:	81fb      	strh	r3, [r7, #14]
 8005060:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005064:	787b      	ldrb	r3, [r7, #1]
 8005066:	005b      	lsls	r3, r3, #1
 8005068:	3b01      	subs	r3, #1
 800506a:	429a      	cmp	r2, r3
 800506c:	dbbe      	blt.n	8004fec <DISP_DrawPoint+0x4c>
 800506e:	e02b      	b.n	80050c8 <DISP_DrawPoint+0x128>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8005070:	2300      	movs	r3, #0
 8005072:	81fb      	strh	r3, [r7, #14]
 8005074:	e023      	b.n	80050be <DISP_DrawPoint+0x11e>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8005076:	2300      	movs	r3, #0
 8005078:	81bb      	strh	r3, [r7, #12]
 800507a:	e015      	b.n	80050a8 <DISP_DrawPoint+0x108>
                DISP_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 800507c:	89fa      	ldrh	r2, [r7, #14]
 800507e:	88fb      	ldrh	r3, [r7, #6]
 8005080:	4413      	add	r3, r2
 8005082:	b29b      	uxth	r3, r3
 8005084:	3b01      	subs	r3, #1
 8005086:	b298      	uxth	r0, r3
 8005088:	89ba      	ldrh	r2, [r7, #12]
 800508a:	88bb      	ldrh	r3, [r7, #4]
 800508c:	4413      	add	r3, r2
 800508e:	b29b      	uxth	r3, r3
 8005090:	3b01      	subs	r3, #1
 8005092:	b29b      	uxth	r3, r3
 8005094:	887a      	ldrh	r2, [r7, #2]
 8005096:	4619      	mov	r1, r3
 8005098:	f7ff fed8 	bl	8004e4c <DISP_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 800509c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	3301      	adds	r3, #1
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	81bb      	strh	r3, [r7, #12]
 80050a8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80050ac:	787b      	ldrb	r3, [r7, #1]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	dbe4      	blt.n	800507c <DISP_DrawPoint+0xdc>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 80050b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	3301      	adds	r3, #1
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	81fb      	strh	r3, [r7, #14]
 80050be:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80050c2:	787b      	ldrb	r3, [r7, #1]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	dbd6      	blt.n	8005076 <DISP_DrawPoint+0xd6>
            }
        }
    }
}
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd90      	pop	{r4, r7, pc}
 80050ce:	bf00      	nop
 80050d0:	20000290 	.word	0x20000290
 80050d4:	0800610c 	.word	0x0800610c

080050d8 <DISP_DrawLine>:
    Yend   ：End point Ypoint coordinate
    Color  ：The color of the line segment
******************************************************************************/
void DISP_DrawLine(uint16_t Xstart, uint16_t Ystart, uint16_t Xend, uint16_t Yend,
                    uint16_t Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 80050d8:	b590      	push	{r4, r7, lr}
 80050da:	b08d      	sub	sp, #52	; 0x34
 80050dc:	af02      	add	r7, sp, #8
 80050de:	4604      	mov	r4, r0
 80050e0:	4608      	mov	r0, r1
 80050e2:	4611      	mov	r1, r2
 80050e4:	461a      	mov	r2, r3
 80050e6:	4623      	mov	r3, r4
 80050e8:	80fb      	strh	r3, [r7, #6]
 80050ea:	4603      	mov	r3, r0
 80050ec:	80bb      	strh	r3, [r7, #4]
 80050ee:	460b      	mov	r3, r1
 80050f0:	807b      	strh	r3, [r7, #2]
 80050f2:	4613      	mov	r3, r2
 80050f4:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 80050f6:	4b4e      	ldr	r3, [pc, #312]	; (8005230 <DISP_DrawLine+0x158>)
 80050f8:	889b      	ldrh	r3, [r3, #4]
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	88fa      	ldrh	r2, [r7, #6]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d811      	bhi.n	8005126 <DISP_DrawLine+0x4e>
 8005102:	4b4b      	ldr	r3, [pc, #300]	; (8005230 <DISP_DrawLine+0x158>)
 8005104:	88db      	ldrh	r3, [r3, #6]
 8005106:	b29b      	uxth	r3, r3
 8005108:	88ba      	ldrh	r2, [r7, #4]
 800510a:	429a      	cmp	r2, r3
 800510c:	d80b      	bhi.n	8005126 <DISP_DrawLine+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 800510e:	4b48      	ldr	r3, [pc, #288]	; (8005230 <DISP_DrawLine+0x158>)
 8005110:	889b      	ldrh	r3, [r3, #4]
 8005112:	b29b      	uxth	r3, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8005114:	887a      	ldrh	r2, [r7, #2]
 8005116:	429a      	cmp	r2, r3
 8005118:	d805      	bhi.n	8005126 <DISP_DrawLine+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 800511a:	4b45      	ldr	r3, [pc, #276]	; (8005230 <DISP_DrawLine+0x158>)
 800511c:	88db      	ldrh	r3, [r3, #6]
 800511e:	b29b      	uxth	r3, r3
 8005120:	883a      	ldrh	r2, [r7, #0]
 8005122:	429a      	cmp	r2, r3
 8005124:	d903      	bls.n	800512e <DISP_DrawLine+0x56>
        Debug("DISP_DrawLine Input exceeds the normal display range\r\n");
 8005126:	4843      	ldr	r0, [pc, #268]	; (8005234 <DISP_DrawLine+0x15c>)
 8005128:	f000 fade 	bl	80056e8 <puts>
        return;
 800512c:	e07d      	b.n	800522a <DISP_DrawLine+0x152>
    }

    uint16_t Xpoint = Xstart;
 800512e:	88fb      	ldrh	r3, [r7, #6]
 8005130:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint16_t Ypoint = Ystart;
 8005132:	88bb      	ldrh	r3, [r7, #4]
 8005134:	84bb      	strh	r3, [r7, #36]	; 0x24
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8005136:	887a      	ldrh	r2, [r7, #2]
 8005138:	88fb      	ldrh	r3, [r7, #6]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	2b00      	cmp	r3, #0
 800513e:	bfb8      	it	lt
 8005140:	425b      	neglt	r3, r3
 8005142:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8005144:	883a      	ldrh	r2, [r7, #0]
 8005146:	88bb      	ldrh	r3, [r7, #4]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	bfb8      	it	lt
 800514e:	425b      	neglt	r3, r3
 8005150:	425b      	negs	r3, r3
 8005152:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 8005154:	88fa      	ldrh	r2, [r7, #6]
 8005156:	887b      	ldrh	r3, [r7, #2]
 8005158:	429a      	cmp	r2, r3
 800515a:	d201      	bcs.n	8005160 <DISP_DrawLine+0x88>
 800515c:	2301      	movs	r3, #1
 800515e:	e001      	b.n	8005164 <DISP_DrawLine+0x8c>
 8005160:	f04f 33ff 	mov.w	r3, #4294967295
 8005164:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 8005166:	88ba      	ldrh	r2, [r7, #4]
 8005168:	883b      	ldrh	r3, [r7, #0]
 800516a:	429a      	cmp	r2, r3
 800516c:	d201      	bcs.n	8005172 <DISP_DrawLine+0x9a>
 800516e:	2301      	movs	r3, #1
 8005170:	e001      	b.n	8005176 <DISP_DrawLine+0x9e>
 8005172:	f04f 33ff 	mov.w	r3, #4294967295
 8005176:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	4413      	add	r3, r2
 800517e:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 8005180:	2300      	movs	r3, #0
 8005182:	77fb      	strb	r3, [r7, #31]

    for (;;) {
        Dotted_Len++;
 8005184:	7ffb      	ldrb	r3, [r7, #31]
 8005186:	3301      	adds	r3, #1
 8005188:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 800518a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800518e:	2b01      	cmp	r3, #1
 8005190:	d119      	bne.n	80051c6 <DISP_DrawLine+0xee>
 8005192:	7ffa      	ldrb	r2, [r7, #31]
 8005194:	4b28      	ldr	r3, [pc, #160]	; (8005238 <DISP_DrawLine+0x160>)
 8005196:	fba3 1302 	umull	r1, r3, r3, r2
 800519a:	0859      	lsrs	r1, r3, #1
 800519c:	460b      	mov	r3, r1
 800519e:	005b      	lsls	r3, r3, #1
 80051a0:	440b      	add	r3, r1
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10d      	bne.n	80051c6 <DISP_DrawLine+0xee>
            //Debug("LINE_DOTTED\r\n");
            DISP_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 80051aa:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80051ae:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80051b0:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80051b2:	2301      	movs	r3, #1
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	4613      	mov	r3, r2
 80051b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051bc:	f7ff fef0 	bl	8004fa0 <DISP_DrawPoint>
            Dotted_Len = 0;
 80051c0:	2300      	movs	r3, #0
 80051c2:	77fb      	strb	r3, [r7, #31]
 80051c4:	e009      	b.n	80051da <DISP_DrawLine+0x102>
        } else {
            DISP_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 80051c6:	f897 403c 	ldrb.w	r4, [r7, #60]	; 0x3c
 80051ca:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80051cc:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80051ce:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80051d0:	2301      	movs	r3, #1
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	4623      	mov	r3, r4
 80051d6:	f7ff fee3 	bl	8004fa0 <DISP_DrawPoint>
        }
        if (2 * Esp >= dy) {
 80051da:	6a3b      	ldr	r3, [r7, #32]
 80051dc:	005b      	lsls	r3, r3, #1
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	dc0c      	bgt.n	80051fe <DISP_DrawLine+0x126>
            if (Xpoint == Xend)
 80051e4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80051e6:	887b      	ldrh	r3, [r7, #2]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d01b      	beq.n	8005224 <DISP_DrawLine+0x14c>
                break;
            Esp += dy;
 80051ec:	6a3a      	ldr	r2, [r7, #32]
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	4413      	add	r3, r2
 80051f2:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80051fa:	4413      	add	r3, r2
 80051fc:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if (2 * Esp <= dx) {
 80051fe:	6a3b      	ldr	r3, [r7, #32]
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	429a      	cmp	r2, r3
 8005206:	dbbd      	blt.n	8005184 <DISP_DrawLine+0xac>
            if (Ypoint == Yend)
 8005208:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800520a:	883b      	ldrh	r3, [r7, #0]
 800520c:	429a      	cmp	r2, r3
 800520e:	d00b      	beq.n	8005228 <DISP_DrawLine+0x150>
                break;
            Esp += dx;
 8005210:	6a3a      	ldr	r2, [r7, #32]
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	4413      	add	r3, r2
 8005216:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	b29a      	uxth	r2, r3
 800521c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800521e:	4413      	add	r3, r2
 8005220:	84bb      	strh	r3, [r7, #36]	; 0x24
        Dotted_Len++;
 8005222:	e7af      	b.n	8005184 <DISP_DrawLine+0xac>
                break;
 8005224:	bf00      	nop
 8005226:	e000      	b.n	800522a <DISP_DrawLine+0x152>
                break;
 8005228:	bf00      	nop
        }
    }
}
 800522a:	372c      	adds	r7, #44	; 0x2c
 800522c:	46bd      	mov	sp, r7
 800522e:	bd90      	pop	{r4, r7, pc}
 8005230:	20000290 	.word	0x20000290
 8005234:	0800614c 	.word	0x0800614c
 8005238:	aaaaaaab 	.word	0xaaaaaaab

0800523c <DISP_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void DISP_DrawChar(uint16_t Xpoint, uint16_t Ypoint, const char Acsii_Char,
                    sFONT* Font, uint16_t Color_Background, uint16_t Color_Foreground)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b088      	sub	sp, #32
 8005240:	af00      	add	r7, sp, #0
 8005242:	607b      	str	r3, [r7, #4]
 8005244:	4603      	mov	r3, r0
 8005246:	81fb      	strh	r3, [r7, #14]
 8005248:	460b      	mov	r3, r1
 800524a:	81bb      	strh	r3, [r7, #12]
 800524c:	4613      	mov	r3, r2
 800524e:	72fb      	strb	r3, [r7, #11]
    uint16_t Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8005250:	4b4e      	ldr	r3, [pc, #312]	; (800538c <DISP_DrawChar+0x150>)
 8005252:	889b      	ldrh	r3, [r3, #4]
 8005254:	b29b      	uxth	r3, r3
 8005256:	89fa      	ldrh	r2, [r7, #14]
 8005258:	429a      	cmp	r2, r3
 800525a:	d805      	bhi.n	8005268 <DISP_DrawChar+0x2c>
 800525c:	4b4b      	ldr	r3, [pc, #300]	; (800538c <DISP_DrawChar+0x150>)
 800525e:	88db      	ldrh	r3, [r3, #6]
 8005260:	b29b      	uxth	r3, r3
 8005262:	89ba      	ldrh	r2, [r7, #12]
 8005264:	429a      	cmp	r2, r3
 8005266:	d903      	bls.n	8005270 <DISP_DrawChar+0x34>
        Debug("DISP_DrawChar Input exceeds the normal display range\r\n");
 8005268:	4849      	ldr	r0, [pc, #292]	; (8005390 <DISP_DrawChar+0x154>)
 800526a:	f000 fa3d 	bl	80056e8 <puts>
        return;
 800526e:	e089      	b.n	8005384 <DISP_DrawChar+0x148>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8005270:	7afb      	ldrb	r3, [r7, #11]
 8005272:	3b20      	subs	r3, #32
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	88d2      	ldrh	r2, [r2, #6]
 8005278:	fb02 f303 	mul.w	r3, r2, r3
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	8892      	ldrh	r2, [r2, #4]
 8005280:	08d2      	lsrs	r2, r2, #3
 8005282:	b292      	uxth	r2, r2
 8005284:	4611      	mov	r1, r2
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	8892      	ldrh	r2, [r2, #4]
 800528a:	f002 0207 	and.w	r2, r2, #7
 800528e:	b292      	uxth	r2, r2
 8005290:	2a00      	cmp	r2, #0
 8005292:	bf14      	ite	ne
 8005294:	2201      	movne	r2, #1
 8005296:	2200      	moveq	r2, #0
 8005298:	b2d2      	uxtb	r2, r2
 800529a:	440a      	add	r2, r1
 800529c:	fb02 f303 	mul.w	r3, r2, r3
 80052a0:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	4413      	add	r3, r2
 80052aa:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 80052ac:	2300      	movs	r3, #0
 80052ae:	83fb      	strh	r3, [r7, #30]
 80052b0:	e063      	b.n	800537a <DISP_DrawChar+0x13e>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 80052b2:	2300      	movs	r3, #0
 80052b4:	83bb      	strh	r3, [r7, #28]
 80052b6:	e04e      	b.n	8005356 <DISP_DrawChar+0x11a>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 80052b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80052ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052be:	4293      	cmp	r3, r2
 80052c0:	d118      	bne.n	80052f4 <DISP_DrawChar+0xb8>
                if (*ptr & (0x80 >> (Column % 8)))
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	4619      	mov	r1, r3
 80052c8:	8bbb      	ldrh	r3, [r7, #28]
 80052ca:	f003 0307 	and.w	r3, r3, #7
 80052ce:	2280      	movs	r2, #128	; 0x80
 80052d0:	fa42 f303 	asr.w	r3, r2, r3
 80052d4:	400b      	ands	r3, r1
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d031      	beq.n	800533e <DISP_DrawChar+0x102>
                    DISP_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 80052da:	89fa      	ldrh	r2, [r7, #14]
 80052dc:	8bbb      	ldrh	r3, [r7, #28]
 80052de:	4413      	add	r3, r2
 80052e0:	b298      	uxth	r0, r3
 80052e2:	89ba      	ldrh	r2, [r7, #12]
 80052e4:	8bfb      	ldrh	r3, [r7, #30]
 80052e6:	4413      	add	r3, r2
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80052ec:	4619      	mov	r1, r3
 80052ee:	f7ff fdad 	bl	8004e4c <DISP_SetPixel>
 80052f2:	e024      	b.n	800533e <DISP_DrawChar+0x102>
                    // DISP_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	4619      	mov	r1, r3
 80052fa:	8bbb      	ldrh	r3, [r7, #28]
 80052fc:	f003 0307 	and.w	r3, r3, #7
 8005300:	2280      	movs	r2, #128	; 0x80
 8005302:	fa42 f303 	asr.w	r3, r2, r3
 8005306:	400b      	ands	r3, r1
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00c      	beq.n	8005326 <DISP_DrawChar+0xea>
                    DISP_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800530c:	89fa      	ldrh	r2, [r7, #14]
 800530e:	8bbb      	ldrh	r3, [r7, #28]
 8005310:	4413      	add	r3, r2
 8005312:	b298      	uxth	r0, r3
 8005314:	89ba      	ldrh	r2, [r7, #12]
 8005316:	8bfb      	ldrh	r3, [r7, #30]
 8005318:	4413      	add	r3, r2
 800531a:	b29b      	uxth	r3, r3
 800531c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800531e:	4619      	mov	r1, r3
 8005320:	f7ff fd94 	bl	8004e4c <DISP_SetPixel>
 8005324:	e00b      	b.n	800533e <DISP_DrawChar+0x102>
                    // DISP_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    DISP_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8005326:	89fa      	ldrh	r2, [r7, #14]
 8005328:	8bbb      	ldrh	r3, [r7, #28]
 800532a:	4413      	add	r3, r2
 800532c:	b298      	uxth	r0, r3
 800532e:	89ba      	ldrh	r2, [r7, #12]
 8005330:	8bfb      	ldrh	r3, [r7, #30]
 8005332:	4413      	add	r3, r2
 8005334:	b29b      	uxth	r3, r3
 8005336:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005338:	4619      	mov	r1, r3
 800533a:	f7ff fd87 	bl	8004e4c <DISP_SetPixel>
                    // DISP_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 800533e:	8bbb      	ldrh	r3, [r7, #28]
 8005340:	f003 0307 	and.w	r3, r3, #7
 8005344:	b29b      	uxth	r3, r3
 8005346:	2b07      	cmp	r3, #7
 8005348:	d102      	bne.n	8005350 <DISP_DrawChar+0x114>
                ptr++;
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	3301      	adds	r3, #1
 800534e:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8005350:	8bbb      	ldrh	r3, [r7, #28]
 8005352:	3301      	adds	r3, #1
 8005354:	83bb      	strh	r3, [r7, #28]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	889b      	ldrh	r3, [r3, #4]
 800535a:	8bba      	ldrh	r2, [r7, #28]
 800535c:	429a      	cmp	r2, r3
 800535e:	d3ab      	bcc.n	80052b8 <DISP_DrawChar+0x7c>
        }// Write a line
        if (Font->Width % 8 != 0)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	889b      	ldrh	r3, [r3, #4]
 8005364:	f003 0307 	and.w	r3, r3, #7
 8005368:	b29b      	uxth	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d002      	beq.n	8005374 <DISP_DrawChar+0x138>
            ptr++;
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	3301      	adds	r3, #1
 8005372:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8005374:	8bfb      	ldrh	r3, [r7, #30]
 8005376:	3301      	adds	r3, #1
 8005378:	83fb      	strh	r3, [r7, #30]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	88db      	ldrh	r3, [r3, #6]
 800537e:	8bfa      	ldrh	r2, [r7, #30]
 8005380:	429a      	cmp	r2, r3
 8005382:	d396      	bcc.n	80052b2 <DISP_DrawChar+0x76>
    }// Write all
}
 8005384:	3720      	adds	r7, #32
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	20000290 	.word	0x20000290
 8005390:	080061fc 	.word	0x080061fc

08005394 <DISP_DrawString>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void DISP_DrawString(uint16_t Xstart, uint16_t Ystart, const char * pString,
                         sFONT* Font, uint16_t Color_Background, uint16_t Color_Foreground )
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b088      	sub	sp, #32
 8005398:	af02      	add	r7, sp, #8
 800539a:	60ba      	str	r2, [r7, #8]
 800539c:	607b      	str	r3, [r7, #4]
 800539e:	4603      	mov	r3, r0
 80053a0:	81fb      	strh	r3, [r7, #14]
 80053a2:	460b      	mov	r3, r1
 80053a4:	81bb      	strh	r3, [r7, #12]
    uint16_t Xpoint = Xstart;
 80053a6:	89fb      	ldrh	r3, [r7, #14]
 80053a8:	82fb      	strh	r3, [r7, #22]
    uint16_t Ypoint = Ystart;
 80053aa:	89bb      	ldrh	r3, [r7, #12]
 80053ac:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 80053ae:	4b23      	ldr	r3, [pc, #140]	; (800543c <DISP_DrawString+0xa8>)
 80053b0:	889b      	ldrh	r3, [r3, #4]
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	89fa      	ldrh	r2, [r7, #14]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d805      	bhi.n	80053c6 <DISP_DrawString+0x32>
 80053ba:	4b20      	ldr	r3, [pc, #128]	; (800543c <DISP_DrawString+0xa8>)
 80053bc:	88db      	ldrh	r3, [r3, #6]
 80053be:	b29b      	uxth	r3, r3
 80053c0:	89ba      	ldrh	r2, [r7, #12]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d933      	bls.n	800542e <DISP_DrawString+0x9a>
        Debug("DISP_DrawString_EN Input exceeds the normal display range\r\n");
 80053c6:	481e      	ldr	r0, [pc, #120]	; (8005440 <DISP_DrawString+0xac>)
 80053c8:	f000 f98e 	bl	80056e8 <puts>
        return;
 80053cc:	e033      	b.n	8005436 <DISP_DrawString+0xa2>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 80053ce:	8afb      	ldrh	r3, [r7, #22]
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	8892      	ldrh	r2, [r2, #4]
 80053d4:	4413      	add	r3, r2
 80053d6:	4a19      	ldr	r2, [pc, #100]	; (800543c <DISP_DrawString+0xa8>)
 80053d8:	8892      	ldrh	r2, [r2, #4]
 80053da:	b292      	uxth	r2, r2
 80053dc:	4293      	cmp	r3, r2
 80053de:	dd06      	ble.n	80053ee <DISP_DrawString+0x5a>
            Xpoint = Xstart;
 80053e0:	89fb      	ldrh	r3, [r7, #14]
 80053e2:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	88da      	ldrh	r2, [r3, #6]
 80053e8:	8abb      	ldrh	r3, [r7, #20]
 80053ea:	4413      	add	r3, r2
 80053ec:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 80053ee:	8abb      	ldrh	r3, [r7, #20]
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	88d2      	ldrh	r2, [r2, #6]
 80053f4:	4413      	add	r3, r2
 80053f6:	4a11      	ldr	r2, [pc, #68]	; (800543c <DISP_DrawString+0xa8>)
 80053f8:	88d2      	ldrh	r2, [r2, #6]
 80053fa:	b292      	uxth	r2, r2
 80053fc:	4293      	cmp	r3, r2
 80053fe:	dd03      	ble.n	8005408 <DISP_DrawString+0x74>
            Xpoint = Xstart;
 8005400:	89fb      	ldrh	r3, [r7, #14]
 8005402:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8005404:	89bb      	ldrh	r3, [r7, #12]
 8005406:	82bb      	strh	r3, [r7, #20]
        }
        DISP_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	781a      	ldrb	r2, [r3, #0]
 800540c:	8ab9      	ldrh	r1, [r7, #20]
 800540e:	8af8      	ldrh	r0, [r7, #22]
 8005410:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005412:	9301      	str	r3, [sp, #4]
 8005414:	8c3b      	ldrh	r3, [r7, #32]
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f7ff ff0f 	bl	800523c <DISP_DrawChar>

        //The next character of the address
        pString ++;
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	3301      	adds	r3, #1
 8005422:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	889a      	ldrh	r2, [r3, #4]
 8005428:	8afb      	ldrh	r3, [r7, #22]
 800542a:	4413      	add	r3, r2
 800542c:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1cb      	bne.n	80053ce <DISP_DrawString+0x3a>
    }
}
 8005436:	3718      	adds	r7, #24
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	20000290 	.word	0x20000290
 8005440:	0800623c 	.word	0x0800623c

08005444 <DISP_DrawNum>:
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
#define  ARRAY_LEN 255
void DISP_DrawNum(uint16_t Xpoint, uint16_t Ypoint, int32_t Nummber,
                   sFONT* Font, uint16_t Color_Background, uint16_t Color_Foreground )
{
 8005444:	b590      	push	{r4, r7, lr}
 8005446:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 800544a:	af02      	add	r7, sp, #8
 800544c:	4604      	mov	r4, r0
 800544e:	4608      	mov	r0, r1
 8005450:	f107 0108 	add.w	r1, r7, #8
 8005454:	600a      	str	r2, [r1, #0]
 8005456:	1d3a      	adds	r2, r7, #4
 8005458:	6013      	str	r3, [r2, #0]
 800545a:	f107 030e 	add.w	r3, r7, #14
 800545e:	4622      	mov	r2, r4
 8005460:	801a      	strh	r2, [r3, #0]
 8005462:	f107 030c 	add.w	r3, r7, #12
 8005466:	4602      	mov	r2, r0
 8005468:	801a      	strh	r2, [r3, #0]
    int16_t Num_Bit = 0, Str_Bit = 0;
 800546a:	2300      	movs	r3, #0
 800546c:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8005470:	2300      	movs	r3, #0
 8005472:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
    uint8_t Str_Array[ARRAY_LEN] = {0}, Num_Array[ARRAY_LEN] = {0};
 8005476:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800547a:	4618      	mov	r0, r3
 800547c:	23ff      	movs	r3, #255	; 0xff
 800547e:	461a      	mov	r2, r3
 8005480:	2100      	movs	r1, #0
 8005482:	f000 f8cd 	bl	8005620 <memset>
 8005486:	f107 0310 	add.w	r3, r7, #16
 800548a:	4618      	mov	r0, r3
 800548c:	23ff      	movs	r3, #255	; 0xff
 800548e:	461a      	mov	r2, r3
 8005490:	2100      	movs	r1, #0
 8005492:	f000 f8c5 	bl	8005620 <memset>
    uint8_t *pStr = Str_Array;
 8005496:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800549a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800549e:	4b3b      	ldr	r3, [pc, #236]	; (800558c <DISP_DrawNum+0x148>)
 80054a0:	889b      	ldrh	r3, [r3, #4]
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	f107 020e 	add.w	r2, r7, #14
 80054a8:	8812      	ldrh	r2, [r2, #0]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d807      	bhi.n	80054be <DISP_DrawNum+0x7a>
 80054ae:	4b37      	ldr	r3, [pc, #220]	; (800558c <DISP_DrawNum+0x148>)
 80054b0:	88db      	ldrh	r3, [r3, #6]
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	f107 020c 	add.w	r2, r7, #12
 80054b8:	8812      	ldrh	r2, [r2, #0]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d903      	bls.n	80054c6 <DISP_DrawNum+0x82>
        Debug("DISP_DisNum Input exceeds the normal display range\r\n");
 80054be:	4834      	ldr	r0, [pc, #208]	; (8005590 <DISP_DrawNum+0x14c>)
 80054c0:	f000 f912 	bl	80056e8 <puts>
 80054c4:	e05d      	b.n	8005582 <DISP_DrawNum+0x13e>
        return;
    }

    //Converts a number to a string
     do{
        Num_Array[Num_Bit] = Nummber % 10 + '0';
 80054c6:	f107 0308 	add.w	r3, r7, #8
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	4b31      	ldr	r3, [pc, #196]	; (8005594 <DISP_DrawNum+0x150>)
 80054ce:	fb83 1302 	smull	r1, r3, r3, r2
 80054d2:	1099      	asrs	r1, r3, #2
 80054d4:	17d3      	asrs	r3, r2, #31
 80054d6:	1ac9      	subs	r1, r1, r3
 80054d8:	460b      	mov	r3, r1
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	440b      	add	r3, r1
 80054de:	005b      	lsls	r3, r3, #1
 80054e0:	1ad1      	subs	r1, r2, r3
 80054e2:	b2ca      	uxtb	r2, r1
 80054e4:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 80054e8:	3230      	adds	r2, #48	; 0x30
 80054ea:	b2d1      	uxtb	r1, r2
 80054ec:	f107 0210 	add.w	r2, r7, #16
 80054f0:	54d1      	strb	r1, [r2, r3]
        Num_Bit++;
 80054f2:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	3301      	adds	r3, #1
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
        Nummber /= 10;
 8005500:	f107 0208 	add.w	r2, r7, #8
 8005504:	f107 0308 	add.w	r3, r7, #8
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4922      	ldr	r1, [pc, #136]	; (8005594 <DISP_DrawNum+0x150>)
 800550c:	fb81 0103 	smull	r0, r1, r1, r3
 8005510:	1089      	asrs	r1, r1, #2
 8005512:	17db      	asrs	r3, r3, #31
 8005514:	1acb      	subs	r3, r1, r3
 8005516:	6013      	str	r3, [r2, #0]
    }while (Nummber);
 8005518:	f107 0308 	add.w	r3, r7, #8
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1d1      	bne.n	80054c6 <DISP_DrawNum+0x82>

    //The string is inverted
    while (Num_Bit > 0) {
 8005522:	e018      	b.n	8005556 <DISP_DrawNum+0x112>
        Str_Array[Str_Bit] = Num_Array[Num_Bit - 1];
 8005524:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 8005528:	1e5a      	subs	r2, r3, #1
 800552a:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	; 0x214
 800552e:	f107 0110 	add.w	r1, r7, #16
 8005532:	5c89      	ldrb	r1, [r1, r2]
 8005534:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005538:	54d1      	strb	r1, [r2, r3]
        Str_Bit ++;
 800553a:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	; 0x214
 800553e:	b29b      	uxth	r3, r3
 8005540:	3301      	adds	r3, #1
 8005542:	b29b      	uxth	r3, r3
 8005544:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
        Num_Bit --;
 8005548:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 800554c:	b29b      	uxth	r3, r3
 800554e:	3b01      	subs	r3, #1
 8005550:	b29b      	uxth	r3, r3
 8005552:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    while (Num_Bit > 0) {
 8005556:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 800555a:	2b00      	cmp	r3, #0
 800555c:	dce2      	bgt.n	8005524 <DISP_DrawNum+0xe0>
    }
    
    //show
    DISP_DrawString(Xpoint, Ypoint, (const char*)pStr, Font, Color_Background, Color_Foreground);
 800555e:	1d3b      	adds	r3, r7, #4
 8005560:	f107 020c 	add.w	r2, r7, #12
 8005564:	8811      	ldrh	r1, [r2, #0]
 8005566:	f107 020e 	add.w	r2, r7, #14
 800556a:	8810      	ldrh	r0, [r2, #0]
 800556c:	f8b7 222c 	ldrh.w	r2, [r7, #556]	; 0x22c
 8005570:	9201      	str	r2, [sp, #4]
 8005572:	f8b7 2228 	ldrh.w	r2, [r7, #552]	; 0x228
 8005576:	9200      	str	r2, [sp, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800557e:	f7ff ff09 	bl	8005394 <DISP_DrawString>
}
 8005582:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8005586:	46bd      	mov	sp, r7
 8005588:	bd90      	pop	{r4, r7, pc}
 800558a:	bf00      	nop
 800558c:	20000290 	.word	0x20000290
 8005590:	08006280 	.word	0x08006280
 8005594:	66666667 	.word	0x66666667

08005598 <__errno>:
 8005598:	4b01      	ldr	r3, [pc, #4]	; (80055a0 <__errno+0x8>)
 800559a:	6818      	ldr	r0, [r3, #0]
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	2000001c 	.word	0x2000001c

080055a4 <__libc_init_array>:
 80055a4:	b570      	push	{r4, r5, r6, lr}
 80055a6:	4e0d      	ldr	r6, [pc, #52]	; (80055dc <__libc_init_array+0x38>)
 80055a8:	4c0d      	ldr	r4, [pc, #52]	; (80055e0 <__libc_init_array+0x3c>)
 80055aa:	1ba4      	subs	r4, r4, r6
 80055ac:	10a4      	asrs	r4, r4, #2
 80055ae:	2500      	movs	r5, #0
 80055b0:	42a5      	cmp	r5, r4
 80055b2:	d109      	bne.n	80055c8 <__libc_init_array+0x24>
 80055b4:	4e0b      	ldr	r6, [pc, #44]	; (80055e4 <__libc_init_array+0x40>)
 80055b6:	4c0c      	ldr	r4, [pc, #48]	; (80055e8 <__libc_init_array+0x44>)
 80055b8:	f000 fce0 	bl	8005f7c <_init>
 80055bc:	1ba4      	subs	r4, r4, r6
 80055be:	10a4      	asrs	r4, r4, #2
 80055c0:	2500      	movs	r5, #0
 80055c2:	42a5      	cmp	r5, r4
 80055c4:	d105      	bne.n	80055d2 <__libc_init_array+0x2e>
 80055c6:	bd70      	pop	{r4, r5, r6, pc}
 80055c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055cc:	4798      	blx	r3
 80055ce:	3501      	adds	r5, #1
 80055d0:	e7ee      	b.n	80055b0 <__libc_init_array+0xc>
 80055d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055d6:	4798      	blx	r3
 80055d8:	3501      	adds	r5, #1
 80055da:	e7f2      	b.n	80055c2 <__libc_init_array+0x1e>
 80055dc:	08008d34 	.word	0x08008d34
 80055e0:	08008d34 	.word	0x08008d34
 80055e4:	08008d34 	.word	0x08008d34
 80055e8:	08008d38 	.word	0x08008d38

080055ec <__itoa>:
 80055ec:	1e93      	subs	r3, r2, #2
 80055ee:	2b22      	cmp	r3, #34	; 0x22
 80055f0:	b510      	push	{r4, lr}
 80055f2:	460c      	mov	r4, r1
 80055f4:	d904      	bls.n	8005600 <__itoa+0x14>
 80055f6:	2300      	movs	r3, #0
 80055f8:	700b      	strb	r3, [r1, #0]
 80055fa:	461c      	mov	r4, r3
 80055fc:	4620      	mov	r0, r4
 80055fe:	bd10      	pop	{r4, pc}
 8005600:	2a0a      	cmp	r2, #10
 8005602:	d109      	bne.n	8005618 <__itoa+0x2c>
 8005604:	2800      	cmp	r0, #0
 8005606:	da07      	bge.n	8005618 <__itoa+0x2c>
 8005608:	232d      	movs	r3, #45	; 0x2d
 800560a:	700b      	strb	r3, [r1, #0]
 800560c:	4240      	negs	r0, r0
 800560e:	2101      	movs	r1, #1
 8005610:	4421      	add	r1, r4
 8005612:	f000 f871 	bl	80056f8 <__utoa>
 8005616:	e7f1      	b.n	80055fc <__itoa+0x10>
 8005618:	2100      	movs	r1, #0
 800561a:	e7f9      	b.n	8005610 <__itoa+0x24>

0800561c <itoa>:
 800561c:	f7ff bfe6 	b.w	80055ec <__itoa>

08005620 <memset>:
 8005620:	4402      	add	r2, r0
 8005622:	4603      	mov	r3, r0
 8005624:	4293      	cmp	r3, r2
 8005626:	d100      	bne.n	800562a <memset+0xa>
 8005628:	4770      	bx	lr
 800562a:	f803 1b01 	strb.w	r1, [r3], #1
 800562e:	e7f9      	b.n	8005624 <memset+0x4>

08005630 <_puts_r>:
 8005630:	b570      	push	{r4, r5, r6, lr}
 8005632:	460e      	mov	r6, r1
 8005634:	4605      	mov	r5, r0
 8005636:	b118      	cbz	r0, 8005640 <_puts_r+0x10>
 8005638:	6983      	ldr	r3, [r0, #24]
 800563a:	b90b      	cbnz	r3, 8005640 <_puts_r+0x10>
 800563c:	f000 fa4a 	bl	8005ad4 <__sinit>
 8005640:	69ab      	ldr	r3, [r5, #24]
 8005642:	68ac      	ldr	r4, [r5, #8]
 8005644:	b913      	cbnz	r3, 800564c <_puts_r+0x1c>
 8005646:	4628      	mov	r0, r5
 8005648:	f000 fa44 	bl	8005ad4 <__sinit>
 800564c:	4b23      	ldr	r3, [pc, #140]	; (80056dc <_puts_r+0xac>)
 800564e:	429c      	cmp	r4, r3
 8005650:	d117      	bne.n	8005682 <_puts_r+0x52>
 8005652:	686c      	ldr	r4, [r5, #4]
 8005654:	89a3      	ldrh	r3, [r4, #12]
 8005656:	071b      	lsls	r3, r3, #28
 8005658:	d51d      	bpl.n	8005696 <_puts_r+0x66>
 800565a:	6923      	ldr	r3, [r4, #16]
 800565c:	b1db      	cbz	r3, 8005696 <_puts_r+0x66>
 800565e:	3e01      	subs	r6, #1
 8005660:	68a3      	ldr	r3, [r4, #8]
 8005662:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005666:	3b01      	subs	r3, #1
 8005668:	60a3      	str	r3, [r4, #8]
 800566a:	b9e9      	cbnz	r1, 80056a8 <_puts_r+0x78>
 800566c:	2b00      	cmp	r3, #0
 800566e:	da2e      	bge.n	80056ce <_puts_r+0x9e>
 8005670:	4622      	mov	r2, r4
 8005672:	210a      	movs	r1, #10
 8005674:	4628      	mov	r0, r5
 8005676:	f000 f87d 	bl	8005774 <__swbuf_r>
 800567a:	3001      	adds	r0, #1
 800567c:	d011      	beq.n	80056a2 <_puts_r+0x72>
 800567e:	200a      	movs	r0, #10
 8005680:	e011      	b.n	80056a6 <_puts_r+0x76>
 8005682:	4b17      	ldr	r3, [pc, #92]	; (80056e0 <_puts_r+0xb0>)
 8005684:	429c      	cmp	r4, r3
 8005686:	d101      	bne.n	800568c <_puts_r+0x5c>
 8005688:	68ac      	ldr	r4, [r5, #8]
 800568a:	e7e3      	b.n	8005654 <_puts_r+0x24>
 800568c:	4b15      	ldr	r3, [pc, #84]	; (80056e4 <_puts_r+0xb4>)
 800568e:	429c      	cmp	r4, r3
 8005690:	bf08      	it	eq
 8005692:	68ec      	ldreq	r4, [r5, #12]
 8005694:	e7de      	b.n	8005654 <_puts_r+0x24>
 8005696:	4621      	mov	r1, r4
 8005698:	4628      	mov	r0, r5
 800569a:	f000 f8bd 	bl	8005818 <__swsetup_r>
 800569e:	2800      	cmp	r0, #0
 80056a0:	d0dd      	beq.n	800565e <_puts_r+0x2e>
 80056a2:	f04f 30ff 	mov.w	r0, #4294967295
 80056a6:	bd70      	pop	{r4, r5, r6, pc}
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	da04      	bge.n	80056b6 <_puts_r+0x86>
 80056ac:	69a2      	ldr	r2, [r4, #24]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	dc06      	bgt.n	80056c0 <_puts_r+0x90>
 80056b2:	290a      	cmp	r1, #10
 80056b4:	d004      	beq.n	80056c0 <_puts_r+0x90>
 80056b6:	6823      	ldr	r3, [r4, #0]
 80056b8:	1c5a      	adds	r2, r3, #1
 80056ba:	6022      	str	r2, [r4, #0]
 80056bc:	7019      	strb	r1, [r3, #0]
 80056be:	e7cf      	b.n	8005660 <_puts_r+0x30>
 80056c0:	4622      	mov	r2, r4
 80056c2:	4628      	mov	r0, r5
 80056c4:	f000 f856 	bl	8005774 <__swbuf_r>
 80056c8:	3001      	adds	r0, #1
 80056ca:	d1c9      	bne.n	8005660 <_puts_r+0x30>
 80056cc:	e7e9      	b.n	80056a2 <_puts_r+0x72>
 80056ce:	6823      	ldr	r3, [r4, #0]
 80056d0:	200a      	movs	r0, #10
 80056d2:	1c5a      	adds	r2, r3, #1
 80056d4:	6022      	str	r2, [r4, #0]
 80056d6:	7018      	strb	r0, [r3, #0]
 80056d8:	e7e5      	b.n	80056a6 <_puts_r+0x76>
 80056da:	bf00      	nop
 80056dc:	08008cec 	.word	0x08008cec
 80056e0:	08008d0c 	.word	0x08008d0c
 80056e4:	08008ccc 	.word	0x08008ccc

080056e8 <puts>:
 80056e8:	4b02      	ldr	r3, [pc, #8]	; (80056f4 <puts+0xc>)
 80056ea:	4601      	mov	r1, r0
 80056ec:	6818      	ldr	r0, [r3, #0]
 80056ee:	f7ff bf9f 	b.w	8005630 <_puts_r>
 80056f2:	bf00      	nop
 80056f4:	2000001c 	.word	0x2000001c

080056f8 <__utoa>:
 80056f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056fa:	4b1d      	ldr	r3, [pc, #116]	; (8005770 <__utoa+0x78>)
 80056fc:	b08b      	sub	sp, #44	; 0x2c
 80056fe:	4605      	mov	r5, r0
 8005700:	460c      	mov	r4, r1
 8005702:	466e      	mov	r6, sp
 8005704:	f103 0c20 	add.w	ip, r3, #32
 8005708:	6818      	ldr	r0, [r3, #0]
 800570a:	6859      	ldr	r1, [r3, #4]
 800570c:	4637      	mov	r7, r6
 800570e:	c703      	stmia	r7!, {r0, r1}
 8005710:	3308      	adds	r3, #8
 8005712:	4563      	cmp	r3, ip
 8005714:	463e      	mov	r6, r7
 8005716:	d1f7      	bne.n	8005708 <__utoa+0x10>
 8005718:	6818      	ldr	r0, [r3, #0]
 800571a:	791b      	ldrb	r3, [r3, #4]
 800571c:	713b      	strb	r3, [r7, #4]
 800571e:	1e93      	subs	r3, r2, #2
 8005720:	2b22      	cmp	r3, #34	; 0x22
 8005722:	6038      	str	r0, [r7, #0]
 8005724:	f04f 0300 	mov.w	r3, #0
 8005728:	d904      	bls.n	8005734 <__utoa+0x3c>
 800572a:	7023      	strb	r3, [r4, #0]
 800572c:	461c      	mov	r4, r3
 800572e:	4620      	mov	r0, r4
 8005730:	b00b      	add	sp, #44	; 0x2c
 8005732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005734:	1e66      	subs	r6, r4, #1
 8005736:	fbb5 f0f2 	udiv	r0, r5, r2
 800573a:	af0a      	add	r7, sp, #40	; 0x28
 800573c:	fb02 5510 	mls	r5, r2, r0, r5
 8005740:	443d      	add	r5, r7
 8005742:	1c59      	adds	r1, r3, #1
 8005744:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8005748:	f806 5f01 	strb.w	r5, [r6, #1]!
 800574c:	4605      	mov	r5, r0
 800574e:	b968      	cbnz	r0, 800576c <__utoa+0x74>
 8005750:	5460      	strb	r0, [r4, r1]
 8005752:	4423      	add	r3, r4
 8005754:	4622      	mov	r2, r4
 8005756:	1b19      	subs	r1, r3, r4
 8005758:	1b10      	subs	r0, r2, r4
 800575a:	4281      	cmp	r1, r0
 800575c:	dde7      	ble.n	800572e <__utoa+0x36>
 800575e:	7811      	ldrb	r1, [r2, #0]
 8005760:	7818      	ldrb	r0, [r3, #0]
 8005762:	f802 0b01 	strb.w	r0, [r2], #1
 8005766:	f803 1901 	strb.w	r1, [r3], #-1
 800576a:	e7f4      	b.n	8005756 <__utoa+0x5e>
 800576c:	460b      	mov	r3, r1
 800576e:	e7e2      	b.n	8005736 <__utoa+0x3e>
 8005770:	08008ca4 	.word	0x08008ca4

08005774 <__swbuf_r>:
 8005774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005776:	460e      	mov	r6, r1
 8005778:	4614      	mov	r4, r2
 800577a:	4605      	mov	r5, r0
 800577c:	b118      	cbz	r0, 8005786 <__swbuf_r+0x12>
 800577e:	6983      	ldr	r3, [r0, #24]
 8005780:	b90b      	cbnz	r3, 8005786 <__swbuf_r+0x12>
 8005782:	f000 f9a7 	bl	8005ad4 <__sinit>
 8005786:	4b21      	ldr	r3, [pc, #132]	; (800580c <__swbuf_r+0x98>)
 8005788:	429c      	cmp	r4, r3
 800578a:	d12a      	bne.n	80057e2 <__swbuf_r+0x6e>
 800578c:	686c      	ldr	r4, [r5, #4]
 800578e:	69a3      	ldr	r3, [r4, #24]
 8005790:	60a3      	str	r3, [r4, #8]
 8005792:	89a3      	ldrh	r3, [r4, #12]
 8005794:	071a      	lsls	r2, r3, #28
 8005796:	d52e      	bpl.n	80057f6 <__swbuf_r+0x82>
 8005798:	6923      	ldr	r3, [r4, #16]
 800579a:	b363      	cbz	r3, 80057f6 <__swbuf_r+0x82>
 800579c:	6923      	ldr	r3, [r4, #16]
 800579e:	6820      	ldr	r0, [r4, #0]
 80057a0:	1ac0      	subs	r0, r0, r3
 80057a2:	6963      	ldr	r3, [r4, #20]
 80057a4:	b2f6      	uxtb	r6, r6
 80057a6:	4283      	cmp	r3, r0
 80057a8:	4637      	mov	r7, r6
 80057aa:	dc04      	bgt.n	80057b6 <__swbuf_r+0x42>
 80057ac:	4621      	mov	r1, r4
 80057ae:	4628      	mov	r0, r5
 80057b0:	f000 f926 	bl	8005a00 <_fflush_r>
 80057b4:	bb28      	cbnz	r0, 8005802 <__swbuf_r+0x8e>
 80057b6:	68a3      	ldr	r3, [r4, #8]
 80057b8:	3b01      	subs	r3, #1
 80057ba:	60a3      	str	r3, [r4, #8]
 80057bc:	6823      	ldr	r3, [r4, #0]
 80057be:	1c5a      	adds	r2, r3, #1
 80057c0:	6022      	str	r2, [r4, #0]
 80057c2:	701e      	strb	r6, [r3, #0]
 80057c4:	6963      	ldr	r3, [r4, #20]
 80057c6:	3001      	adds	r0, #1
 80057c8:	4283      	cmp	r3, r0
 80057ca:	d004      	beq.n	80057d6 <__swbuf_r+0x62>
 80057cc:	89a3      	ldrh	r3, [r4, #12]
 80057ce:	07db      	lsls	r3, r3, #31
 80057d0:	d519      	bpl.n	8005806 <__swbuf_r+0x92>
 80057d2:	2e0a      	cmp	r6, #10
 80057d4:	d117      	bne.n	8005806 <__swbuf_r+0x92>
 80057d6:	4621      	mov	r1, r4
 80057d8:	4628      	mov	r0, r5
 80057da:	f000 f911 	bl	8005a00 <_fflush_r>
 80057de:	b190      	cbz	r0, 8005806 <__swbuf_r+0x92>
 80057e0:	e00f      	b.n	8005802 <__swbuf_r+0x8e>
 80057e2:	4b0b      	ldr	r3, [pc, #44]	; (8005810 <__swbuf_r+0x9c>)
 80057e4:	429c      	cmp	r4, r3
 80057e6:	d101      	bne.n	80057ec <__swbuf_r+0x78>
 80057e8:	68ac      	ldr	r4, [r5, #8]
 80057ea:	e7d0      	b.n	800578e <__swbuf_r+0x1a>
 80057ec:	4b09      	ldr	r3, [pc, #36]	; (8005814 <__swbuf_r+0xa0>)
 80057ee:	429c      	cmp	r4, r3
 80057f0:	bf08      	it	eq
 80057f2:	68ec      	ldreq	r4, [r5, #12]
 80057f4:	e7cb      	b.n	800578e <__swbuf_r+0x1a>
 80057f6:	4621      	mov	r1, r4
 80057f8:	4628      	mov	r0, r5
 80057fa:	f000 f80d 	bl	8005818 <__swsetup_r>
 80057fe:	2800      	cmp	r0, #0
 8005800:	d0cc      	beq.n	800579c <__swbuf_r+0x28>
 8005802:	f04f 37ff 	mov.w	r7, #4294967295
 8005806:	4638      	mov	r0, r7
 8005808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800580a:	bf00      	nop
 800580c:	08008cec 	.word	0x08008cec
 8005810:	08008d0c 	.word	0x08008d0c
 8005814:	08008ccc 	.word	0x08008ccc

08005818 <__swsetup_r>:
 8005818:	4b32      	ldr	r3, [pc, #200]	; (80058e4 <__swsetup_r+0xcc>)
 800581a:	b570      	push	{r4, r5, r6, lr}
 800581c:	681d      	ldr	r5, [r3, #0]
 800581e:	4606      	mov	r6, r0
 8005820:	460c      	mov	r4, r1
 8005822:	b125      	cbz	r5, 800582e <__swsetup_r+0x16>
 8005824:	69ab      	ldr	r3, [r5, #24]
 8005826:	b913      	cbnz	r3, 800582e <__swsetup_r+0x16>
 8005828:	4628      	mov	r0, r5
 800582a:	f000 f953 	bl	8005ad4 <__sinit>
 800582e:	4b2e      	ldr	r3, [pc, #184]	; (80058e8 <__swsetup_r+0xd0>)
 8005830:	429c      	cmp	r4, r3
 8005832:	d10f      	bne.n	8005854 <__swsetup_r+0x3c>
 8005834:	686c      	ldr	r4, [r5, #4]
 8005836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800583a:	b29a      	uxth	r2, r3
 800583c:	0715      	lsls	r5, r2, #28
 800583e:	d42c      	bmi.n	800589a <__swsetup_r+0x82>
 8005840:	06d0      	lsls	r0, r2, #27
 8005842:	d411      	bmi.n	8005868 <__swsetup_r+0x50>
 8005844:	2209      	movs	r2, #9
 8005846:	6032      	str	r2, [r6, #0]
 8005848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800584c:	81a3      	strh	r3, [r4, #12]
 800584e:	f04f 30ff 	mov.w	r0, #4294967295
 8005852:	e03e      	b.n	80058d2 <__swsetup_r+0xba>
 8005854:	4b25      	ldr	r3, [pc, #148]	; (80058ec <__swsetup_r+0xd4>)
 8005856:	429c      	cmp	r4, r3
 8005858:	d101      	bne.n	800585e <__swsetup_r+0x46>
 800585a:	68ac      	ldr	r4, [r5, #8]
 800585c:	e7eb      	b.n	8005836 <__swsetup_r+0x1e>
 800585e:	4b24      	ldr	r3, [pc, #144]	; (80058f0 <__swsetup_r+0xd8>)
 8005860:	429c      	cmp	r4, r3
 8005862:	bf08      	it	eq
 8005864:	68ec      	ldreq	r4, [r5, #12]
 8005866:	e7e6      	b.n	8005836 <__swsetup_r+0x1e>
 8005868:	0751      	lsls	r1, r2, #29
 800586a:	d512      	bpl.n	8005892 <__swsetup_r+0x7a>
 800586c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800586e:	b141      	cbz	r1, 8005882 <__swsetup_r+0x6a>
 8005870:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005874:	4299      	cmp	r1, r3
 8005876:	d002      	beq.n	800587e <__swsetup_r+0x66>
 8005878:	4630      	mov	r0, r6
 800587a:	f000 fa19 	bl	8005cb0 <_free_r>
 800587e:	2300      	movs	r3, #0
 8005880:	6363      	str	r3, [r4, #52]	; 0x34
 8005882:	89a3      	ldrh	r3, [r4, #12]
 8005884:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005888:	81a3      	strh	r3, [r4, #12]
 800588a:	2300      	movs	r3, #0
 800588c:	6063      	str	r3, [r4, #4]
 800588e:	6923      	ldr	r3, [r4, #16]
 8005890:	6023      	str	r3, [r4, #0]
 8005892:	89a3      	ldrh	r3, [r4, #12]
 8005894:	f043 0308 	orr.w	r3, r3, #8
 8005898:	81a3      	strh	r3, [r4, #12]
 800589a:	6923      	ldr	r3, [r4, #16]
 800589c:	b94b      	cbnz	r3, 80058b2 <__swsetup_r+0x9a>
 800589e:	89a3      	ldrh	r3, [r4, #12]
 80058a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80058a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058a8:	d003      	beq.n	80058b2 <__swsetup_r+0x9a>
 80058aa:	4621      	mov	r1, r4
 80058ac:	4630      	mov	r0, r6
 80058ae:	f000 f9bf 	bl	8005c30 <__smakebuf_r>
 80058b2:	89a2      	ldrh	r2, [r4, #12]
 80058b4:	f012 0301 	ands.w	r3, r2, #1
 80058b8:	d00c      	beq.n	80058d4 <__swsetup_r+0xbc>
 80058ba:	2300      	movs	r3, #0
 80058bc:	60a3      	str	r3, [r4, #8]
 80058be:	6963      	ldr	r3, [r4, #20]
 80058c0:	425b      	negs	r3, r3
 80058c2:	61a3      	str	r3, [r4, #24]
 80058c4:	6923      	ldr	r3, [r4, #16]
 80058c6:	b953      	cbnz	r3, 80058de <__swsetup_r+0xc6>
 80058c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058cc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80058d0:	d1ba      	bne.n	8005848 <__swsetup_r+0x30>
 80058d2:	bd70      	pop	{r4, r5, r6, pc}
 80058d4:	0792      	lsls	r2, r2, #30
 80058d6:	bf58      	it	pl
 80058d8:	6963      	ldrpl	r3, [r4, #20]
 80058da:	60a3      	str	r3, [r4, #8]
 80058dc:	e7f2      	b.n	80058c4 <__swsetup_r+0xac>
 80058de:	2000      	movs	r0, #0
 80058e0:	e7f7      	b.n	80058d2 <__swsetup_r+0xba>
 80058e2:	bf00      	nop
 80058e4:	2000001c 	.word	0x2000001c
 80058e8:	08008cec 	.word	0x08008cec
 80058ec:	08008d0c 	.word	0x08008d0c
 80058f0:	08008ccc 	.word	0x08008ccc

080058f4 <__sflush_r>:
 80058f4:	898a      	ldrh	r2, [r1, #12]
 80058f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058fa:	4605      	mov	r5, r0
 80058fc:	0710      	lsls	r0, r2, #28
 80058fe:	460c      	mov	r4, r1
 8005900:	d458      	bmi.n	80059b4 <__sflush_r+0xc0>
 8005902:	684b      	ldr	r3, [r1, #4]
 8005904:	2b00      	cmp	r3, #0
 8005906:	dc05      	bgt.n	8005914 <__sflush_r+0x20>
 8005908:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800590a:	2b00      	cmp	r3, #0
 800590c:	dc02      	bgt.n	8005914 <__sflush_r+0x20>
 800590e:	2000      	movs	r0, #0
 8005910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005914:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005916:	2e00      	cmp	r6, #0
 8005918:	d0f9      	beq.n	800590e <__sflush_r+0x1a>
 800591a:	2300      	movs	r3, #0
 800591c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005920:	682f      	ldr	r7, [r5, #0]
 8005922:	6a21      	ldr	r1, [r4, #32]
 8005924:	602b      	str	r3, [r5, #0]
 8005926:	d032      	beq.n	800598e <__sflush_r+0x9a>
 8005928:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800592a:	89a3      	ldrh	r3, [r4, #12]
 800592c:	075a      	lsls	r2, r3, #29
 800592e:	d505      	bpl.n	800593c <__sflush_r+0x48>
 8005930:	6863      	ldr	r3, [r4, #4]
 8005932:	1ac0      	subs	r0, r0, r3
 8005934:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005936:	b10b      	cbz	r3, 800593c <__sflush_r+0x48>
 8005938:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800593a:	1ac0      	subs	r0, r0, r3
 800593c:	2300      	movs	r3, #0
 800593e:	4602      	mov	r2, r0
 8005940:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005942:	6a21      	ldr	r1, [r4, #32]
 8005944:	4628      	mov	r0, r5
 8005946:	47b0      	blx	r6
 8005948:	1c43      	adds	r3, r0, #1
 800594a:	89a3      	ldrh	r3, [r4, #12]
 800594c:	d106      	bne.n	800595c <__sflush_r+0x68>
 800594e:	6829      	ldr	r1, [r5, #0]
 8005950:	291d      	cmp	r1, #29
 8005952:	d848      	bhi.n	80059e6 <__sflush_r+0xf2>
 8005954:	4a29      	ldr	r2, [pc, #164]	; (80059fc <__sflush_r+0x108>)
 8005956:	40ca      	lsrs	r2, r1
 8005958:	07d6      	lsls	r6, r2, #31
 800595a:	d544      	bpl.n	80059e6 <__sflush_r+0xf2>
 800595c:	2200      	movs	r2, #0
 800595e:	6062      	str	r2, [r4, #4]
 8005960:	04d9      	lsls	r1, r3, #19
 8005962:	6922      	ldr	r2, [r4, #16]
 8005964:	6022      	str	r2, [r4, #0]
 8005966:	d504      	bpl.n	8005972 <__sflush_r+0x7e>
 8005968:	1c42      	adds	r2, r0, #1
 800596a:	d101      	bne.n	8005970 <__sflush_r+0x7c>
 800596c:	682b      	ldr	r3, [r5, #0]
 800596e:	b903      	cbnz	r3, 8005972 <__sflush_r+0x7e>
 8005970:	6560      	str	r0, [r4, #84]	; 0x54
 8005972:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005974:	602f      	str	r7, [r5, #0]
 8005976:	2900      	cmp	r1, #0
 8005978:	d0c9      	beq.n	800590e <__sflush_r+0x1a>
 800597a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800597e:	4299      	cmp	r1, r3
 8005980:	d002      	beq.n	8005988 <__sflush_r+0x94>
 8005982:	4628      	mov	r0, r5
 8005984:	f000 f994 	bl	8005cb0 <_free_r>
 8005988:	2000      	movs	r0, #0
 800598a:	6360      	str	r0, [r4, #52]	; 0x34
 800598c:	e7c0      	b.n	8005910 <__sflush_r+0x1c>
 800598e:	2301      	movs	r3, #1
 8005990:	4628      	mov	r0, r5
 8005992:	47b0      	blx	r6
 8005994:	1c41      	adds	r1, r0, #1
 8005996:	d1c8      	bne.n	800592a <__sflush_r+0x36>
 8005998:	682b      	ldr	r3, [r5, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d0c5      	beq.n	800592a <__sflush_r+0x36>
 800599e:	2b1d      	cmp	r3, #29
 80059a0:	d001      	beq.n	80059a6 <__sflush_r+0xb2>
 80059a2:	2b16      	cmp	r3, #22
 80059a4:	d101      	bne.n	80059aa <__sflush_r+0xb6>
 80059a6:	602f      	str	r7, [r5, #0]
 80059a8:	e7b1      	b.n	800590e <__sflush_r+0x1a>
 80059aa:	89a3      	ldrh	r3, [r4, #12]
 80059ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059b0:	81a3      	strh	r3, [r4, #12]
 80059b2:	e7ad      	b.n	8005910 <__sflush_r+0x1c>
 80059b4:	690f      	ldr	r7, [r1, #16]
 80059b6:	2f00      	cmp	r7, #0
 80059b8:	d0a9      	beq.n	800590e <__sflush_r+0x1a>
 80059ba:	0793      	lsls	r3, r2, #30
 80059bc:	680e      	ldr	r6, [r1, #0]
 80059be:	bf08      	it	eq
 80059c0:	694b      	ldreq	r3, [r1, #20]
 80059c2:	600f      	str	r7, [r1, #0]
 80059c4:	bf18      	it	ne
 80059c6:	2300      	movne	r3, #0
 80059c8:	eba6 0807 	sub.w	r8, r6, r7
 80059cc:	608b      	str	r3, [r1, #8]
 80059ce:	f1b8 0f00 	cmp.w	r8, #0
 80059d2:	dd9c      	ble.n	800590e <__sflush_r+0x1a>
 80059d4:	4643      	mov	r3, r8
 80059d6:	463a      	mov	r2, r7
 80059d8:	6a21      	ldr	r1, [r4, #32]
 80059da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80059dc:	4628      	mov	r0, r5
 80059de:	47b0      	blx	r6
 80059e0:	2800      	cmp	r0, #0
 80059e2:	dc06      	bgt.n	80059f2 <__sflush_r+0xfe>
 80059e4:	89a3      	ldrh	r3, [r4, #12]
 80059e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059ea:	81a3      	strh	r3, [r4, #12]
 80059ec:	f04f 30ff 	mov.w	r0, #4294967295
 80059f0:	e78e      	b.n	8005910 <__sflush_r+0x1c>
 80059f2:	4407      	add	r7, r0
 80059f4:	eba8 0800 	sub.w	r8, r8, r0
 80059f8:	e7e9      	b.n	80059ce <__sflush_r+0xda>
 80059fa:	bf00      	nop
 80059fc:	20400001 	.word	0x20400001

08005a00 <_fflush_r>:
 8005a00:	b538      	push	{r3, r4, r5, lr}
 8005a02:	690b      	ldr	r3, [r1, #16]
 8005a04:	4605      	mov	r5, r0
 8005a06:	460c      	mov	r4, r1
 8005a08:	b1db      	cbz	r3, 8005a42 <_fflush_r+0x42>
 8005a0a:	b118      	cbz	r0, 8005a14 <_fflush_r+0x14>
 8005a0c:	6983      	ldr	r3, [r0, #24]
 8005a0e:	b90b      	cbnz	r3, 8005a14 <_fflush_r+0x14>
 8005a10:	f000 f860 	bl	8005ad4 <__sinit>
 8005a14:	4b0c      	ldr	r3, [pc, #48]	; (8005a48 <_fflush_r+0x48>)
 8005a16:	429c      	cmp	r4, r3
 8005a18:	d109      	bne.n	8005a2e <_fflush_r+0x2e>
 8005a1a:	686c      	ldr	r4, [r5, #4]
 8005a1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a20:	b17b      	cbz	r3, 8005a42 <_fflush_r+0x42>
 8005a22:	4621      	mov	r1, r4
 8005a24:	4628      	mov	r0, r5
 8005a26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a2a:	f7ff bf63 	b.w	80058f4 <__sflush_r>
 8005a2e:	4b07      	ldr	r3, [pc, #28]	; (8005a4c <_fflush_r+0x4c>)
 8005a30:	429c      	cmp	r4, r3
 8005a32:	d101      	bne.n	8005a38 <_fflush_r+0x38>
 8005a34:	68ac      	ldr	r4, [r5, #8]
 8005a36:	e7f1      	b.n	8005a1c <_fflush_r+0x1c>
 8005a38:	4b05      	ldr	r3, [pc, #20]	; (8005a50 <_fflush_r+0x50>)
 8005a3a:	429c      	cmp	r4, r3
 8005a3c:	bf08      	it	eq
 8005a3e:	68ec      	ldreq	r4, [r5, #12]
 8005a40:	e7ec      	b.n	8005a1c <_fflush_r+0x1c>
 8005a42:	2000      	movs	r0, #0
 8005a44:	bd38      	pop	{r3, r4, r5, pc}
 8005a46:	bf00      	nop
 8005a48:	08008cec 	.word	0x08008cec
 8005a4c:	08008d0c 	.word	0x08008d0c
 8005a50:	08008ccc 	.word	0x08008ccc

08005a54 <std>:
 8005a54:	2300      	movs	r3, #0
 8005a56:	b510      	push	{r4, lr}
 8005a58:	4604      	mov	r4, r0
 8005a5a:	e9c0 3300 	strd	r3, r3, [r0]
 8005a5e:	6083      	str	r3, [r0, #8]
 8005a60:	8181      	strh	r1, [r0, #12]
 8005a62:	6643      	str	r3, [r0, #100]	; 0x64
 8005a64:	81c2      	strh	r2, [r0, #14]
 8005a66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a6a:	6183      	str	r3, [r0, #24]
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	2208      	movs	r2, #8
 8005a70:	305c      	adds	r0, #92	; 0x5c
 8005a72:	f7ff fdd5 	bl	8005620 <memset>
 8005a76:	4b05      	ldr	r3, [pc, #20]	; (8005a8c <std+0x38>)
 8005a78:	6263      	str	r3, [r4, #36]	; 0x24
 8005a7a:	4b05      	ldr	r3, [pc, #20]	; (8005a90 <std+0x3c>)
 8005a7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a7e:	4b05      	ldr	r3, [pc, #20]	; (8005a94 <std+0x40>)
 8005a80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a82:	4b05      	ldr	r3, [pc, #20]	; (8005a98 <std+0x44>)
 8005a84:	6224      	str	r4, [r4, #32]
 8005a86:	6323      	str	r3, [r4, #48]	; 0x30
 8005a88:	bd10      	pop	{r4, pc}
 8005a8a:	bf00      	nop
 8005a8c:	08005e21 	.word	0x08005e21
 8005a90:	08005e43 	.word	0x08005e43
 8005a94:	08005e7b 	.word	0x08005e7b
 8005a98:	08005e9f 	.word	0x08005e9f

08005a9c <_cleanup_r>:
 8005a9c:	4901      	ldr	r1, [pc, #4]	; (8005aa4 <_cleanup_r+0x8>)
 8005a9e:	f000 b885 	b.w	8005bac <_fwalk_reent>
 8005aa2:	bf00      	nop
 8005aa4:	08005a01 	.word	0x08005a01

08005aa8 <__sfmoreglue>:
 8005aa8:	b570      	push	{r4, r5, r6, lr}
 8005aaa:	1e4a      	subs	r2, r1, #1
 8005aac:	2568      	movs	r5, #104	; 0x68
 8005aae:	4355      	muls	r5, r2
 8005ab0:	460e      	mov	r6, r1
 8005ab2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005ab6:	f000 f949 	bl	8005d4c <_malloc_r>
 8005aba:	4604      	mov	r4, r0
 8005abc:	b140      	cbz	r0, 8005ad0 <__sfmoreglue+0x28>
 8005abe:	2100      	movs	r1, #0
 8005ac0:	e9c0 1600 	strd	r1, r6, [r0]
 8005ac4:	300c      	adds	r0, #12
 8005ac6:	60a0      	str	r0, [r4, #8]
 8005ac8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005acc:	f7ff fda8 	bl	8005620 <memset>
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	bd70      	pop	{r4, r5, r6, pc}

08005ad4 <__sinit>:
 8005ad4:	6983      	ldr	r3, [r0, #24]
 8005ad6:	b510      	push	{r4, lr}
 8005ad8:	4604      	mov	r4, r0
 8005ada:	bb33      	cbnz	r3, 8005b2a <__sinit+0x56>
 8005adc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005ae0:	6503      	str	r3, [r0, #80]	; 0x50
 8005ae2:	4b12      	ldr	r3, [pc, #72]	; (8005b2c <__sinit+0x58>)
 8005ae4:	4a12      	ldr	r2, [pc, #72]	; (8005b30 <__sinit+0x5c>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	6282      	str	r2, [r0, #40]	; 0x28
 8005aea:	4298      	cmp	r0, r3
 8005aec:	bf04      	itt	eq
 8005aee:	2301      	moveq	r3, #1
 8005af0:	6183      	streq	r3, [r0, #24]
 8005af2:	f000 f81f 	bl	8005b34 <__sfp>
 8005af6:	6060      	str	r0, [r4, #4]
 8005af8:	4620      	mov	r0, r4
 8005afa:	f000 f81b 	bl	8005b34 <__sfp>
 8005afe:	60a0      	str	r0, [r4, #8]
 8005b00:	4620      	mov	r0, r4
 8005b02:	f000 f817 	bl	8005b34 <__sfp>
 8005b06:	2200      	movs	r2, #0
 8005b08:	60e0      	str	r0, [r4, #12]
 8005b0a:	2104      	movs	r1, #4
 8005b0c:	6860      	ldr	r0, [r4, #4]
 8005b0e:	f7ff ffa1 	bl	8005a54 <std>
 8005b12:	2201      	movs	r2, #1
 8005b14:	2109      	movs	r1, #9
 8005b16:	68a0      	ldr	r0, [r4, #8]
 8005b18:	f7ff ff9c 	bl	8005a54 <std>
 8005b1c:	2202      	movs	r2, #2
 8005b1e:	2112      	movs	r1, #18
 8005b20:	68e0      	ldr	r0, [r4, #12]
 8005b22:	f7ff ff97 	bl	8005a54 <std>
 8005b26:	2301      	movs	r3, #1
 8005b28:	61a3      	str	r3, [r4, #24]
 8005b2a:	bd10      	pop	{r4, pc}
 8005b2c:	08008ca0 	.word	0x08008ca0
 8005b30:	08005a9d 	.word	0x08005a9d

08005b34 <__sfp>:
 8005b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b36:	4b1b      	ldr	r3, [pc, #108]	; (8005ba4 <__sfp+0x70>)
 8005b38:	681e      	ldr	r6, [r3, #0]
 8005b3a:	69b3      	ldr	r3, [r6, #24]
 8005b3c:	4607      	mov	r7, r0
 8005b3e:	b913      	cbnz	r3, 8005b46 <__sfp+0x12>
 8005b40:	4630      	mov	r0, r6
 8005b42:	f7ff ffc7 	bl	8005ad4 <__sinit>
 8005b46:	3648      	adds	r6, #72	; 0x48
 8005b48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	d503      	bpl.n	8005b58 <__sfp+0x24>
 8005b50:	6833      	ldr	r3, [r6, #0]
 8005b52:	b133      	cbz	r3, 8005b62 <__sfp+0x2e>
 8005b54:	6836      	ldr	r6, [r6, #0]
 8005b56:	e7f7      	b.n	8005b48 <__sfp+0x14>
 8005b58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005b5c:	b16d      	cbz	r5, 8005b7a <__sfp+0x46>
 8005b5e:	3468      	adds	r4, #104	; 0x68
 8005b60:	e7f4      	b.n	8005b4c <__sfp+0x18>
 8005b62:	2104      	movs	r1, #4
 8005b64:	4638      	mov	r0, r7
 8005b66:	f7ff ff9f 	bl	8005aa8 <__sfmoreglue>
 8005b6a:	6030      	str	r0, [r6, #0]
 8005b6c:	2800      	cmp	r0, #0
 8005b6e:	d1f1      	bne.n	8005b54 <__sfp+0x20>
 8005b70:	230c      	movs	r3, #12
 8005b72:	603b      	str	r3, [r7, #0]
 8005b74:	4604      	mov	r4, r0
 8005b76:	4620      	mov	r0, r4
 8005b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b7a:	4b0b      	ldr	r3, [pc, #44]	; (8005ba8 <__sfp+0x74>)
 8005b7c:	6665      	str	r5, [r4, #100]	; 0x64
 8005b7e:	e9c4 5500 	strd	r5, r5, [r4]
 8005b82:	60a5      	str	r5, [r4, #8]
 8005b84:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005b88:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005b8c:	2208      	movs	r2, #8
 8005b8e:	4629      	mov	r1, r5
 8005b90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005b94:	f7ff fd44 	bl	8005620 <memset>
 8005b98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005b9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ba0:	e7e9      	b.n	8005b76 <__sfp+0x42>
 8005ba2:	bf00      	nop
 8005ba4:	08008ca0 	.word	0x08008ca0
 8005ba8:	ffff0001 	.word	0xffff0001

08005bac <_fwalk_reent>:
 8005bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bb0:	4680      	mov	r8, r0
 8005bb2:	4689      	mov	r9, r1
 8005bb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005bb8:	2600      	movs	r6, #0
 8005bba:	b914      	cbnz	r4, 8005bc2 <_fwalk_reent+0x16>
 8005bbc:	4630      	mov	r0, r6
 8005bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bc2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005bc6:	3f01      	subs	r7, #1
 8005bc8:	d501      	bpl.n	8005bce <_fwalk_reent+0x22>
 8005bca:	6824      	ldr	r4, [r4, #0]
 8005bcc:	e7f5      	b.n	8005bba <_fwalk_reent+0xe>
 8005bce:	89ab      	ldrh	r3, [r5, #12]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d907      	bls.n	8005be4 <_fwalk_reent+0x38>
 8005bd4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	d003      	beq.n	8005be4 <_fwalk_reent+0x38>
 8005bdc:	4629      	mov	r1, r5
 8005bde:	4640      	mov	r0, r8
 8005be0:	47c8      	blx	r9
 8005be2:	4306      	orrs	r6, r0
 8005be4:	3568      	adds	r5, #104	; 0x68
 8005be6:	e7ee      	b.n	8005bc6 <_fwalk_reent+0x1a>

08005be8 <__swhatbuf_r>:
 8005be8:	b570      	push	{r4, r5, r6, lr}
 8005bea:	460e      	mov	r6, r1
 8005bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bf0:	2900      	cmp	r1, #0
 8005bf2:	b096      	sub	sp, #88	; 0x58
 8005bf4:	4614      	mov	r4, r2
 8005bf6:	461d      	mov	r5, r3
 8005bf8:	da07      	bge.n	8005c0a <__swhatbuf_r+0x22>
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	602b      	str	r3, [r5, #0]
 8005bfe:	89b3      	ldrh	r3, [r6, #12]
 8005c00:	061a      	lsls	r2, r3, #24
 8005c02:	d410      	bmi.n	8005c26 <__swhatbuf_r+0x3e>
 8005c04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c08:	e00e      	b.n	8005c28 <__swhatbuf_r+0x40>
 8005c0a:	466a      	mov	r2, sp
 8005c0c:	f000 f96e 	bl	8005eec <_fstat_r>
 8005c10:	2800      	cmp	r0, #0
 8005c12:	dbf2      	blt.n	8005bfa <__swhatbuf_r+0x12>
 8005c14:	9a01      	ldr	r2, [sp, #4]
 8005c16:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005c1a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005c1e:	425a      	negs	r2, r3
 8005c20:	415a      	adcs	r2, r3
 8005c22:	602a      	str	r2, [r5, #0]
 8005c24:	e7ee      	b.n	8005c04 <__swhatbuf_r+0x1c>
 8005c26:	2340      	movs	r3, #64	; 0x40
 8005c28:	2000      	movs	r0, #0
 8005c2a:	6023      	str	r3, [r4, #0]
 8005c2c:	b016      	add	sp, #88	; 0x58
 8005c2e:	bd70      	pop	{r4, r5, r6, pc}

08005c30 <__smakebuf_r>:
 8005c30:	898b      	ldrh	r3, [r1, #12]
 8005c32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c34:	079d      	lsls	r5, r3, #30
 8005c36:	4606      	mov	r6, r0
 8005c38:	460c      	mov	r4, r1
 8005c3a:	d507      	bpl.n	8005c4c <__smakebuf_r+0x1c>
 8005c3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005c40:	6023      	str	r3, [r4, #0]
 8005c42:	6123      	str	r3, [r4, #16]
 8005c44:	2301      	movs	r3, #1
 8005c46:	6163      	str	r3, [r4, #20]
 8005c48:	b002      	add	sp, #8
 8005c4a:	bd70      	pop	{r4, r5, r6, pc}
 8005c4c:	ab01      	add	r3, sp, #4
 8005c4e:	466a      	mov	r2, sp
 8005c50:	f7ff ffca 	bl	8005be8 <__swhatbuf_r>
 8005c54:	9900      	ldr	r1, [sp, #0]
 8005c56:	4605      	mov	r5, r0
 8005c58:	4630      	mov	r0, r6
 8005c5a:	f000 f877 	bl	8005d4c <_malloc_r>
 8005c5e:	b948      	cbnz	r0, 8005c74 <__smakebuf_r+0x44>
 8005c60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c64:	059a      	lsls	r2, r3, #22
 8005c66:	d4ef      	bmi.n	8005c48 <__smakebuf_r+0x18>
 8005c68:	f023 0303 	bic.w	r3, r3, #3
 8005c6c:	f043 0302 	orr.w	r3, r3, #2
 8005c70:	81a3      	strh	r3, [r4, #12]
 8005c72:	e7e3      	b.n	8005c3c <__smakebuf_r+0xc>
 8005c74:	4b0d      	ldr	r3, [pc, #52]	; (8005cac <__smakebuf_r+0x7c>)
 8005c76:	62b3      	str	r3, [r6, #40]	; 0x28
 8005c78:	89a3      	ldrh	r3, [r4, #12]
 8005c7a:	6020      	str	r0, [r4, #0]
 8005c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c80:	81a3      	strh	r3, [r4, #12]
 8005c82:	9b00      	ldr	r3, [sp, #0]
 8005c84:	6163      	str	r3, [r4, #20]
 8005c86:	9b01      	ldr	r3, [sp, #4]
 8005c88:	6120      	str	r0, [r4, #16]
 8005c8a:	b15b      	cbz	r3, 8005ca4 <__smakebuf_r+0x74>
 8005c8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c90:	4630      	mov	r0, r6
 8005c92:	f000 f93d 	bl	8005f10 <_isatty_r>
 8005c96:	b128      	cbz	r0, 8005ca4 <__smakebuf_r+0x74>
 8005c98:	89a3      	ldrh	r3, [r4, #12]
 8005c9a:	f023 0303 	bic.w	r3, r3, #3
 8005c9e:	f043 0301 	orr.w	r3, r3, #1
 8005ca2:	81a3      	strh	r3, [r4, #12]
 8005ca4:	89a3      	ldrh	r3, [r4, #12]
 8005ca6:	431d      	orrs	r5, r3
 8005ca8:	81a5      	strh	r5, [r4, #12]
 8005caa:	e7cd      	b.n	8005c48 <__smakebuf_r+0x18>
 8005cac:	08005a9d 	.word	0x08005a9d

08005cb0 <_free_r>:
 8005cb0:	b538      	push	{r3, r4, r5, lr}
 8005cb2:	4605      	mov	r5, r0
 8005cb4:	2900      	cmp	r1, #0
 8005cb6:	d045      	beq.n	8005d44 <_free_r+0x94>
 8005cb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cbc:	1f0c      	subs	r4, r1, #4
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	bfb8      	it	lt
 8005cc2:	18e4      	addlt	r4, r4, r3
 8005cc4:	f000 f946 	bl	8005f54 <__malloc_lock>
 8005cc8:	4a1f      	ldr	r2, [pc, #124]	; (8005d48 <_free_r+0x98>)
 8005cca:	6813      	ldr	r3, [r2, #0]
 8005ccc:	4610      	mov	r0, r2
 8005cce:	b933      	cbnz	r3, 8005cde <_free_r+0x2e>
 8005cd0:	6063      	str	r3, [r4, #4]
 8005cd2:	6014      	str	r4, [r2, #0]
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cda:	f000 b93c 	b.w	8005f56 <__malloc_unlock>
 8005cde:	42a3      	cmp	r3, r4
 8005ce0:	d90c      	bls.n	8005cfc <_free_r+0x4c>
 8005ce2:	6821      	ldr	r1, [r4, #0]
 8005ce4:	1862      	adds	r2, r4, r1
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	bf04      	itt	eq
 8005cea:	681a      	ldreq	r2, [r3, #0]
 8005cec:	685b      	ldreq	r3, [r3, #4]
 8005cee:	6063      	str	r3, [r4, #4]
 8005cf0:	bf04      	itt	eq
 8005cf2:	1852      	addeq	r2, r2, r1
 8005cf4:	6022      	streq	r2, [r4, #0]
 8005cf6:	6004      	str	r4, [r0, #0]
 8005cf8:	e7ec      	b.n	8005cd4 <_free_r+0x24>
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	b10a      	cbz	r2, 8005d04 <_free_r+0x54>
 8005d00:	42a2      	cmp	r2, r4
 8005d02:	d9fa      	bls.n	8005cfa <_free_r+0x4a>
 8005d04:	6819      	ldr	r1, [r3, #0]
 8005d06:	1858      	adds	r0, r3, r1
 8005d08:	42a0      	cmp	r0, r4
 8005d0a:	d10b      	bne.n	8005d24 <_free_r+0x74>
 8005d0c:	6820      	ldr	r0, [r4, #0]
 8005d0e:	4401      	add	r1, r0
 8005d10:	1858      	adds	r0, r3, r1
 8005d12:	4282      	cmp	r2, r0
 8005d14:	6019      	str	r1, [r3, #0]
 8005d16:	d1dd      	bne.n	8005cd4 <_free_r+0x24>
 8005d18:	6810      	ldr	r0, [r2, #0]
 8005d1a:	6852      	ldr	r2, [r2, #4]
 8005d1c:	605a      	str	r2, [r3, #4]
 8005d1e:	4401      	add	r1, r0
 8005d20:	6019      	str	r1, [r3, #0]
 8005d22:	e7d7      	b.n	8005cd4 <_free_r+0x24>
 8005d24:	d902      	bls.n	8005d2c <_free_r+0x7c>
 8005d26:	230c      	movs	r3, #12
 8005d28:	602b      	str	r3, [r5, #0]
 8005d2a:	e7d3      	b.n	8005cd4 <_free_r+0x24>
 8005d2c:	6820      	ldr	r0, [r4, #0]
 8005d2e:	1821      	adds	r1, r4, r0
 8005d30:	428a      	cmp	r2, r1
 8005d32:	bf04      	itt	eq
 8005d34:	6811      	ldreq	r1, [r2, #0]
 8005d36:	6852      	ldreq	r2, [r2, #4]
 8005d38:	6062      	str	r2, [r4, #4]
 8005d3a:	bf04      	itt	eq
 8005d3c:	1809      	addeq	r1, r1, r0
 8005d3e:	6021      	streq	r1, [r4, #0]
 8005d40:	605c      	str	r4, [r3, #4]
 8005d42:	e7c7      	b.n	8005cd4 <_free_r+0x24>
 8005d44:	bd38      	pop	{r3, r4, r5, pc}
 8005d46:	bf00      	nop
 8005d48:	200000a0 	.word	0x200000a0

08005d4c <_malloc_r>:
 8005d4c:	b570      	push	{r4, r5, r6, lr}
 8005d4e:	1ccd      	adds	r5, r1, #3
 8005d50:	f025 0503 	bic.w	r5, r5, #3
 8005d54:	3508      	adds	r5, #8
 8005d56:	2d0c      	cmp	r5, #12
 8005d58:	bf38      	it	cc
 8005d5a:	250c      	movcc	r5, #12
 8005d5c:	2d00      	cmp	r5, #0
 8005d5e:	4606      	mov	r6, r0
 8005d60:	db01      	blt.n	8005d66 <_malloc_r+0x1a>
 8005d62:	42a9      	cmp	r1, r5
 8005d64:	d903      	bls.n	8005d6e <_malloc_r+0x22>
 8005d66:	230c      	movs	r3, #12
 8005d68:	6033      	str	r3, [r6, #0]
 8005d6a:	2000      	movs	r0, #0
 8005d6c:	bd70      	pop	{r4, r5, r6, pc}
 8005d6e:	f000 f8f1 	bl	8005f54 <__malloc_lock>
 8005d72:	4a21      	ldr	r2, [pc, #132]	; (8005df8 <_malloc_r+0xac>)
 8005d74:	6814      	ldr	r4, [r2, #0]
 8005d76:	4621      	mov	r1, r4
 8005d78:	b991      	cbnz	r1, 8005da0 <_malloc_r+0x54>
 8005d7a:	4c20      	ldr	r4, [pc, #128]	; (8005dfc <_malloc_r+0xb0>)
 8005d7c:	6823      	ldr	r3, [r4, #0]
 8005d7e:	b91b      	cbnz	r3, 8005d88 <_malloc_r+0x3c>
 8005d80:	4630      	mov	r0, r6
 8005d82:	f000 f83d 	bl	8005e00 <_sbrk_r>
 8005d86:	6020      	str	r0, [r4, #0]
 8005d88:	4629      	mov	r1, r5
 8005d8a:	4630      	mov	r0, r6
 8005d8c:	f000 f838 	bl	8005e00 <_sbrk_r>
 8005d90:	1c43      	adds	r3, r0, #1
 8005d92:	d124      	bne.n	8005dde <_malloc_r+0x92>
 8005d94:	230c      	movs	r3, #12
 8005d96:	6033      	str	r3, [r6, #0]
 8005d98:	4630      	mov	r0, r6
 8005d9a:	f000 f8dc 	bl	8005f56 <__malloc_unlock>
 8005d9e:	e7e4      	b.n	8005d6a <_malloc_r+0x1e>
 8005da0:	680b      	ldr	r3, [r1, #0]
 8005da2:	1b5b      	subs	r3, r3, r5
 8005da4:	d418      	bmi.n	8005dd8 <_malloc_r+0x8c>
 8005da6:	2b0b      	cmp	r3, #11
 8005da8:	d90f      	bls.n	8005dca <_malloc_r+0x7e>
 8005daa:	600b      	str	r3, [r1, #0]
 8005dac:	50cd      	str	r5, [r1, r3]
 8005dae:	18cc      	adds	r4, r1, r3
 8005db0:	4630      	mov	r0, r6
 8005db2:	f000 f8d0 	bl	8005f56 <__malloc_unlock>
 8005db6:	f104 000b 	add.w	r0, r4, #11
 8005dba:	1d23      	adds	r3, r4, #4
 8005dbc:	f020 0007 	bic.w	r0, r0, #7
 8005dc0:	1ac3      	subs	r3, r0, r3
 8005dc2:	d0d3      	beq.n	8005d6c <_malloc_r+0x20>
 8005dc4:	425a      	negs	r2, r3
 8005dc6:	50e2      	str	r2, [r4, r3]
 8005dc8:	e7d0      	b.n	8005d6c <_malloc_r+0x20>
 8005dca:	428c      	cmp	r4, r1
 8005dcc:	684b      	ldr	r3, [r1, #4]
 8005dce:	bf16      	itet	ne
 8005dd0:	6063      	strne	r3, [r4, #4]
 8005dd2:	6013      	streq	r3, [r2, #0]
 8005dd4:	460c      	movne	r4, r1
 8005dd6:	e7eb      	b.n	8005db0 <_malloc_r+0x64>
 8005dd8:	460c      	mov	r4, r1
 8005dda:	6849      	ldr	r1, [r1, #4]
 8005ddc:	e7cc      	b.n	8005d78 <_malloc_r+0x2c>
 8005dde:	1cc4      	adds	r4, r0, #3
 8005de0:	f024 0403 	bic.w	r4, r4, #3
 8005de4:	42a0      	cmp	r0, r4
 8005de6:	d005      	beq.n	8005df4 <_malloc_r+0xa8>
 8005de8:	1a21      	subs	r1, r4, r0
 8005dea:	4630      	mov	r0, r6
 8005dec:	f000 f808 	bl	8005e00 <_sbrk_r>
 8005df0:	3001      	adds	r0, #1
 8005df2:	d0cf      	beq.n	8005d94 <_malloc_r+0x48>
 8005df4:	6025      	str	r5, [r4, #0]
 8005df6:	e7db      	b.n	8005db0 <_malloc_r+0x64>
 8005df8:	200000a0 	.word	0x200000a0
 8005dfc:	200000a4 	.word	0x200000a4

08005e00 <_sbrk_r>:
 8005e00:	b538      	push	{r3, r4, r5, lr}
 8005e02:	4c06      	ldr	r4, [pc, #24]	; (8005e1c <_sbrk_r+0x1c>)
 8005e04:	2300      	movs	r3, #0
 8005e06:	4605      	mov	r5, r0
 8005e08:	4608      	mov	r0, r1
 8005e0a:	6023      	str	r3, [r4, #0]
 8005e0c:	f7fb fad8 	bl	80013c0 <_sbrk>
 8005e10:	1c43      	adds	r3, r0, #1
 8005e12:	d102      	bne.n	8005e1a <_sbrk_r+0x1a>
 8005e14:	6823      	ldr	r3, [r4, #0]
 8005e16:	b103      	cbz	r3, 8005e1a <_sbrk_r+0x1a>
 8005e18:	602b      	str	r3, [r5, #0]
 8005e1a:	bd38      	pop	{r3, r4, r5, pc}
 8005e1c:	200002ac 	.word	0x200002ac

08005e20 <__sread>:
 8005e20:	b510      	push	{r4, lr}
 8005e22:	460c      	mov	r4, r1
 8005e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e28:	f000 f896 	bl	8005f58 <_read_r>
 8005e2c:	2800      	cmp	r0, #0
 8005e2e:	bfab      	itete	ge
 8005e30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e32:	89a3      	ldrhlt	r3, [r4, #12]
 8005e34:	181b      	addge	r3, r3, r0
 8005e36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e3a:	bfac      	ite	ge
 8005e3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e3e:	81a3      	strhlt	r3, [r4, #12]
 8005e40:	bd10      	pop	{r4, pc}

08005e42 <__swrite>:
 8005e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e46:	461f      	mov	r7, r3
 8005e48:	898b      	ldrh	r3, [r1, #12]
 8005e4a:	05db      	lsls	r3, r3, #23
 8005e4c:	4605      	mov	r5, r0
 8005e4e:	460c      	mov	r4, r1
 8005e50:	4616      	mov	r6, r2
 8005e52:	d505      	bpl.n	8005e60 <__swrite+0x1e>
 8005e54:	2302      	movs	r3, #2
 8005e56:	2200      	movs	r2, #0
 8005e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e5c:	f000 f868 	bl	8005f30 <_lseek_r>
 8005e60:	89a3      	ldrh	r3, [r4, #12]
 8005e62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e6a:	81a3      	strh	r3, [r4, #12]
 8005e6c:	4632      	mov	r2, r6
 8005e6e:	463b      	mov	r3, r7
 8005e70:	4628      	mov	r0, r5
 8005e72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e76:	f000 b817 	b.w	8005ea8 <_write_r>

08005e7a <__sseek>:
 8005e7a:	b510      	push	{r4, lr}
 8005e7c:	460c      	mov	r4, r1
 8005e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e82:	f000 f855 	bl	8005f30 <_lseek_r>
 8005e86:	1c43      	adds	r3, r0, #1
 8005e88:	89a3      	ldrh	r3, [r4, #12]
 8005e8a:	bf15      	itete	ne
 8005e8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e96:	81a3      	strheq	r3, [r4, #12]
 8005e98:	bf18      	it	ne
 8005e9a:	81a3      	strhne	r3, [r4, #12]
 8005e9c:	bd10      	pop	{r4, pc}

08005e9e <__sclose>:
 8005e9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ea2:	f000 b813 	b.w	8005ecc <_close_r>
	...

08005ea8 <_write_r>:
 8005ea8:	b538      	push	{r3, r4, r5, lr}
 8005eaa:	4c07      	ldr	r4, [pc, #28]	; (8005ec8 <_write_r+0x20>)
 8005eac:	4605      	mov	r5, r0
 8005eae:	4608      	mov	r0, r1
 8005eb0:	4611      	mov	r1, r2
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	6022      	str	r2, [r4, #0]
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	f7fb fa31 	bl	800131e <_write>
 8005ebc:	1c43      	adds	r3, r0, #1
 8005ebe:	d102      	bne.n	8005ec6 <_write_r+0x1e>
 8005ec0:	6823      	ldr	r3, [r4, #0]
 8005ec2:	b103      	cbz	r3, 8005ec6 <_write_r+0x1e>
 8005ec4:	602b      	str	r3, [r5, #0]
 8005ec6:	bd38      	pop	{r3, r4, r5, pc}
 8005ec8:	200002ac 	.word	0x200002ac

08005ecc <_close_r>:
 8005ecc:	b538      	push	{r3, r4, r5, lr}
 8005ece:	4c06      	ldr	r4, [pc, #24]	; (8005ee8 <_close_r+0x1c>)
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	4605      	mov	r5, r0
 8005ed4:	4608      	mov	r0, r1
 8005ed6:	6023      	str	r3, [r4, #0]
 8005ed8:	f7fb fa3d 	bl	8001356 <_close>
 8005edc:	1c43      	adds	r3, r0, #1
 8005ede:	d102      	bne.n	8005ee6 <_close_r+0x1a>
 8005ee0:	6823      	ldr	r3, [r4, #0]
 8005ee2:	b103      	cbz	r3, 8005ee6 <_close_r+0x1a>
 8005ee4:	602b      	str	r3, [r5, #0]
 8005ee6:	bd38      	pop	{r3, r4, r5, pc}
 8005ee8:	200002ac 	.word	0x200002ac

08005eec <_fstat_r>:
 8005eec:	b538      	push	{r3, r4, r5, lr}
 8005eee:	4c07      	ldr	r4, [pc, #28]	; (8005f0c <_fstat_r+0x20>)
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	4605      	mov	r5, r0
 8005ef4:	4608      	mov	r0, r1
 8005ef6:	4611      	mov	r1, r2
 8005ef8:	6023      	str	r3, [r4, #0]
 8005efa:	f7fb fa38 	bl	800136e <_fstat>
 8005efe:	1c43      	adds	r3, r0, #1
 8005f00:	d102      	bne.n	8005f08 <_fstat_r+0x1c>
 8005f02:	6823      	ldr	r3, [r4, #0]
 8005f04:	b103      	cbz	r3, 8005f08 <_fstat_r+0x1c>
 8005f06:	602b      	str	r3, [r5, #0]
 8005f08:	bd38      	pop	{r3, r4, r5, pc}
 8005f0a:	bf00      	nop
 8005f0c:	200002ac 	.word	0x200002ac

08005f10 <_isatty_r>:
 8005f10:	b538      	push	{r3, r4, r5, lr}
 8005f12:	4c06      	ldr	r4, [pc, #24]	; (8005f2c <_isatty_r+0x1c>)
 8005f14:	2300      	movs	r3, #0
 8005f16:	4605      	mov	r5, r0
 8005f18:	4608      	mov	r0, r1
 8005f1a:	6023      	str	r3, [r4, #0]
 8005f1c:	f7fb fa37 	bl	800138e <_isatty>
 8005f20:	1c43      	adds	r3, r0, #1
 8005f22:	d102      	bne.n	8005f2a <_isatty_r+0x1a>
 8005f24:	6823      	ldr	r3, [r4, #0]
 8005f26:	b103      	cbz	r3, 8005f2a <_isatty_r+0x1a>
 8005f28:	602b      	str	r3, [r5, #0]
 8005f2a:	bd38      	pop	{r3, r4, r5, pc}
 8005f2c:	200002ac 	.word	0x200002ac

08005f30 <_lseek_r>:
 8005f30:	b538      	push	{r3, r4, r5, lr}
 8005f32:	4c07      	ldr	r4, [pc, #28]	; (8005f50 <_lseek_r+0x20>)
 8005f34:	4605      	mov	r5, r0
 8005f36:	4608      	mov	r0, r1
 8005f38:	4611      	mov	r1, r2
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	6022      	str	r2, [r4, #0]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	f7fb fa30 	bl	80013a4 <_lseek>
 8005f44:	1c43      	adds	r3, r0, #1
 8005f46:	d102      	bne.n	8005f4e <_lseek_r+0x1e>
 8005f48:	6823      	ldr	r3, [r4, #0]
 8005f4a:	b103      	cbz	r3, 8005f4e <_lseek_r+0x1e>
 8005f4c:	602b      	str	r3, [r5, #0]
 8005f4e:	bd38      	pop	{r3, r4, r5, pc}
 8005f50:	200002ac 	.word	0x200002ac

08005f54 <__malloc_lock>:
 8005f54:	4770      	bx	lr

08005f56 <__malloc_unlock>:
 8005f56:	4770      	bx	lr

08005f58 <_read_r>:
 8005f58:	b538      	push	{r3, r4, r5, lr}
 8005f5a:	4c07      	ldr	r4, [pc, #28]	; (8005f78 <_read_r+0x20>)
 8005f5c:	4605      	mov	r5, r0
 8005f5e:	4608      	mov	r0, r1
 8005f60:	4611      	mov	r1, r2
 8005f62:	2200      	movs	r2, #0
 8005f64:	6022      	str	r2, [r4, #0]
 8005f66:	461a      	mov	r2, r3
 8005f68:	f7fb f9bc 	bl	80012e4 <_read>
 8005f6c:	1c43      	adds	r3, r0, #1
 8005f6e:	d102      	bne.n	8005f76 <_read_r+0x1e>
 8005f70:	6823      	ldr	r3, [r4, #0]
 8005f72:	b103      	cbz	r3, 8005f76 <_read_r+0x1e>
 8005f74:	602b      	str	r3, [r5, #0]
 8005f76:	bd38      	pop	{r3, r4, r5, pc}
 8005f78:	200002ac 	.word	0x200002ac

08005f7c <_init>:
 8005f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f7e:	bf00      	nop
 8005f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f82:	bc08      	pop	{r3}
 8005f84:	469e      	mov	lr, r3
 8005f86:	4770      	bx	lr

08005f88 <_fini>:
 8005f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f8a:	bf00      	nop
 8005f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f8e:	bc08      	pop	{r3}
 8005f90:	469e      	mov	lr, r3
 8005f92:	4770      	bx	lr
