
CarDisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005304  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012ec  08005490  08005490  00015490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800677c  0800677c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800677c  0800677c  0001677c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006784  08006784  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006784  08006784  00016784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006788  08006788  00016788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800678c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000078  08006804  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08006804  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000149ca  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027f4  00000000  00000000  00034a72  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001250  00000000  00000000  00037268  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001100  00000000  00000000  000384b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002328e  00000000  00000000  000395b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e046  00000000  00000000  0005c846  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce43d  00000000  00000000  0006a88c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00138cc9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005260  00000000  00000000  00138d44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000078 	.word	0x20000078
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08005478 	.word	0x08005478

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	2000007c 	.word	0x2000007c
 80001c8:	08005478 	.word	0x08005478

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 fe0e 	bl	80010f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f835 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f9a3 	bl	8000824 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004de:	f000 f971 	bl	80007c4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80004e2:	f000 f93f 	bl	8000764 <MX_USART1_UART_Init>
  MX_SPI3_Init();
 80004e6:	f000 f8b1 	bl	800064c <MX_SPI3_Init>
  MX_TIM2_Init();
 80004ea:	f000 f8ed 	bl	80006c8 <MX_TIM2_Init>
	for(int i = 2; i <= 5 ; i++) {
		vehicleVal.revGear[i] = vehicleVal.revGear[i-1] * vehicleVal.gearRatio[i] / vehicleVal.gearRatio[i-1];
	}
#endif

	__HAL_RCC_TIM2_CLK_ENABLE();
 80004ee:	4b10      	ldr	r3, [pc, #64]	; (8000530 <main+0x64>)
 80004f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004f2:	4a0f      	ldr	r2, [pc, #60]	; (8000530 <main+0x64>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	6593      	str	r3, [r2, #88]	; 0x58
 80004fa:	4b0d      	ldr	r3, [pc, #52]	; (8000530 <main+0x64>)
 80004fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000506:	201c      	movs	r0, #28
 8000508:	f000 ff7d 	bl	8001406 <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim2);
 800050c:	4809      	ldr	r0, [pc, #36]	; (8000534 <main+0x68>)
 800050e:	f002 fdf1 	bl	80030f4 <HAL_TIM_Base_Start_IT>
	vehicleVal.speedSensCnt = 0;
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <main+0x6c>)
 8000514:	2200      	movs	r2, #0
 8000516:	835a      	strh	r2, [r3, #26]
//	uint32_t timerValue = __HAL_TIM_GET_COUNTER(&htim2);
//	HAL_UART_Transmit(&huart2, "\ntim2: ", 7, 100);
//	uint8_t b[4];
//	itoa(timerValue, b, 10);
//	HAL_UART_Transmit(&huart2, b, 4, 100);
	HAL_UART_Transmit(&huart1, "123aaa", 5, 100);
 8000518:	2364      	movs	r3, #100	; 0x64
 800051a:	2205      	movs	r2, #5
 800051c:	4907      	ldr	r1, [pc, #28]	; (800053c <main+0x70>)
 800051e:	4808      	ldr	r0, [pc, #32]	; (8000540 <main+0x74>)
 8000520:	f003 f9e2 	bl	80038e8 <HAL_UART_Transmit>
	HAL_Delay(800);
 8000524:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000528:	f000 fe54 	bl	80011d4 <HAL_Delay>
	HAL_UART_Transmit(&huart1, "123aaa", 5, 100);
 800052c:	e7f4      	b.n	8000518 <main+0x4c>
 800052e:	bf00      	nop
 8000530:	40021000 	.word	0x40021000
 8000534:	200001bc 	.word	0x200001bc
 8000538:	200000a0 	.word	0x200000a0
 800053c:	08005490 	.word	0x08005490
 8000540:	20000128 	.word	0x20000128

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b0ac      	sub	sp, #176	; 0xb0
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800054e:	2244      	movs	r2, #68	; 0x44
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f004 fae2 	bl	8004b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	2254      	movs	r2, #84	; 0x54
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f004 fad4 	bl	8004b1c <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000574:	f001 f8fc 	bl	8001770 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000578:	4b33      	ldr	r3, [pc, #204]	; (8000648 <SystemClock_Config+0x104>)
 800057a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800057e:	4a32      	ldr	r2, [pc, #200]	; (8000648 <SystemClock_Config+0x104>)
 8000580:	f023 0318 	bic.w	r3, r3, #24
 8000584:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000588:	2314      	movs	r3, #20
 800058a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800058c:	2301      	movs	r3, #1
 800058e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000590:	2301      	movs	r3, #1
 8000592:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800059c:	2360      	movs	r3, #96	; 0x60
 800059e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	2302      	movs	r3, #2
 80005a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005a8:	2301      	movs	r3, #1
 80005aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005ae:	2301      	movs	r3, #1
 80005b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 80005b4:	2310      	movs	r3, #16
 80005b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005ba:	2307      	movs	r3, #7
 80005bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005c0:	2302      	movs	r3, #2
 80005c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005cc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80005d0:	4618      	mov	r0, r3
 80005d2:	f001 f941 	bl	8001858 <HAL_RCC_OscConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005dc:	f000 fb40 	bl	8000c60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e0:	230f      	movs	r3, #15
 80005e2:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e4:	2303      	movs	r3, #3
 80005e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005f8:	2101      	movs	r1, #1
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 fd4c 	bl	8002098 <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000606:	f000 fb2b 	bl	8000c60 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 800060a:	2303      	movs	r3, #3
 800060c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800060e:	2300      	movs	r3, #0
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000612:	2300      	movs	r3, #0
 8000614:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	4618      	mov	r0, r3
 800061a:	f001 ff41 	bl	80024a0 <HAL_RCCEx_PeriphCLKConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000624:	f000 fb1c 	bl	8000c60 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000628:	f44f 7000 	mov.w	r0, #512	; 0x200
 800062c:	f001 f8be 	bl	80017ac <HAL_PWREx_ControlVoltageScaling>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000636:	f000 fb13 	bl	8000c60 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800063a:	f002 f923 	bl	8002884 <HAL_RCCEx_EnableMSIPLLMode>
}
 800063e:	bf00      	nop
 8000640:	37b0      	adds	r7, #176	; 0xb0
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40021000 	.word	0x40021000

0800064c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000650:	4b1b      	ldr	r3, [pc, #108]	; (80006c0 <MX_SPI3_Init+0x74>)
 8000652:	4a1c      	ldr	r2, [pc, #112]	; (80006c4 <MX_SPI3_Init+0x78>)
 8000654:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000656:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <MX_SPI3_Init+0x74>)
 8000658:	f44f 7282 	mov.w	r2, #260	; 0x104
 800065c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800065e:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <MX_SPI3_Init+0x74>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000664:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <MX_SPI3_Init+0x74>)
 8000666:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800066a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <MX_SPI3_Init+0x74>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000672:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <MX_SPI3_Init+0x74>)
 8000674:	2200      	movs	r2, #0
 8000676:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <MX_SPI3_Init+0x74>)
 800067a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800067e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000680:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <MX_SPI3_Init+0x74>)
 8000682:	2210      	movs	r2, #16
 8000684:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <MX_SPI3_Init+0x74>)
 8000688:	2200      	movs	r2, #0
 800068a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <MX_SPI3_Init+0x74>)
 800068e:	2200      	movs	r2, #0
 8000690:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <MX_SPI3_Init+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <MX_SPI3_Init+0x74>)
 800069a:	2207      	movs	r2, #7
 800069c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <MX_SPI3_Init+0x74>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <MX_SPI3_Init+0x74>)
 80006a6:	2208      	movs	r2, #8
 80006a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <MX_SPI3_Init+0x74>)
 80006ac:	f002 f9ea 	bl	8002a84 <HAL_SPI_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80006b6:	f000 fad3 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	200000c4 	.word	0x200000c4
 80006c4:	40003c00 	.word	0x40003c00

080006c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b088      	sub	sp, #32
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ce:	f107 0310 	add.w	r3, r7, #16
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006e6:	4b1e      	ldr	r3, [pc, #120]	; (8000760 <MX_TIM2_Init+0x98>)
 80006e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 80006ee:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <MX_TIM2_Init+0x98>)
 80006f0:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80006f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f6:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <MX_TIM2_Init+0x98>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80006fc:	4b18      	ldr	r3, [pc, #96]	; (8000760 <MX_TIM2_Init+0x98>)
 80006fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000702:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000704:	4b16      	ldr	r3, [pc, #88]	; (8000760 <MX_TIM2_Init+0x98>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800070a:	4b15      	ldr	r3, [pc, #84]	; (8000760 <MX_TIM2_Init+0x98>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000710:	4813      	ldr	r0, [pc, #76]	; (8000760 <MX_TIM2_Init+0x98>)
 8000712:	f002 fcc4 	bl	800309e <HAL_TIM_Base_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800071c:	f000 faa0 	bl	8000c60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000724:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000726:	f107 0310 	add.w	r3, r7, #16
 800072a:	4619      	mov	r1, r3
 800072c:	480c      	ldr	r0, [pc, #48]	; (8000760 <MX_TIM2_Init+0x98>)
 800072e:	f002 fe2a 	bl	8003386 <HAL_TIM_ConfigClockSource>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000738:	f000 fa92 	bl	8000c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000740:	2300      	movs	r3, #0
 8000742:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	4619      	mov	r1, r3
 8000748:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_TIM2_Init+0x98>)
 800074a:	f002 fffb 	bl	8003744 <HAL_TIMEx_MasterConfigSynchronization>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000754:	f000 fa84 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	3720      	adds	r7, #32
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	200001bc 	.word	0x200001bc

08000764 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_USART1_UART_Init+0x58>)
 800076a:	4a15      	ldr	r2, [pc, #84]	; (80007c0 <MX_USART1_UART_Init+0x5c>)
 800076c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <MX_USART1_UART_Init+0x58>)
 8000770:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000774:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_USART1_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_USART1_UART_Init+0x58>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_USART1_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_USART1_UART_Init+0x58>)
 800078a:	220c      	movs	r2, #12
 800078c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <MX_USART1_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_USART1_UART_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <MX_USART1_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_USART1_UART_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_USART1_UART_Init+0x58>)
 80007a8:	f003 f850 	bl	800384c <HAL_UART_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007b2:	f000 fa55 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000128 	.word	0x20000128
 80007c0:	40013800 	.word	0x40013800

080007c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007ca:	4a15      	ldr	r2, [pc, #84]	; (8000820 <MX_USART2_UART_Init+0x5c>)
 80007cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80007ce:	4b13      	ldr	r3, [pc, #76]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_USART2_UART_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_USART2_UART_Init+0x58>)
 8000808:	f003 f820 	bl	800384c <HAL_UART_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000812:	f000 fa25 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200001fc 	.word	0x200001fc
 8000820:	40004400 	.word	0x40004400

08000824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b088      	sub	sp, #32
 8000828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082a:	f107 030c 	add.w	r3, r7, #12
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083a:	4b44      	ldr	r3, [pc, #272]	; (800094c <MX_GPIO_Init+0x128>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	4a43      	ldr	r2, [pc, #268]	; (800094c <MX_GPIO_Init+0x128>)
 8000840:	f043 0304 	orr.w	r3, r3, #4
 8000844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000846:	4b41      	ldr	r3, [pc, #260]	; (800094c <MX_GPIO_Init+0x128>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	f003 0304 	and.w	r3, r3, #4
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b3e      	ldr	r3, [pc, #248]	; (800094c <MX_GPIO_Init+0x128>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	4a3d      	ldr	r2, [pc, #244]	; (800094c <MX_GPIO_Init+0x128>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085e:	4b3b      	ldr	r3, [pc, #236]	; (800094c <MX_GPIO_Init+0x128>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086a:	4b38      	ldr	r3, [pc, #224]	; (800094c <MX_GPIO_Init+0x128>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	4a37      	ldr	r2, [pc, #220]	; (800094c <MX_GPIO_Init+0x128>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000876:	4b35      	ldr	r3, [pc, #212]	; (800094c <MX_GPIO_Init+0x128>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A3_DISP_CS_Pin|D2_DISP_BL_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	f241 0110 	movw	r1, #4112	; 0x1010
 8000888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088c:	f000 ff40 	bl	8001710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D3_DISP_RST_Pin|D4_DISP_DC_Pin, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	2181      	movs	r1, #129	; 0x81
 8000894:	482e      	ldr	r0, [pc, #184]	; (8000950 <MX_GPIO_Init+0x12c>)
 8000896:	f000 ff3b 	bl	8001710 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A3_DISP_CS_Pin D2_DISP_BL_Pin */
  GPIO_InitStruct.Pin = A3_DISP_CS_Pin|D2_DISP_BL_Pin;
 800089a:	f241 0310 	movw	r3, #4112	; 0x1010
 800089e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a0:	2301      	movs	r3, #1
 80008a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	4619      	mov	r1, r3
 80008b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b6:	f000 fdc1 	bl	800143c <HAL_GPIO_Init>

  /*Configure GPIO pins : D3_DISP_RST_Pin D4_DISP_DC_Pin */
  GPIO_InitStruct.Pin = D3_DISP_RST_Pin|D4_DISP_DC_Pin;
 80008ba:	2381      	movs	r3, #129	; 0x81
 80008bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	4619      	mov	r1, r3
 80008d0:	481f      	ldr	r0, [pc, #124]	; (8000950 <MX_GPIO_Init+0x12c>)
 80008d2:	f000 fdb3 	bl	800143c <HAL_GPIO_Init>

  /*Configure GPIO pin : D6_SWITCH_Pin */
  GPIO_InitStruct.Pin = D6_SWITCH_Pin;
 80008d6:	2302      	movs	r3, #2
 80008d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008da:	4b1e      	ldr	r3, [pc, #120]	; (8000954 <MX_GPIO_Init+0x130>)
 80008dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(D6_SWITCH_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 030c 	add.w	r3, r7, #12
 80008e6:	4619      	mov	r1, r3
 80008e8:	4819      	ldr	r0, [pc, #100]	; (8000950 <MX_GPIO_Init+0x12c>)
 80008ea:	f000 fda7 	bl	800143c <HAL_GPIO_Init>

  /*Configure GPIO pin : D9_SPEED_SENS_Pin */
  GPIO_InitStruct.Pin = D9_SPEED_SENS_Pin;
 80008ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008f4:	4b18      	ldr	r3, [pc, #96]	; (8000958 <MX_GPIO_Init+0x134>)
 80008f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(D9_SPEED_SENS_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 030c 	add.w	r3, r7, #12
 8000900:	4619      	mov	r1, r3
 8000902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000906:	f000 fd99 	bl	800143c <HAL_GPIO_Init>

  /*Configure GPIO pin : D12_SWITCH_Pin */
  GPIO_InitStruct.Pin = D12_SWITCH_Pin;
 800090a:	2310      	movs	r3, #16
 800090c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(D12_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 030c 	add.w	r3, r7, #12
 800091a:	4619      	mov	r1, r3
 800091c:	480c      	ldr	r0, [pc, #48]	; (8000950 <MX_GPIO_Init+0x12c>)
 800091e:	f000 fd8d 	bl	800143c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	2102      	movs	r1, #2
 8000926:	2007      	movs	r0, #7
 8000928:	f000 fd51 	bl	80013ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800092c:	2007      	movs	r0, #7
 800092e:	f000 fd6a 	bl	8001406 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	2101      	movs	r1, #1
 8000936:	2017      	movs	r0, #23
 8000938:	f000 fd49 	bl	80013ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800093c:	2017      	movs	r0, #23
 800093e:	f000 fd62 	bl	8001406 <HAL_NVIC_EnableIRQ>

}
 8000942:	bf00      	nop
 8000944:	3720      	adds	r7, #32
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40021000 	.word	0x40021000
 8000950:	48000400 	.word	0x48000400
 8000954:	10210000 	.word	0x10210000
 8000958:	10110000 	.word	0x10110000

0800095c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == D6_SWITCH_Pin) {
 8000966:	88fb      	ldrh	r3, [r7, #6]
 8000968:	2b02      	cmp	r3, #2
 800096a:	d10d      	bne.n	8000988 <HAL_GPIO_EXTI_Callback+0x2c>
		if(devState.screenNo == PARAM) {
 800096c:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <HAL_GPIO_EXTI_Callback+0x48>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b01      	cmp	r3, #1
 8000972:	d102      	bne.n	800097a <HAL_GPIO_EXTI_Callback+0x1e>
			gearboxScreenDisplay();
 8000974:	f000 f8e2 	bl	8000b3c <gearboxScreenDisplay>
			paramScreenDisplay();
		}
	} else if(GPIO_Pin == D9_SPEED_SENS_Pin) {
		vehicleVal.speedSensCnt++;
	}
}
 8000978:	e010      	b.n	800099c <HAL_GPIO_EXTI_Callback+0x40>
		} else if (devState.screenNo == GEARBOX) {
 800097a:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <HAL_GPIO_EXTI_Callback+0x48>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b02      	cmp	r3, #2
 8000980:	d10c      	bne.n	800099c <HAL_GPIO_EXTI_Callback+0x40>
			paramScreenDisplay();
 8000982:	f000 f83b 	bl	80009fc <paramScreenDisplay>
}
 8000986:	e009      	b.n	800099c <HAL_GPIO_EXTI_Callback+0x40>
	} else if(GPIO_Pin == D9_SPEED_SENS_Pin) {
 8000988:	88fb      	ldrh	r3, [r7, #6]
 800098a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800098e:	d105      	bne.n	800099c <HAL_GPIO_EXTI_Callback+0x40>
		vehicleVal.speedSensCnt++;
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000992:	8b5b      	ldrh	r3, [r3, #26]
 8000994:	3301      	adds	r3, #1
 8000996:	b29a      	uxth	r2, r3
 8000998:	4b03      	ldr	r3, [pc, #12]	; (80009a8 <HAL_GPIO_EXTI_Callback+0x4c>)
 800099a:	835a      	strh	r2, [r3, #26]
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	2000027c 	.word	0x2000027c
 80009a8:	200000a0 	.word	0x200000a0

080009ac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, "\nCnt ", 5, 100);
 80009b4:	2364      	movs	r3, #100	; 0x64
 80009b6:	2205      	movs	r2, #5
 80009b8:	490d      	ldr	r1, [pc, #52]	; (80009f0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80009ba:	480e      	ldr	r0, [pc, #56]	; (80009f4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80009bc:	f002 ff94 	bl	80038e8 <HAL_UART_Transmit>
	char b[4];
	itoa(vehicleVal.speedSensCnt, b, 10);
 80009c0:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80009c2:	8b5b      	ldrh	r3, [r3, #26]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f107 030c 	add.w	r3, r7, #12
 80009ca:	220a      	movs	r2, #10
 80009cc:	4619      	mov	r1, r3
 80009ce:	f004 f8a3 	bl	8004b18 <itoa>
	HAL_UART_Transmit(&huart2, b, 4, 100);
 80009d2:	f107 010c 	add.w	r1, r7, #12
 80009d6:	2364      	movs	r3, #100	; 0x64
 80009d8:	2204      	movs	r2, #4
 80009da:	4806      	ldr	r0, [pc, #24]	; (80009f4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80009dc:	f002 ff84 	bl	80038e8 <HAL_UART_Transmit>

	vehicleVal.speedSensCnt = 0;
 80009e0:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	835a      	strh	r2, [r3, #26]
}
 80009e6:	bf00      	nop
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	08005498 	.word	0x08005498
 80009f4:	200001fc 	.word	0x200001fc
 80009f8:	200000a0 	.word	0x200000a0

080009fc <paramScreenDisplay>:
	DISP_DrawImage(gImage_samurai_logo_q3, 30, 120, 90, 90);
	DISP_DrawImage(gImage_samurai_logo_q2, 120, 30, 90, 90);
	DISP_DrawImage(gImage_samurai_logo_q4, 120, 120, 90, 90);
}

void paramScreenDisplay() {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af04      	add	r7, sp, #16
	devState.screenNo = PARAM;
 8000a02:	4b46      	ldr	r3, [pc, #280]	; (8000b1c <paramScreenDisplay+0x120>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	701a      	strb	r2, [r3, #0]
	DISP_Clear(BLACK);
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f003 fcfb 	bl	8004404 <DISP_Clear>

	DISP_DrawString(65, 40, "WATER oC", &Font20, BLACK, BRRED);
 8000a0e:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000a12:	9301      	str	r3, [sp, #4]
 8000a14:	2300      	movs	r3, #0
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	4b41      	ldr	r3, [pc, #260]	; (8000b20 <paramScreenDisplay+0x124>)
 8000a1a:	4a42      	ldr	r2, [pc, #264]	; (8000b24 <paramScreenDisplay+0x128>)
 8000a1c:	2128      	movs	r1, #40	; 0x28
 8000a1e:	2041      	movs	r0, #65	; 0x41
 8000a20:	f003 ffe0 	bl	80049e4 <DISP_DrawString>
	DISP_DrawLine(20, 60, 220, 60, BRRED, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
 8000a24:	2300      	movs	r3, #0
 8000a26:	9302      	str	r3, [sp, #8]
 8000a28:	2302      	movs	r3, #2
 8000a2a:	9301      	str	r3, [sp, #4]
 8000a2c:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000a30:	9300      	str	r3, [sp, #0]
 8000a32:	233c      	movs	r3, #60	; 0x3c
 8000a34:	22dc      	movs	r2, #220	; 0xdc
 8000a36:	213c      	movs	r1, #60	; 0x3c
 8000a38:	2014      	movs	r0, #20
 8000a3a:	f003 fe75 	bl	8004728 <DISP_DrawLine>
	DISP_DrawLine(120, 60, 120, 120, BRRED, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
 8000a3e:	2300      	movs	r3, #0
 8000a40:	9302      	str	r3, [sp, #8]
 8000a42:	2302      	movs	r3, #2
 8000a44:	9301      	str	r3, [sp, #4]
 8000a46:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000a4a:	9300      	str	r3, [sp, #0]
 8000a4c:	2378      	movs	r3, #120	; 0x78
 8000a4e:	2278      	movs	r2, #120	; 0x78
 8000a50:	213c      	movs	r1, #60	; 0x3c
 8000a52:	2078      	movs	r0, #120	; 0x78
 8000a54:	f003 fe68 	bl	8004728 <DISP_DrawLine>
	DISP_DrawString(25, 100, "OIL oC", &Font20, BLACK, BRRED);
 8000a58:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000a5c:	9301      	str	r3, [sp, #4]
 8000a5e:	2300      	movs	r3, #0
 8000a60:	9300      	str	r3, [sp, #0]
 8000a62:	4b2f      	ldr	r3, [pc, #188]	; (8000b20 <paramScreenDisplay+0x124>)
 8000a64:	4a30      	ldr	r2, [pc, #192]	; (8000b28 <paramScreenDisplay+0x12c>)
 8000a66:	2164      	movs	r1, #100	; 0x64
 8000a68:	2019      	movs	r0, #25
 8000a6a:	f003 ffbb 	bl	80049e4 <DISP_DrawString>
	DISP_DrawString(130, 100, "OIL bar", &Font20, BLACK, BRRED);
 8000a6e:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000a72:	9301      	str	r3, [sp, #4]
 8000a74:	2300      	movs	r3, #0
 8000a76:	9300      	str	r3, [sp, #0]
 8000a78:	4b29      	ldr	r3, [pc, #164]	; (8000b20 <paramScreenDisplay+0x124>)
 8000a7a:	4a2c      	ldr	r2, [pc, #176]	; (8000b2c <paramScreenDisplay+0x130>)
 8000a7c:	2164      	movs	r1, #100	; 0x64
 8000a7e:	2082      	movs	r0, #130	; 0x82
 8000a80:	f003 ffb0 	bl	80049e4 <DISP_DrawString>
	DISP_DrawLine(5, 120, 235, 120, BRRED, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
 8000a84:	2300      	movs	r3, #0
 8000a86:	9302      	str	r3, [sp, #8]
 8000a88:	2302      	movs	r3, #2
 8000a8a:	9301      	str	r3, [sp, #4]
 8000a8c:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000a90:	9300      	str	r3, [sp, #0]
 8000a92:	2378      	movs	r3, #120	; 0x78
 8000a94:	22eb      	movs	r2, #235	; 0xeb
 8000a96:	2178      	movs	r1, #120	; 0x78
 8000a98:	2005      	movs	r0, #5
 8000a9a:	f003 fe45 	bl	8004728 <DISP_DrawLine>
	DISP_DrawLine(120, 120, 120, 180, BRRED, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	9302      	str	r3, [sp, #8]
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	9301      	str	r3, [sp, #4]
 8000aa6:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000aaa:	9300      	str	r3, [sp, #0]
 8000aac:	23b4      	movs	r3, #180	; 0xb4
 8000aae:	2278      	movs	r2, #120	; 0x78
 8000ab0:	2178      	movs	r1, #120	; 0x78
 8000ab2:	2078      	movs	r0, #120	; 0x78
 8000ab4:	f003 fe38 	bl	8004728 <DISP_DrawLine>
	DISP_DrawString(25, 160, "BATT V", &Font20, BLACK, BRRED);
 8000ab8:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000abc:	9301      	str	r3, [sp, #4]
 8000abe:	2300      	movs	r3, #0
 8000ac0:	9300      	str	r3, [sp, #0]
 8000ac2:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <paramScreenDisplay+0x124>)
 8000ac4:	4a1a      	ldr	r2, [pc, #104]	; (8000b30 <paramScreenDisplay+0x134>)
 8000ac6:	21a0      	movs	r1, #160	; 0xa0
 8000ac8:	2019      	movs	r0, #25
 8000aca:	f003 ff8b 	bl	80049e4 <DISP_DrawString>
	DISP_DrawString(130, 160, "LAMBDA", &Font20, BLACK, BRRED);
 8000ace:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000ad2:	9301      	str	r3, [sp, #4]
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	9300      	str	r3, [sp, #0]
 8000ad8:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <paramScreenDisplay+0x124>)
 8000ada:	4a16      	ldr	r2, [pc, #88]	; (8000b34 <paramScreenDisplay+0x138>)
 8000adc:	21a0      	movs	r1, #160	; 0xa0
 8000ade:	2082      	movs	r0, #130	; 0x82
 8000ae0:	f003 ff80 	bl	80049e4 <DISP_DrawString>
	DISP_DrawLine(20, 180, 220, 180, BRRED, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	9302      	str	r3, [sp, #8]
 8000ae8:	2302      	movs	r3, #2
 8000aea:	9301      	str	r3, [sp, #4]
 8000aec:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000af0:	9300      	str	r3, [sp, #0]
 8000af2:	23b4      	movs	r3, #180	; 0xb4
 8000af4:	22dc      	movs	r2, #220	; 0xdc
 8000af6:	21b4      	movs	r1, #180	; 0xb4
 8000af8:	2014      	movs	r0, #20
 8000afa:	f003 fe15 	bl	8004728 <DISP_DrawLine>
	DISP_DrawString(75, 182, "IAT oC", &Font20, BLACK, BRRED);
 8000afe:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000b02:	9301      	str	r3, [sp, #4]
 8000b04:	2300      	movs	r3, #0
 8000b06:	9300      	str	r3, [sp, #0]
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <paramScreenDisplay+0x124>)
 8000b0a:	4a0b      	ldr	r2, [pc, #44]	; (8000b38 <paramScreenDisplay+0x13c>)
 8000b0c:	21b6      	movs	r1, #182	; 0xb6
 8000b0e:	204b      	movs	r0, #75	; 0x4b
 8000b10:	f003 ff68 	bl	80049e4 <DISP_DrawString>
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	2000027c 	.word	0x2000027c
 8000b20:	2000000c 	.word	0x2000000c
 8000b24:	080054a0 	.word	0x080054a0
 8000b28:	080054ac 	.word	0x080054ac
 8000b2c:	080054b4 	.word	0x080054b4
 8000b30:	080054bc 	.word	0x080054bc
 8000b34:	080054c4 	.word	0x080054c4
 8000b38:	080054cc 	.word	0x080054cc

08000b3c <gearboxScreenDisplay>:

void gearboxScreenDisplay() {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af04      	add	r7, sp, #16
	devState.screenNo = GEARBOX;
 8000b42:	4b3d      	ldr	r3, [pc, #244]	; (8000c38 <gearboxScreenDisplay+0xfc>)
 8000b44:	2202      	movs	r2, #2
 8000b46:	701a      	strb	r2, [r3, #0]
	DISP_Clear(BLACK);
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f003 fc5b 	bl	8004404 <DISP_Clear>

	DISP_DrawString(55, 40, "SPEED km/h", &Font20, BLACK, BRRED);
 8000b4e:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000b52:	9301      	str	r3, [sp, #4]
 8000b54:	2300      	movs	r3, #0
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	4b38      	ldr	r3, [pc, #224]	; (8000c3c <gearboxScreenDisplay+0x100>)
 8000b5a:	4a39      	ldr	r2, [pc, #228]	; (8000c40 <gearboxScreenDisplay+0x104>)
 8000b5c:	2128      	movs	r1, #40	; 0x28
 8000b5e:	2037      	movs	r0, #55	; 0x37
 8000b60:	f003 ff40 	bl	80049e4 <DISP_DrawString>
	DISP_DrawLine(20, 60, 220, 60, BRRED, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
 8000b64:	2300      	movs	r3, #0
 8000b66:	9302      	str	r3, [sp, #8]
 8000b68:	2302      	movs	r3, #2
 8000b6a:	9301      	str	r3, [sp, #4]
 8000b6c:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	233c      	movs	r3, #60	; 0x3c
 8000b74:	22dc      	movs	r2, #220	; 0xdc
 8000b76:	213c      	movs	r1, #60	; 0x3c
 8000b78:	2014      	movs	r0, #20
 8000b7a:	f003 fdd5 	bl	8004728 <DISP_DrawLine>
	DISP_DrawLine(120, 60, 120, 220, BRRED, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
 8000b7e:	2300      	movs	r3, #0
 8000b80:	9302      	str	r3, [sp, #8]
 8000b82:	2302      	movs	r3, #2
 8000b84:	9301      	str	r3, [sp, #4]
 8000b86:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000b8a:	9300      	str	r3, [sp, #0]
 8000b8c:	23dc      	movs	r3, #220	; 0xdc
 8000b8e:	2278      	movs	r2, #120	; 0x78
 8000b90:	213c      	movs	r1, #60	; 0x3c
 8000b92:	2078      	movs	r0, #120	; 0x78
 8000b94:	f003 fdc8 	bl	8004728 <DISP_DrawLine>
	DISP_DrawString(40, 70, "GEAR", &Font20, BLACK, BRRED);
 8000b98:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000b9c:	9301      	str	r3, [sp, #4]
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	9300      	str	r3, [sp, #0]
 8000ba2:	4b26      	ldr	r3, [pc, #152]	; (8000c3c <gearboxScreenDisplay+0x100>)
 8000ba4:	4a27      	ldr	r2, [pc, #156]	; (8000c44 <gearboxScreenDisplay+0x108>)
 8000ba6:	2146      	movs	r1, #70	; 0x46
 8000ba8:	2028      	movs	r0, #40	; 0x28
 8000baa:	f003 ff1b 	bl	80049e4 <DISP_DrawString>
	DISP_DrawString(130, 70, "RPM", &Font20, BLACK, BRRED);
 8000bae:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000bb2:	9301      	str	r3, [sp, #4]
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	9300      	str	r3, [sp, #0]
 8000bb8:	4b20      	ldr	r3, [pc, #128]	; (8000c3c <gearboxScreenDisplay+0x100>)
 8000bba:	4a23      	ldr	r2, [pc, #140]	; (8000c48 <gearboxScreenDisplay+0x10c>)
 8000bbc:	2146      	movs	r1, #70	; 0x46
 8000bbe:	2082      	movs	r0, #130	; 0x82
 8000bc0:	f003 ff10 	bl	80049e4 <DISP_DrawString>
	DISP_DrawString(60, 90, "1", &Font20, BLACK, BRRED);
 8000bc4:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000bc8:	9301      	str	r3, [sp, #4]
 8000bca:	2300      	movs	r3, #0
 8000bcc:	9300      	str	r3, [sp, #0]
 8000bce:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <gearboxScreenDisplay+0x100>)
 8000bd0:	4a1e      	ldr	r2, [pc, #120]	; (8000c4c <gearboxScreenDisplay+0x110>)
 8000bd2:	215a      	movs	r1, #90	; 0x5a
 8000bd4:	203c      	movs	r0, #60	; 0x3c
 8000bd6:	f003 ff05 	bl	80049e4 <DISP_DrawString>
	DISP_DrawString(60, 115, "2", &Font20, BLACK, BRRED);
 8000bda:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000bde:	9301      	str	r3, [sp, #4]
 8000be0:	2300      	movs	r3, #0
 8000be2:	9300      	str	r3, [sp, #0]
 8000be4:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <gearboxScreenDisplay+0x100>)
 8000be6:	4a1a      	ldr	r2, [pc, #104]	; (8000c50 <gearboxScreenDisplay+0x114>)
 8000be8:	2173      	movs	r1, #115	; 0x73
 8000bea:	203c      	movs	r0, #60	; 0x3c
 8000bec:	f003 fefa 	bl	80049e4 <DISP_DrawString>
	DISP_DrawString(60, 140, "3", &Font20, BLACK, BRRED);
 8000bf0:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000bf4:	9301      	str	r3, [sp, #4]
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	9300      	str	r3, [sp, #0]
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <gearboxScreenDisplay+0x100>)
 8000bfc:	4a15      	ldr	r2, [pc, #84]	; (8000c54 <gearboxScreenDisplay+0x118>)
 8000bfe:	218c      	movs	r1, #140	; 0x8c
 8000c00:	203c      	movs	r0, #60	; 0x3c
 8000c02:	f003 feef 	bl	80049e4 <DISP_DrawString>
	DISP_DrawString(60, 165, "4", &Font20, BLACK, BRRED);
 8000c06:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000c0a:	9301      	str	r3, [sp, #4]
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	9300      	str	r3, [sp, #0]
 8000c10:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <gearboxScreenDisplay+0x100>)
 8000c12:	4a11      	ldr	r2, [pc, #68]	; (8000c58 <gearboxScreenDisplay+0x11c>)
 8000c14:	21a5      	movs	r1, #165	; 0xa5
 8000c16:	203c      	movs	r0, #60	; 0x3c
 8000c18:	f003 fee4 	bl	80049e4 <DISP_DrawString>
	DISP_DrawString(60, 190, "5", &Font20, BLACK, BRRED);
 8000c1c:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000c20:	9301      	str	r3, [sp, #4]
 8000c22:	2300      	movs	r3, #0
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <gearboxScreenDisplay+0x100>)
 8000c28:	4a0c      	ldr	r2, [pc, #48]	; (8000c5c <gearboxScreenDisplay+0x120>)
 8000c2a:	21be      	movs	r1, #190	; 0xbe
 8000c2c:	203c      	movs	r0, #60	; 0x3c
 8000c2e:	f003 fed9 	bl	80049e4 <DISP_DrawString>
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	2000027c 	.word	0x2000027c
 8000c3c:	2000000c 	.word	0x2000000c
 8000c40:	080054d4 	.word	0x080054d4
 8000c44:	080054e0 	.word	0x080054e0
 8000c48:	080054e8 	.word	0x080054e8
 8000c4c:	080054ec 	.word	0x080054ec
 8000c50:	080054f0 	.word	0x080054f0
 8000c54:	080054f4 	.word	0x080054f4
 8000c58:	080054f8 	.word	0x080054f8
 8000c5c:	080054fc 	.word	0x080054fc

08000c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
	...

08000c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c7a:	4a0e      	ldr	r2, [pc, #56]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6613      	str	r3, [r2, #96]	; 0x60
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c92:	4a08      	ldr	r2, [pc, #32]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c98:	6593      	str	r3, [r2, #88]	; 0x58
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	40021000 	.word	0x40021000

08000cb8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	; 0x28
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a17      	ldr	r2, [pc, #92]	; (8000d34 <HAL_SPI_MspInit+0x7c>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d127      	bne.n	8000d2a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cda:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <HAL_SPI_MspInit+0x80>)
 8000cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cde:	4a16      	ldr	r2, [pc, #88]	; (8000d38 <HAL_SPI_MspInit+0x80>)
 8000ce0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ce4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ce6:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <HAL_SPI_MspInit+0x80>)
 8000ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <HAL_SPI_MspInit+0x80>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf6:	4a10      	ldr	r2, [pc, #64]	; (8000d38 <HAL_SPI_MspInit+0x80>)
 8000cf8:	f043 0302 	orr.w	r3, r3, #2
 8000cfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <HAL_SPI_MspInit+0x80>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = D13_DISP_CLK_Pin|D11_DISP_DIN_Pin;
 8000d0a:	2328      	movs	r3, #40	; 0x28
 8000d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d16:	2303      	movs	r3, #3
 8000d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d1a:	2306      	movs	r3, #6
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	4619      	mov	r1, r3
 8000d24:	4805      	ldr	r0, [pc, #20]	; (8000d3c <HAL_SPI_MspInit+0x84>)
 8000d26:	f000 fb89 	bl	800143c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d2a:	bf00      	nop
 8000d2c:	3728      	adds	r7, #40	; 0x28
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40003c00 	.word	0x40003c00
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	48000400 	.word	0x48000400

08000d40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d50:	d113      	bne.n	8000d7a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d52:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <HAL_TIM_Base_MspInit+0x44>)
 8000d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d56:	4a0b      	ldr	r2, [pc, #44]	; (8000d84 <HAL_TIM_Base_MspInit+0x44>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <HAL_TIM_Base_MspInit+0x44>)
 8000d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	201c      	movs	r0, #28
 8000d70:	f000 fb2d 	bl	80013ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d74:	201c      	movs	r0, #28
 8000d76:	f000 fb46 	bl	8001406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40021000 	.word	0x40021000

08000d88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08c      	sub	sp, #48	; 0x30
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 031c 	add.w	r3, r7, #28
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a2f      	ldr	r2, [pc, #188]	; (8000e64 <HAL_UART_MspInit+0xdc>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d12a      	bne.n	8000e00 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000daa:	4b2f      	ldr	r3, [pc, #188]	; (8000e68 <HAL_UART_MspInit+0xe0>)
 8000dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dae:	4a2e      	ldr	r2, [pc, #184]	; (8000e68 <HAL_UART_MspInit+0xe0>)
 8000db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db4:	6613      	str	r3, [r2, #96]	; 0x60
 8000db6:	4b2c      	ldr	r3, [pc, #176]	; (8000e68 <HAL_UART_MspInit+0xe0>)
 8000db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dbe:	61bb      	str	r3, [r7, #24]
 8000dc0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc2:	4b29      	ldr	r3, [pc, #164]	; (8000e68 <HAL_UART_MspInit+0xe0>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc6:	4a28      	ldr	r2, [pc, #160]	; (8000e68 <HAL_UART_MspInit+0xe0>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dce:	4b26      	ldr	r3, [pc, #152]	; (8000e68 <HAL_UART_MspInit+0xe0>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = D1_UART_ECU_TX_Pin|D0_UART_ECU_RX_Pin;
 8000dda:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de8:	2303      	movs	r3, #3
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dec:	2307      	movs	r3, #7
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df0:	f107 031c 	add.w	r3, r7, #28
 8000df4:	4619      	mov	r1, r3
 8000df6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfa:	f000 fb1f 	bl	800143c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dfe:	e02d      	b.n	8000e5c <HAL_UART_MspInit+0xd4>
  else if(huart->Instance==USART2)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a19      	ldr	r2, [pc, #100]	; (8000e6c <HAL_UART_MspInit+0xe4>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d128      	bne.n	8000e5c <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e0a:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <HAL_UART_MspInit+0xe0>)
 8000e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0e:	4a16      	ldr	r2, [pc, #88]	; (8000e68 <HAL_UART_MspInit+0xe0>)
 8000e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e14:	6593      	str	r3, [r2, #88]	; 0x58
 8000e16:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <HAL_UART_MspInit+0xe0>)
 8000e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <HAL_UART_MspInit+0xe0>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	4a10      	ldr	r2, [pc, #64]	; (8000e68 <HAL_UART_MspInit+0xe0>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <HAL_UART_MspInit+0xe0>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = A7_UART_PC_TX_Pin|A2_UART_PC_RX_Pin;
 8000e3a:	230c      	movs	r3, #12
 8000e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e46:	2303      	movs	r3, #3
 8000e48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e4a:	2307      	movs	r3, #7
 8000e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4e:	f107 031c 	add.w	r3, r7, #28
 8000e52:	4619      	mov	r1, r3
 8000e54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e58:	f000 faf0 	bl	800143c <HAL_GPIO_Init>
}
 8000e5c:	bf00      	nop
 8000e5e:	3730      	adds	r7, #48	; 0x30
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40013800 	.word	0x40013800
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	40004400 	.word	0x40004400

08000e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e82:	e7fe      	b.n	8000e82 <HardFault_Handler+0x4>

08000e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <MemManage_Handler+0x4>

08000e8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <BusFault_Handler+0x4>

08000e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <UsageFault_Handler+0x4>

08000e96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec4:	f000 f968 	bl	8001198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000ed0:	2002      	movs	r0, #2
 8000ed2:	f000 fc35 	bl	8001740 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000ede:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000ee2:	f000 fc2d 	bl	8001740 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ef0:	4802      	ldr	r0, [pc, #8]	; (8000efc <TIM2_IRQHandler+0x10>)
 8000ef2:	f002 f929 	bl	8003148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200001bc 	.word	0x200001bc

08000f00 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
 8000f10:	e00a      	b.n	8000f28 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f12:	f3af 8000 	nop.w
 8000f16:	4601      	mov	r1, r0
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	1c5a      	adds	r2, r3, #1
 8000f1c:	60ba      	str	r2, [r7, #8]
 8000f1e:	b2ca      	uxtb	r2, r1
 8000f20:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	3301      	adds	r3, #1
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	dbf0      	blt.n	8000f12 <_read+0x12>
	}

return len;
 8000f30:	687b      	ldr	r3, [r7, #4]
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3718      	adds	r7, #24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b086      	sub	sp, #24
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	60f8      	str	r0, [r7, #12]
 8000f42:	60b9      	str	r1, [r7, #8]
 8000f44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
 8000f4a:	e009      	b.n	8000f60 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	1c5a      	adds	r2, r3, #1
 8000f50:	60ba      	str	r2, [r7, #8]
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	697a      	ldr	r2, [r7, #20]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	dbf1      	blt.n	8000f4c <_write+0x12>
	}
	return len;
 8000f68:	687b      	ldr	r3, [r7, #4]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3718      	adds	r7, #24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <_close>:

int _close(int file)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b083      	sub	sp, #12
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
	return -1;
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	b083      	sub	sp, #12
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
 8000f92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f9a:	605a      	str	r2, [r3, #4]
	return 0;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <_isatty>:

int _isatty(int file)
{
 8000faa:	b480      	push	{r7}
 8000fac:	b083      	sub	sp, #12
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
	return 1;
 8000fb2:	2301      	movs	r3, #1
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
	return 0;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
	...

08000fdc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <_sbrk+0x50>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d102      	bne.n	8000ff2 <_sbrk+0x16>
		heap_end = &end;
 8000fec:	4b0f      	ldr	r3, [pc, #60]	; (800102c <_sbrk+0x50>)
 8000fee:	4a10      	ldr	r2, [pc, #64]	; (8001030 <_sbrk+0x54>)
 8000ff0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <_sbrk+0x50>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <_sbrk+0x50>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4413      	add	r3, r2
 8001000:	466a      	mov	r2, sp
 8001002:	4293      	cmp	r3, r2
 8001004:	d907      	bls.n	8001016 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001006:	f003 fd45 	bl	8004a94 <__errno>
 800100a:	4602      	mov	r2, r0
 800100c:	230c      	movs	r3, #12
 800100e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001010:	f04f 33ff 	mov.w	r3, #4294967295
 8001014:	e006      	b.n	8001024 <_sbrk+0x48>
	}

	heap_end += incr;
 8001016:	4b05      	ldr	r3, [pc, #20]	; (800102c <_sbrk+0x50>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	4a03      	ldr	r2, [pc, #12]	; (800102c <_sbrk+0x50>)
 8001020:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001022:	68fb      	ldr	r3, [r7, #12]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000094 	.word	0x20000094
 8001030:	200002a8 	.word	0x200002a8

08001034 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001038:	4b17      	ldr	r3, [pc, #92]	; (8001098 <SystemInit+0x64>)
 800103a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800103e:	4a16      	ldr	r2, [pc, #88]	; (8001098 <SystemInit+0x64>)
 8001040:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001044:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001048:	4b14      	ldr	r3, [pc, #80]	; (800109c <SystemInit+0x68>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a13      	ldr	r2, [pc, #76]	; (800109c <SystemInit+0x68>)
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <SystemInit+0x68>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800105a:	4b10      	ldr	r3, [pc, #64]	; (800109c <SystemInit+0x68>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a0f      	ldr	r2, [pc, #60]	; (800109c <SystemInit+0x68>)
 8001060:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001064:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001068:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <SystemInit+0x68>)
 800106c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001070:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001072:	4b0a      	ldr	r3, [pc, #40]	; (800109c <SystemInit+0x68>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a09      	ldr	r2, [pc, #36]	; (800109c <SystemInit+0x68>)
 8001078:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800107c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800107e:	4b07      	ldr	r3, [pc, #28]	; (800109c <SystemInit+0x68>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <SystemInit+0x64>)
 8001086:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800108a:	609a      	str	r2, [r3, #8]
#endif
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	e000ed00 	.word	0xe000ed00
 800109c:	40021000 	.word	0x40021000

080010a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010d8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80010a4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80010a6:	e003      	b.n	80010b0 <LoopCopyDataInit>

080010a8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80010aa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80010ac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80010ae:	3104      	adds	r1, #4

080010b0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80010b0:	480b      	ldr	r0, [pc, #44]	; (80010e0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80010b2:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80010b4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80010b6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80010b8:	d3f6      	bcc.n	80010a8 <CopyDataInit>
	ldr	r2, =_sbss
 80010ba:	4a0b      	ldr	r2, [pc, #44]	; (80010e8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80010bc:	e002      	b.n	80010c4 <LoopFillZerobss>

080010be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80010be:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80010c0:	f842 3b04 	str.w	r3, [r2], #4

080010c4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80010c4:	4b09      	ldr	r3, [pc, #36]	; (80010ec <LoopForever+0x16>)
	cmp	r2, r3
 80010c6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80010c8:	d3f9      	bcc.n	80010be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010ca:	f7ff ffb3 	bl	8001034 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ce:	f003 fce7 	bl	8004aa0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010d2:	f7ff f9fb 	bl	80004cc <main>

080010d6 <LoopForever>:

LoopForever:
    b LoopForever
 80010d6:	e7fe      	b.n	80010d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010d8:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80010dc:	0800678c 	.word	0x0800678c
	ldr	r0, =_sdata
 80010e0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80010e4:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 80010e8:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 80010ec:	200002a8 	.word	0x200002a8

080010f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010f0:	e7fe      	b.n	80010f0 <ADC1_IRQHandler>

080010f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010f8:	2300      	movs	r3, #0
 80010fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010fc:	2003      	movs	r0, #3
 80010fe:	f000 f95b 	bl	80013b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001102:	2000      	movs	r0, #0
 8001104:	f000 f80e 	bl	8001124 <HAL_InitTick>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d002      	beq.n	8001114 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	71fb      	strb	r3, [r7, #7]
 8001112:	e001      	b.n	8001118 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001114:	f7ff fdac 	bl	8000c70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001118:	79fb      	ldrb	r3, [r7, #7]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800112c:	2300      	movs	r3, #0
 800112e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001130:	4b16      	ldr	r3, [pc, #88]	; (800118c <HAL_InitTick+0x68>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d022      	beq.n	800117e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001138:	4b15      	ldr	r3, [pc, #84]	; (8001190 <HAL_InitTick+0x6c>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4b13      	ldr	r3, [pc, #76]	; (800118c <HAL_InitTick+0x68>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001144:	fbb1 f3f3 	udiv	r3, r1, r3
 8001148:	fbb2 f3f3 	udiv	r3, r2, r3
 800114c:	4618      	mov	r0, r3
 800114e:	f000 f968 	bl	8001422 <HAL_SYSTICK_Config>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d10f      	bne.n	8001178 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b0f      	cmp	r3, #15
 800115c:	d809      	bhi.n	8001172 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800115e:	2200      	movs	r2, #0
 8001160:	6879      	ldr	r1, [r7, #4]
 8001162:	f04f 30ff 	mov.w	r0, #4294967295
 8001166:	f000 f932 	bl	80013ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800116a:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <HAL_InitTick+0x70>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	e007      	b.n	8001182 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	73fb      	strb	r3, [r7, #15]
 8001176:	e004      	b.n	8001182 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	73fb      	strb	r3, [r7, #15]
 800117c:	e001      	b.n	8001182 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001182:	7bfb      	ldrb	r3, [r7, #15]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000008 	.word	0x20000008
 8001190:	20000000 	.word	0x20000000
 8001194:	20000004 	.word	0x20000004

08001198 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <HAL_IncTick+0x1c>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <HAL_IncTick+0x20>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4413      	add	r3, r2
 80011a6:	4a03      	ldr	r2, [pc, #12]	; (80011b4 <HAL_IncTick+0x1c>)
 80011a8:	6013      	str	r3, [r2, #0]
}
 80011aa:	bf00      	nop
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	20000280 	.word	0x20000280
 80011b8:	20000008 	.word	0x20000008

080011bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return uwTick;
 80011c0:	4b03      	ldr	r3, [pc, #12]	; (80011d0 <HAL_GetTick+0x14>)
 80011c2:	681b      	ldr	r3, [r3, #0]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	20000280 	.word	0x20000280

080011d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011dc:	f7ff ffee 	bl	80011bc <HAL_GetTick>
 80011e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ec:	d004      	beq.n	80011f8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <HAL_Delay+0x40>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	4413      	add	r3, r2
 80011f6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011f8:	bf00      	nop
 80011fa:	f7ff ffdf 	bl	80011bc <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	68fa      	ldr	r2, [r7, #12]
 8001206:	429a      	cmp	r2, r3
 8001208:	d8f7      	bhi.n	80011fa <HAL_Delay+0x26>
  {
  }
}
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000008 	.word	0x20000008

08001218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <__NVIC_SetPriorityGrouping+0x44>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001234:	4013      	ands	r3, r2
 8001236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001240:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124a:	4a04      	ldr	r2, [pc, #16]	; (800125c <__NVIC_SetPriorityGrouping+0x44>)
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	60d3      	str	r3, [r2, #12]
}
 8001250:	bf00      	nop
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <__NVIC_GetPriorityGrouping+0x18>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	0a1b      	lsrs	r3, r3, #8
 800126a:	f003 0307 	and.w	r3, r3, #7
}
 800126e:	4618      	mov	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	2b00      	cmp	r3, #0
 800128c:	db0b      	blt.n	80012a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	f003 021f 	and.w	r2, r3, #31
 8001294:	4907      	ldr	r1, [pc, #28]	; (80012b4 <__NVIC_EnableIRQ+0x38>)
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	095b      	lsrs	r3, r3, #5
 800129c:	2001      	movs	r0, #1
 800129e:	fa00 f202 	lsl.w	r2, r0, r2
 80012a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	e000e100 	.word	0xe000e100

080012b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	6039      	str	r1, [r7, #0]
 80012c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	db0a      	blt.n	80012e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	490c      	ldr	r1, [pc, #48]	; (8001304 <__NVIC_SetPriority+0x4c>)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	0112      	lsls	r2, r2, #4
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	440b      	add	r3, r1
 80012dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e0:	e00a      	b.n	80012f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	4908      	ldr	r1, [pc, #32]	; (8001308 <__NVIC_SetPriority+0x50>)
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	f003 030f 	and.w	r3, r3, #15
 80012ee:	3b04      	subs	r3, #4
 80012f0:	0112      	lsls	r2, r2, #4
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	440b      	add	r3, r1
 80012f6:	761a      	strb	r2, [r3, #24]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000e100 	.word	0xe000e100
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800130c:	b480      	push	{r7}
 800130e:	b089      	sub	sp, #36	; 0x24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f1c3 0307 	rsb	r3, r3, #7
 8001326:	2b04      	cmp	r3, #4
 8001328:	bf28      	it	cs
 800132a:	2304      	movcs	r3, #4
 800132c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3304      	adds	r3, #4
 8001332:	2b06      	cmp	r3, #6
 8001334:	d902      	bls.n	800133c <NVIC_EncodePriority+0x30>
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3b03      	subs	r3, #3
 800133a:	e000      	b.n	800133e <NVIC_EncodePriority+0x32>
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	f04f 32ff 	mov.w	r2, #4294967295
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43da      	mvns	r2, r3
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	401a      	ands	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001354:	f04f 31ff 	mov.w	r1, #4294967295
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	fa01 f303 	lsl.w	r3, r1, r3
 800135e:	43d9      	mvns	r1, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	4313      	orrs	r3, r2
         );
}
 8001366:	4618      	mov	r0, r3
 8001368:	3724      	adds	r7, #36	; 0x24
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
	...

08001374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3b01      	subs	r3, #1
 8001380:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001384:	d301      	bcc.n	800138a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001386:	2301      	movs	r3, #1
 8001388:	e00f      	b.n	80013aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800138a:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <SysTick_Config+0x40>)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3b01      	subs	r3, #1
 8001390:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001392:	210f      	movs	r1, #15
 8001394:	f04f 30ff 	mov.w	r0, #4294967295
 8001398:	f7ff ff8e 	bl	80012b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800139c:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <SysTick_Config+0x40>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013a2:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <SysTick_Config+0x40>)
 80013a4:	2207      	movs	r2, #7
 80013a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	e000e010 	.word	0xe000e010

080013b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ff29 	bl	8001218 <__NVIC_SetPriorityGrouping>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b086      	sub	sp, #24
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	4603      	mov	r3, r0
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
 80013da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013e0:	f7ff ff3e 	bl	8001260 <__NVIC_GetPriorityGrouping>
 80013e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	68b9      	ldr	r1, [r7, #8]
 80013ea:	6978      	ldr	r0, [r7, #20]
 80013ec:	f7ff ff8e 	bl	800130c <NVIC_EncodePriority>
 80013f0:	4602      	mov	r2, r0
 80013f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f6:	4611      	mov	r1, r2
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff5d 	bl	80012b8 <__NVIC_SetPriority>
}
 80013fe:	bf00      	nop
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	4603      	mov	r3, r0
 800140e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ff31 	bl	800127c <__NVIC_EnableIRQ>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff ffa2 	bl	8001374 <SysTick_Config>
 8001430:	4603      	mov	r3, r0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800143c:	b480      	push	{r7}
 800143e:	b087      	sub	sp, #28
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800144a:	e148      	b.n	80016de <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	2101      	movs	r1, #1
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	fa01 f303 	lsl.w	r3, r1, r3
 8001458:	4013      	ands	r3, r2
 800145a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2b00      	cmp	r3, #0
 8001460:	f000 813a 	beq.w	80016d8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d00b      	beq.n	8001484 <HAL_GPIO_Init+0x48>
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b02      	cmp	r3, #2
 8001472:	d007      	beq.n	8001484 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001478:	2b11      	cmp	r3, #17
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b12      	cmp	r3, #18
 8001482:	d130      	bne.n	80014e6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	2203      	movs	r2, #3
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	68da      	ldr	r2, [r3, #12]
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014ba:	2201      	movs	r2, #1
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	4013      	ands	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	091b      	lsrs	r3, r3, #4
 80014d0:	f003 0201 	and.w	r2, r3, #1
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	2203      	movs	r2, #3
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43db      	mvns	r3, r3
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	4013      	ands	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b02      	cmp	r3, #2
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_Init+0xea>
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b12      	cmp	r3, #18
 8001524:	d123      	bne.n	800156e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	08da      	lsrs	r2, r3, #3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	3208      	adds	r2, #8
 800152e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001532:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	220f      	movs	r2, #15
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43db      	mvns	r3, r3
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	4013      	ands	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	691a      	ldr	r2, [r3, #16]
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	f003 0307 	and.w	r3, r3, #7
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4313      	orrs	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	08da      	lsrs	r2, r3, #3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3208      	adds	r2, #8
 8001568:	6939      	ldr	r1, [r7, #16]
 800156a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	2203      	movs	r2, #3
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4013      	ands	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f003 0203 	and.w	r2, r3, #3
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f000 8094 	beq.w	80016d8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b0:	4b52      	ldr	r3, [pc, #328]	; (80016fc <HAL_GPIO_Init+0x2c0>)
 80015b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b4:	4a51      	ldr	r2, [pc, #324]	; (80016fc <HAL_GPIO_Init+0x2c0>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	6613      	str	r3, [r2, #96]	; 0x60
 80015bc:	4b4f      	ldr	r3, [pc, #316]	; (80016fc <HAL_GPIO_Init+0x2c0>)
 80015be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015c8:	4a4d      	ldr	r2, [pc, #308]	; (8001700 <HAL_GPIO_Init+0x2c4>)
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	089b      	lsrs	r3, r3, #2
 80015ce:	3302      	adds	r3, #2
 80015d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	f003 0303 	and.w	r3, r3, #3
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	220f      	movs	r2, #15
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4013      	ands	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015f2:	d00d      	beq.n	8001610 <HAL_GPIO_Init+0x1d4>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a43      	ldr	r2, [pc, #268]	; (8001704 <HAL_GPIO_Init+0x2c8>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d007      	beq.n	800160c <HAL_GPIO_Init+0x1d0>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a42      	ldr	r2, [pc, #264]	; (8001708 <HAL_GPIO_Init+0x2cc>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d101      	bne.n	8001608 <HAL_GPIO_Init+0x1cc>
 8001604:	2302      	movs	r3, #2
 8001606:	e004      	b.n	8001612 <HAL_GPIO_Init+0x1d6>
 8001608:	2307      	movs	r3, #7
 800160a:	e002      	b.n	8001612 <HAL_GPIO_Init+0x1d6>
 800160c:	2301      	movs	r3, #1
 800160e:	e000      	b.n	8001612 <HAL_GPIO_Init+0x1d6>
 8001610:	2300      	movs	r3, #0
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	f002 0203 	and.w	r2, r2, #3
 8001618:	0092      	lsls	r2, r2, #2
 800161a:	4093      	lsls	r3, r2
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	4313      	orrs	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001622:	4937      	ldr	r1, [pc, #220]	; (8001700 <HAL_GPIO_Init+0x2c4>)
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	089b      	lsrs	r3, r3, #2
 8001628:	3302      	adds	r3, #2
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001630:	4b36      	ldr	r3, [pc, #216]	; (800170c <HAL_GPIO_Init+0x2d0>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	43db      	mvns	r3, r3
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4013      	ands	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	4313      	orrs	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001654:	4a2d      	ldr	r2, [pc, #180]	; (800170c <HAL_GPIO_Init+0x2d0>)
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800165a:	4b2c      	ldr	r3, [pc, #176]	; (800170c <HAL_GPIO_Init+0x2d0>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	43db      	mvns	r3, r3
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	4013      	ands	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4313      	orrs	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800167e:	4a23      	ldr	r2, [pc, #140]	; (800170c <HAL_GPIO_Init+0x2d0>)
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001684:	4b21      	ldr	r3, [pc, #132]	; (800170c <HAL_GPIO_Init+0x2d0>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	43db      	mvns	r3, r3
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	4013      	ands	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d003      	beq.n	80016a8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016a8:	4a18      	ldr	r2, [pc, #96]	; (800170c <HAL_GPIO_Init+0x2d0>)
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016ae:	4b17      	ldr	r3, [pc, #92]	; (800170c <HAL_GPIO_Init+0x2d0>)
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	43db      	mvns	r3, r3
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	4013      	ands	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016d2:	4a0e      	ldr	r2, [pc, #56]	; (800170c <HAL_GPIO_Init+0x2d0>)
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	3301      	adds	r3, #1
 80016dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	fa22 f303 	lsr.w	r3, r2, r3
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f47f aeaf 	bne.w	800144c <HAL_GPIO_Init+0x10>
  }
}
 80016ee:	bf00      	nop
 80016f0:	371c      	adds	r7, #28
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	40021000 	.word	0x40021000
 8001700:	40010000 	.word	0x40010000
 8001704:	48000400 	.word	0x48000400
 8001708:	48000800 	.word	0x48000800
 800170c:	40010400 	.word	0x40010400

08001710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	807b      	strh	r3, [r7, #2]
 800171c:	4613      	mov	r3, r2
 800171e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001720:	787b      	ldrb	r3, [r7, #1]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001726:	887a      	ldrh	r2, [r7, #2]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800172c:	e002      	b.n	8001734 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800172e:	887a      	ldrh	r2, [r7, #2]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800174a:	4b08      	ldr	r3, [pc, #32]	; (800176c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800174c:	695a      	ldr	r2, [r3, #20]
 800174e:	88fb      	ldrh	r3, [r7, #6]
 8001750:	4013      	ands	r3, r2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d006      	beq.n	8001764 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001756:	4a05      	ldr	r2, [pc, #20]	; (800176c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001758:	88fb      	ldrh	r3, [r7, #6]
 800175a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800175c:	88fb      	ldrh	r3, [r7, #6]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff f8fc 	bl	800095c <HAL_GPIO_EXTI_Callback>
  }
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40010400 	.word	0x40010400

08001770 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a04      	ldr	r2, [pc, #16]	; (800178c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800177a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800177e:	6013      	str	r3, [r2, #0]
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	40007000 	.word	0x40007000

08001790 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001794:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800179c:	4618      	mov	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	40007000 	.word	0x40007000

080017ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017ba:	d130      	bne.n	800181e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80017bc:	4b23      	ldr	r3, [pc, #140]	; (800184c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017c8:	d038      	beq.n	800183c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017ca:	4b20      	ldr	r3, [pc, #128]	; (800184c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017d2:	4a1e      	ldr	r2, [pc, #120]	; (800184c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017da:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2232      	movs	r2, #50	; 0x32
 80017e0:	fb02 f303 	mul.w	r3, r2, r3
 80017e4:	4a1b      	ldr	r2, [pc, #108]	; (8001854 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80017e6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ea:	0c9b      	lsrs	r3, r3, #18
 80017ec:	3301      	adds	r3, #1
 80017ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017f0:	e002      	b.n	80017f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	3b01      	subs	r3, #1
 80017f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017f8:	4b14      	ldr	r3, [pc, #80]	; (800184c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017fa:	695b      	ldr	r3, [r3, #20]
 80017fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001804:	d102      	bne.n	800180c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1f2      	bne.n	80017f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001818:	d110      	bne.n	800183c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e00f      	b.n	800183e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800182a:	d007      	beq.n	800183c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800182c:	4b07      	ldr	r3, [pc, #28]	; (800184c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001834:	4a05      	ldr	r2, [pc, #20]	; (800184c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001836:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800183a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	40007000 	.word	0x40007000
 8001850:	20000000 	.word	0x20000000
 8001854:	431bde83 	.word	0x431bde83

08001858 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b088      	sub	sp, #32
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d102      	bne.n	800186c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	f000 bc11 	b.w	800208e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800186c:	4ba0      	ldr	r3, [pc, #640]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 030c 	and.w	r3, r3, #12
 8001874:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001876:	4b9e      	ldr	r3, [pc, #632]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0310 	and.w	r3, r3, #16
 8001888:	2b00      	cmp	r3, #0
 800188a:	f000 80e4 	beq.w	8001a56 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d007      	beq.n	80018a4 <HAL_RCC_OscConfig+0x4c>
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	2b0c      	cmp	r3, #12
 8001898:	f040 808b 	bne.w	80019b2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	f040 8087 	bne.w	80019b2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018a4:	4b92      	ldr	r3, [pc, #584]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d005      	beq.n	80018bc <HAL_RCC_OscConfig+0x64>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e3e8      	b.n	800208e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a1a      	ldr	r2, [r3, #32]
 80018c0:	4b8b      	ldr	r3, [pc, #556]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0308 	and.w	r3, r3, #8
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d004      	beq.n	80018d6 <HAL_RCC_OscConfig+0x7e>
 80018cc:	4b88      	ldr	r3, [pc, #544]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018d4:	e005      	b.n	80018e2 <HAL_RCC_OscConfig+0x8a>
 80018d6:	4b86      	ldr	r3, [pc, #536]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 80018d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018dc:	091b      	lsrs	r3, r3, #4
 80018de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d223      	bcs.n	800192e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 fd78 	bl	80023e0 <RCC_SetFlashLatencyFromMSIRange>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e3c9      	b.n	800208e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018fa:	4b7d      	ldr	r3, [pc, #500]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a7c      	ldr	r2, [pc, #496]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001900:	f043 0308 	orr.w	r3, r3, #8
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	4b7a      	ldr	r3, [pc, #488]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	4977      	ldr	r1, [pc, #476]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001914:	4313      	orrs	r3, r2
 8001916:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001918:	4b75      	ldr	r3, [pc, #468]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69db      	ldr	r3, [r3, #28]
 8001924:	021b      	lsls	r3, r3, #8
 8001926:	4972      	ldr	r1, [pc, #456]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001928:	4313      	orrs	r3, r2
 800192a:	604b      	str	r3, [r1, #4]
 800192c:	e025      	b.n	800197a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800192e:	4b70      	ldr	r3, [pc, #448]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a6f      	ldr	r2, [pc, #444]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001934:	f043 0308 	orr.w	r3, r3, #8
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	4b6d      	ldr	r3, [pc, #436]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a1b      	ldr	r3, [r3, #32]
 8001946:	496a      	ldr	r1, [pc, #424]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001948:	4313      	orrs	r3, r2
 800194a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800194c:	4b68      	ldr	r3, [pc, #416]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	021b      	lsls	r3, r3, #8
 800195a:	4965      	ldr	r1, [pc, #404]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 800195c:	4313      	orrs	r3, r2
 800195e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d109      	bne.n	800197a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	4618      	mov	r0, r3
 800196c:	f000 fd38 	bl	80023e0 <RCC_SetFlashLatencyFromMSIRange>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e389      	b.n	800208e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800197a:	f000 fc6f 	bl	800225c <HAL_RCC_GetSysClockFreq>
 800197e:	4601      	mov	r1, r0
 8001980:	4b5b      	ldr	r3, [pc, #364]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	091b      	lsrs	r3, r3, #4
 8001986:	f003 030f 	and.w	r3, r3, #15
 800198a:	4a5a      	ldr	r2, [pc, #360]	; (8001af4 <HAL_RCC_OscConfig+0x29c>)
 800198c:	5cd3      	ldrb	r3, [r2, r3]
 800198e:	f003 031f 	and.w	r3, r3, #31
 8001992:	fa21 f303 	lsr.w	r3, r1, r3
 8001996:	4a58      	ldr	r2, [pc, #352]	; (8001af8 <HAL_RCC_OscConfig+0x2a0>)
 8001998:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800199a:	4b58      	ldr	r3, [pc, #352]	; (8001afc <HAL_RCC_OscConfig+0x2a4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff fbc0 	bl	8001124 <HAL_InitTick>
 80019a4:	4603      	mov	r3, r0
 80019a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d052      	beq.n	8001a54 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80019ae:	7bfb      	ldrb	r3, [r7, #15]
 80019b0:	e36d      	b.n	800208e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d032      	beq.n	8001a20 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019ba:	4b4d      	ldr	r3, [pc, #308]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a4c      	ldr	r2, [pc, #304]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019c6:	f7ff fbf9 	bl	80011bc <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019ce:	f7ff fbf5 	bl	80011bc <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e356      	b.n	800208e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019e0:	4b43      	ldr	r3, [pc, #268]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0f0      	beq.n	80019ce <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019ec:	4b40      	ldr	r3, [pc, #256]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a3f      	ldr	r2, [pc, #252]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 80019f2:	f043 0308 	orr.w	r3, r3, #8
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	4b3d      	ldr	r3, [pc, #244]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	493a      	ldr	r1, [pc, #232]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a0a:	4b39      	ldr	r3, [pc, #228]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	021b      	lsls	r3, r3, #8
 8001a18:	4935      	ldr	r1, [pc, #212]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	604b      	str	r3, [r1, #4]
 8001a1e:	e01a      	b.n	8001a56 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a20:	4b33      	ldr	r3, [pc, #204]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a32      	ldr	r2, [pc, #200]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001a26:	f023 0301 	bic.w	r3, r3, #1
 8001a2a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fbc6 	bl	80011bc <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a34:	f7ff fbc2 	bl	80011bc <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e323      	b.n	800208e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a46:	4b2a      	ldr	r3, [pc, #168]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0x1dc>
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a54:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d073      	beq.n	8001b4a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d005      	beq.n	8001a74 <HAL_RCC_OscConfig+0x21c>
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	2b0c      	cmp	r3, #12
 8001a6c:	d10e      	bne.n	8001a8c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	2b03      	cmp	r3, #3
 8001a72:	d10b      	bne.n	8001a8c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a74:	4b1e      	ldr	r3, [pc, #120]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d063      	beq.n	8001b48 <HAL_RCC_OscConfig+0x2f0>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d15f      	bne.n	8001b48 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e300      	b.n	800208e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a94:	d106      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x24c>
 8001a96:	4b16      	ldr	r3, [pc, #88]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a15      	ldr	r2, [pc, #84]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	e01d      	b.n	8001ae0 <HAL_RCC_OscConfig+0x288>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aac:	d10c      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x270>
 8001aae:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a0f      	ldr	r2, [pc, #60]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001ab4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a0c      	ldr	r2, [pc, #48]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	e00b      	b.n	8001ae0 <HAL_RCC_OscConfig+0x288>
 8001ac8:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a08      	ldr	r2, [pc, #32]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ad2:	6013      	str	r3, [r2, #0]
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a05      	ldr	r2, [pc, #20]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001ada:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ade:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d01b      	beq.n	8001b20 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae8:	f7ff fb68 	bl	80011bc <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aee:	e010      	b.n	8001b12 <HAL_RCC_OscConfig+0x2ba>
 8001af0:	40021000 	.word	0x40021000
 8001af4:	080057d0 	.word	0x080057d0
 8001af8:	20000000 	.word	0x20000000
 8001afc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b00:	f7ff fb5c 	bl	80011bc <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b64      	cmp	r3, #100	; 0x64
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e2bd      	b.n	800208e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b12:	4baf      	ldr	r3, [pc, #700]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0x2a8>
 8001b1e:	e014      	b.n	8001b4a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b20:	f7ff fb4c 	bl	80011bc <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b28:	f7ff fb48 	bl	80011bc <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b64      	cmp	r3, #100	; 0x64
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e2a9      	b.n	800208e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b3a:	4ba5      	ldr	r3, [pc, #660]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x2d0>
 8001b46:	e000      	b.n	8001b4a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d060      	beq.n	8001c18 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	2b04      	cmp	r3, #4
 8001b5a:	d005      	beq.n	8001b68 <HAL_RCC_OscConfig+0x310>
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	2b0c      	cmp	r3, #12
 8001b60:	d119      	bne.n	8001b96 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d116      	bne.n	8001b96 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b68:	4b99      	ldr	r3, [pc, #612]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d005      	beq.n	8001b80 <HAL_RCC_OscConfig+0x328>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e286      	b.n	800208e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b80:	4b93      	ldr	r3, [pc, #588]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	061b      	lsls	r3, r3, #24
 8001b8e:	4990      	ldr	r1, [pc, #576]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b94:	e040      	b.n	8001c18 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d023      	beq.n	8001be6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b9e:	4b8c      	ldr	r3, [pc, #560]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a8b      	ldr	r2, [pc, #556]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001baa:	f7ff fb07 	bl	80011bc <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb2:	f7ff fb03 	bl	80011bc <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e264      	b.n	800208e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bc4:	4b82      	ldr	r3, [pc, #520]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0f0      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd0:	4b7f      	ldr	r3, [pc, #508]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	061b      	lsls	r3, r3, #24
 8001bde:	497c      	ldr	r1, [pc, #496]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	604b      	str	r3, [r1, #4]
 8001be4:	e018      	b.n	8001c18 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001be6:	4b7a      	ldr	r3, [pc, #488]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a79      	ldr	r2, [pc, #484]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001bec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf2:	f7ff fae3 	bl	80011bc <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bfa:	f7ff fadf 	bl	80011bc <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e240      	b.n	800208e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c0c:	4b70      	ldr	r3, [pc, #448]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1f0      	bne.n	8001bfa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0308 	and.w	r3, r3, #8
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d03c      	beq.n	8001c9e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d01c      	beq.n	8001c66 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c2c:	4b68      	ldr	r3, [pc, #416]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c32:	4a67      	ldr	r2, [pc, #412]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c3c:	f7ff fabe 	bl	80011bc <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c44:	f7ff faba 	bl	80011bc <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e21b      	b.n	800208e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c56:	4b5e      	ldr	r3, [pc, #376]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001c58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0ef      	beq.n	8001c44 <HAL_RCC_OscConfig+0x3ec>
 8001c64:	e01b      	b.n	8001c9e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c66:	4b5a      	ldr	r3, [pc, #360]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c6c:	4a58      	ldr	r2, [pc, #352]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001c6e:	f023 0301 	bic.w	r3, r3, #1
 8001c72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c76:	f7ff faa1 	bl	80011bc <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c7e:	f7ff fa9d 	bl	80011bc <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e1fe      	b.n	800208e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c90:	4b4f      	ldr	r3, [pc, #316]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1ef      	bne.n	8001c7e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 80a6 	beq.w	8001df8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cac:	2300      	movs	r3, #0
 8001cae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001cb0:	4b47      	ldr	r3, [pc, #284]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d10d      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cbc:	4b44      	ldr	r3, [pc, #272]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc0:	4a43      	ldr	r2, [pc, #268]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	6593      	str	r3, [r2, #88]	; 0x58
 8001cc8:	4b41      	ldr	r3, [pc, #260]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cd8:	4b3e      	ldr	r3, [pc, #248]	; (8001dd4 <HAL_RCC_OscConfig+0x57c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d118      	bne.n	8001d16 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ce4:	4b3b      	ldr	r3, [pc, #236]	; (8001dd4 <HAL_RCC_OscConfig+0x57c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a3a      	ldr	r2, [pc, #232]	; (8001dd4 <HAL_RCC_OscConfig+0x57c>)
 8001cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cf0:	f7ff fa64 	bl	80011bc <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf8:	f7ff fa60 	bl	80011bc <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e1c1      	b.n	800208e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d0a:	4b32      	ldr	r3, [pc, #200]	; (8001dd4 <HAL_RCC_OscConfig+0x57c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0f0      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d108      	bne.n	8001d30 <HAL_RCC_OscConfig+0x4d8>
 8001d1e:	4b2c      	ldr	r3, [pc, #176]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d24:	4a2a      	ldr	r2, [pc, #168]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d2e:	e024      	b.n	8001d7a <HAL_RCC_OscConfig+0x522>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2b05      	cmp	r3, #5
 8001d36:	d110      	bne.n	8001d5a <HAL_RCC_OscConfig+0x502>
 8001d38:	4b25      	ldr	r3, [pc, #148]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d3e:	4a24      	ldr	r2, [pc, #144]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001d40:	f043 0304 	orr.w	r3, r3, #4
 8001d44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d48:	4b21      	ldr	r3, [pc, #132]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d4e:	4a20      	ldr	r2, [pc, #128]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d58:	e00f      	b.n	8001d7a <HAL_RCC_OscConfig+0x522>
 8001d5a:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d60:	4a1b      	ldr	r2, [pc, #108]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001d62:	f023 0301 	bic.w	r3, r3, #1
 8001d66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d6a:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d70:	4a17      	ldr	r2, [pc, #92]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001d72:	f023 0304 	bic.w	r3, r3, #4
 8001d76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d016      	beq.n	8001db0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d82:	f7ff fa1b 	bl	80011bc <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d88:	e00a      	b.n	8001da0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d8a:	f7ff fa17 	bl	80011bc <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e176      	b.n	800208e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0ed      	beq.n	8001d8a <HAL_RCC_OscConfig+0x532>
 8001dae:	e01a      	b.n	8001de6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db0:	f7ff fa04 	bl	80011bc <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001db6:	e00f      	b.n	8001dd8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001db8:	f7ff fa00 	bl	80011bc <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d906      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e15f      	b.n	800208e <HAL_RCC_OscConfig+0x836>
 8001dce:	bf00      	nop
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dd8:	4baa      	ldr	r3, [pc, #680]	; (8002084 <HAL_RCC_OscConfig+0x82c>)
 8001dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1e8      	bne.n	8001db8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001de6:	7ffb      	ldrb	r3, [r7, #31]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d105      	bne.n	8001df8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dec:	4ba5      	ldr	r3, [pc, #660]	; (8002084 <HAL_RCC_OscConfig+0x82c>)
 8001dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df0:	4aa4      	ldr	r2, [pc, #656]	; (8002084 <HAL_RCC_OscConfig+0x82c>)
 8001df2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001df6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0320 	and.w	r3, r3, #32
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d03c      	beq.n	8001e7e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d01c      	beq.n	8001e46 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e0c:	4b9d      	ldr	r3, [pc, #628]	; (8002084 <HAL_RCC_OscConfig+0x82c>)
 8001e0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e12:	4a9c      	ldr	r2, [pc, #624]	; (8002084 <HAL_RCC_OscConfig+0x82c>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1c:	f7ff f9ce 	bl	80011bc <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e24:	f7ff f9ca 	bl	80011bc <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e12b      	b.n	800208e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e36:	4b93      	ldr	r3, [pc, #588]	; (8002084 <HAL_RCC_OscConfig+0x82c>)
 8001e38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0ef      	beq.n	8001e24 <HAL_RCC_OscConfig+0x5cc>
 8001e44:	e01b      	b.n	8001e7e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e46:	4b8f      	ldr	r3, [pc, #572]	; (8002084 <HAL_RCC_OscConfig+0x82c>)
 8001e48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e4c:	4a8d      	ldr	r2, [pc, #564]	; (8002084 <HAL_RCC_OscConfig+0x82c>)
 8001e4e:	f023 0301 	bic.w	r3, r3, #1
 8001e52:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e56:	f7ff f9b1 	bl	80011bc <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e5c:	e008      	b.n	8001e70 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e5e:	f7ff f9ad 	bl	80011bc <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e10e      	b.n	800208e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e70:	4b84      	ldr	r3, [pc, #528]	; (8002084 <HAL_RCC_OscConfig+0x82c>)
 8001e72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1ef      	bne.n	8001e5e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 8102 	beq.w	800208c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	f040 80c5 	bne.w	800201c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e92:	4b7c      	ldr	r3, [pc, #496]	; (8002084 <HAL_RCC_OscConfig+0x82c>)
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	f003 0203 	and.w	r2, r3, #3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d12c      	bne.n	8001f00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d123      	bne.n	8001f00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ec2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d11b      	bne.n	8001f00 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d113      	bne.n	8001f00 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee2:	085b      	lsrs	r3, r3, #1
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d109      	bne.n	8001f00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	085b      	lsrs	r3, r3, #1
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d067      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	2b0c      	cmp	r3, #12
 8001f04:	d062      	beq.n	8001fcc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f06:	4b5f      	ldr	r3, [pc, #380]	; (8002084 <HAL_RCC_OscConfig+0x82c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e0bb      	b.n	800208e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f16:	4b5b      	ldr	r3, [pc, #364]	; (8002084 <HAL_RCC_OscConfig+0x82c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a5a      	ldr	r2, [pc, #360]	; (8002084 <HAL_RCC_OscConfig+0x82c>)
 8001f1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f20:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f22:	f7ff f94b 	bl	80011bc <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2a:	f7ff f947 	bl	80011bc <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e0a8      	b.n	800208e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f3c:	4b51      	ldr	r3, [pc, #324]	; (8002084 <HAL_RCC_OscConfig+0x82c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1f0      	bne.n	8001f2a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f48:	4b4e      	ldr	r3, [pc, #312]	; (8002084 <HAL_RCC_OscConfig+0x82c>)
 8001f4a:	68da      	ldr	r2, [r3, #12]
 8001f4c:	4b4e      	ldr	r3, [pc, #312]	; (8002088 <HAL_RCC_OscConfig+0x830>)
 8001f4e:	4013      	ands	r3, r2
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f58:	3a01      	subs	r2, #1
 8001f5a:	0112      	lsls	r2, r2, #4
 8001f5c:	4311      	orrs	r1, r2
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f62:	0212      	lsls	r2, r2, #8
 8001f64:	4311      	orrs	r1, r2
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f6a:	0852      	lsrs	r2, r2, #1
 8001f6c:	3a01      	subs	r2, #1
 8001f6e:	0552      	lsls	r2, r2, #21
 8001f70:	4311      	orrs	r1, r2
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f76:	0852      	lsrs	r2, r2, #1
 8001f78:	3a01      	subs	r2, #1
 8001f7a:	0652      	lsls	r2, r2, #25
 8001f7c:	4311      	orrs	r1, r2
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f82:	06d2      	lsls	r2, r2, #27
 8001f84:	430a      	orrs	r2, r1
 8001f86:	493f      	ldr	r1, [pc, #252]	; (8002084 <HAL_RCC_OscConfig+0x82c>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f8c:	4b3d      	ldr	r3, [pc, #244]	; (8002084 <HAL_RCC_OscConfig+0x82c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a3c      	ldr	r2, [pc, #240]	; (8002084 <HAL_RCC_OscConfig+0x82c>)
 8001f92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f96:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f98:	4b3a      	ldr	r3, [pc, #232]	; (8002084 <HAL_RCC_OscConfig+0x82c>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	4a39      	ldr	r2, [pc, #228]	; (8002084 <HAL_RCC_OscConfig+0x82c>)
 8001f9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fa2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fa4:	f7ff f90a 	bl	80011bc <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fac:	f7ff f906 	bl	80011bc <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e067      	b.n	800208e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fbe:	4b31      	ldr	r3, [pc, #196]	; (8002084 <HAL_RCC_OscConfig+0x82c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0f0      	beq.n	8001fac <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fca:	e05f      	b.n	800208c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e05e      	b.n	800208e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd0:	4b2c      	ldr	r3, [pc, #176]	; (8002084 <HAL_RCC_OscConfig+0x82c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d157      	bne.n	800208c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001fdc:	4b29      	ldr	r3, [pc, #164]	; (8002084 <HAL_RCC_OscConfig+0x82c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a28      	ldr	r2, [pc, #160]	; (8002084 <HAL_RCC_OscConfig+0x82c>)
 8001fe2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fe6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fe8:	4b26      	ldr	r3, [pc, #152]	; (8002084 <HAL_RCC_OscConfig+0x82c>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	4a25      	ldr	r2, [pc, #148]	; (8002084 <HAL_RCC_OscConfig+0x82c>)
 8001fee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ff2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ff4:	f7ff f8e2 	bl	80011bc <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ffc:	f7ff f8de 	bl	80011bc <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e03f      	b.n	800208e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800200e:	4b1d      	ldr	r3, [pc, #116]	; (8002084 <HAL_RCC_OscConfig+0x82c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f0      	beq.n	8001ffc <HAL_RCC_OscConfig+0x7a4>
 800201a:	e037      	b.n	800208c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	2b0c      	cmp	r3, #12
 8002020:	d02d      	beq.n	800207e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002022:	4b18      	ldr	r3, [pc, #96]	; (8002084 <HAL_RCC_OscConfig+0x82c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a17      	ldr	r2, [pc, #92]	; (8002084 <HAL_RCC_OscConfig+0x82c>)
 8002028:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800202c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800202e:	4b15      	ldr	r3, [pc, #84]	; (8002084 <HAL_RCC_OscConfig+0x82c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d105      	bne.n	8002046 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800203a:	4b12      	ldr	r3, [pc, #72]	; (8002084 <HAL_RCC_OscConfig+0x82c>)
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	4a11      	ldr	r2, [pc, #68]	; (8002084 <HAL_RCC_OscConfig+0x82c>)
 8002040:	f023 0303 	bic.w	r3, r3, #3
 8002044:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002046:	4b0f      	ldr	r3, [pc, #60]	; (8002084 <HAL_RCC_OscConfig+0x82c>)
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	4a0e      	ldr	r2, [pc, #56]	; (8002084 <HAL_RCC_OscConfig+0x82c>)
 800204c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002050:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002054:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002056:	f7ff f8b1 	bl	80011bc <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800205e:	f7ff f8ad 	bl	80011bc <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e00e      	b.n	800208e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002070:	4b04      	ldr	r3, [pc, #16]	; (8002084 <HAL_RCC_OscConfig+0x82c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1f0      	bne.n	800205e <HAL_RCC_OscConfig+0x806>
 800207c:	e006      	b.n	800208c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e005      	b.n	800208e <HAL_RCC_OscConfig+0x836>
 8002082:	bf00      	nop
 8002084:	40021000 	.word	0x40021000
 8002088:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3720      	adds	r7, #32
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop

08002098 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e0c8      	b.n	800223e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020ac:	4b66      	ldr	r3, [pc, #408]	; (8002248 <HAL_RCC_ClockConfig+0x1b0>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d910      	bls.n	80020dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ba:	4b63      	ldr	r3, [pc, #396]	; (8002248 <HAL_RCC_ClockConfig+0x1b0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f023 0207 	bic.w	r2, r3, #7
 80020c2:	4961      	ldr	r1, [pc, #388]	; (8002248 <HAL_RCC_ClockConfig+0x1b0>)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ca:	4b5f      	ldr	r3, [pc, #380]	; (8002248 <HAL_RCC_ClockConfig+0x1b0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d001      	beq.n	80020dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e0b0      	b.n	800223e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d04c      	beq.n	8002182 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b03      	cmp	r3, #3
 80020ee:	d107      	bne.n	8002100 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020f0:	4b56      	ldr	r3, [pc, #344]	; (800224c <HAL_RCC_ClockConfig+0x1b4>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d121      	bne.n	8002140 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e09e      	b.n	800223e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b02      	cmp	r3, #2
 8002106:	d107      	bne.n	8002118 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002108:	4b50      	ldr	r3, [pc, #320]	; (800224c <HAL_RCC_ClockConfig+0x1b4>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d115      	bne.n	8002140 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e092      	b.n	800223e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d107      	bne.n	8002130 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002120:	4b4a      	ldr	r3, [pc, #296]	; (800224c <HAL_RCC_ClockConfig+0x1b4>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d109      	bne.n	8002140 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e086      	b.n	800223e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002130:	4b46      	ldr	r3, [pc, #280]	; (800224c <HAL_RCC_ClockConfig+0x1b4>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e07e      	b.n	800223e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002140:	4b42      	ldr	r3, [pc, #264]	; (800224c <HAL_RCC_ClockConfig+0x1b4>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f023 0203 	bic.w	r2, r3, #3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	493f      	ldr	r1, [pc, #252]	; (800224c <HAL_RCC_ClockConfig+0x1b4>)
 800214e:	4313      	orrs	r3, r2
 8002150:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002152:	f7ff f833 	bl	80011bc <HAL_GetTick>
 8002156:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002158:	e00a      	b.n	8002170 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800215a:	f7ff f82f 	bl	80011bc <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	f241 3288 	movw	r2, #5000	; 0x1388
 8002168:	4293      	cmp	r3, r2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e066      	b.n	800223e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002170:	4b36      	ldr	r3, [pc, #216]	; (800224c <HAL_RCC_ClockConfig+0x1b4>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 020c 	and.w	r2, r3, #12
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	429a      	cmp	r2, r3
 8002180:	d1eb      	bne.n	800215a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d008      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800218e:	4b2f      	ldr	r3, [pc, #188]	; (800224c <HAL_RCC_ClockConfig+0x1b4>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	492c      	ldr	r1, [pc, #176]	; (800224c <HAL_RCC_ClockConfig+0x1b4>)
 800219c:	4313      	orrs	r3, r2
 800219e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021a0:	4b29      	ldr	r3, [pc, #164]	; (8002248 <HAL_RCC_ClockConfig+0x1b0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d210      	bcs.n	80021d0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ae:	4b26      	ldr	r3, [pc, #152]	; (8002248 <HAL_RCC_ClockConfig+0x1b0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f023 0207 	bic.w	r2, r3, #7
 80021b6:	4924      	ldr	r1, [pc, #144]	; (8002248 <HAL_RCC_ClockConfig+0x1b0>)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021be:	4b22      	ldr	r3, [pc, #136]	; (8002248 <HAL_RCC_ClockConfig+0x1b0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d001      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e036      	b.n	800223e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d008      	beq.n	80021ee <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021dc:	4b1b      	ldr	r3, [pc, #108]	; (800224c <HAL_RCC_ClockConfig+0x1b4>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	4918      	ldr	r1, [pc, #96]	; (800224c <HAL_RCC_ClockConfig+0x1b4>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0308 	and.w	r3, r3, #8
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d009      	beq.n	800220e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021fa:	4b14      	ldr	r3, [pc, #80]	; (800224c <HAL_RCC_ClockConfig+0x1b4>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	4910      	ldr	r1, [pc, #64]	; (800224c <HAL_RCC_ClockConfig+0x1b4>)
 800220a:	4313      	orrs	r3, r2
 800220c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800220e:	f000 f825 	bl	800225c <HAL_RCC_GetSysClockFreq>
 8002212:	4601      	mov	r1, r0
 8002214:	4b0d      	ldr	r3, [pc, #52]	; (800224c <HAL_RCC_ClockConfig+0x1b4>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	091b      	lsrs	r3, r3, #4
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	4a0c      	ldr	r2, [pc, #48]	; (8002250 <HAL_RCC_ClockConfig+0x1b8>)
 8002220:	5cd3      	ldrb	r3, [r2, r3]
 8002222:	f003 031f 	and.w	r3, r3, #31
 8002226:	fa21 f303 	lsr.w	r3, r1, r3
 800222a:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <HAL_RCC_ClockConfig+0x1bc>)
 800222c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800222e:	4b0a      	ldr	r3, [pc, #40]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe ff76 	bl	8001124 <HAL_InitTick>
 8002238:	4603      	mov	r3, r0
 800223a:	72fb      	strb	r3, [r7, #11]

  return status;
 800223c:	7afb      	ldrb	r3, [r7, #11]
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40022000 	.word	0x40022000
 800224c:	40021000 	.word	0x40021000
 8002250:	080057d0 	.word	0x080057d0
 8002254:	20000000 	.word	0x20000000
 8002258:	20000004 	.word	0x20000004

0800225c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800225c:	b480      	push	{r7}
 800225e:	b089      	sub	sp, #36	; 0x24
 8002260:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002262:	2300      	movs	r3, #0
 8002264:	61fb      	str	r3, [r7, #28]
 8002266:	2300      	movs	r3, #0
 8002268:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800226a:	4b3d      	ldr	r3, [pc, #244]	; (8002360 <HAL_RCC_GetSysClockFreq+0x104>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 030c 	and.w	r3, r3, #12
 8002272:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002274:	4b3a      	ldr	r3, [pc, #232]	; (8002360 <HAL_RCC_GetSysClockFreq+0x104>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d005      	beq.n	8002290 <HAL_RCC_GetSysClockFreq+0x34>
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	2b0c      	cmp	r3, #12
 8002288:	d121      	bne.n	80022ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d11e      	bne.n	80022ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002290:	4b33      	ldr	r3, [pc, #204]	; (8002360 <HAL_RCC_GetSysClockFreq+0x104>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0308 	and.w	r3, r3, #8
 8002298:	2b00      	cmp	r3, #0
 800229a:	d107      	bne.n	80022ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800229c:	4b30      	ldr	r3, [pc, #192]	; (8002360 <HAL_RCC_GetSysClockFreq+0x104>)
 800229e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022a2:	0a1b      	lsrs	r3, r3, #8
 80022a4:	f003 030f 	and.w	r3, r3, #15
 80022a8:	61fb      	str	r3, [r7, #28]
 80022aa:	e005      	b.n	80022b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022ac:	4b2c      	ldr	r3, [pc, #176]	; (8002360 <HAL_RCC_GetSysClockFreq+0x104>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	091b      	lsrs	r3, r3, #4
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022b8:	4a2a      	ldr	r2, [pc, #168]	; (8002364 <HAL_RCC_GetSysClockFreq+0x108>)
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10d      	bne.n	80022e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022cc:	e00a      	b.n	80022e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	d102      	bne.n	80022da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022d4:	4b24      	ldr	r3, [pc, #144]	; (8002368 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022d6:	61bb      	str	r3, [r7, #24]
 80022d8:	e004      	b.n	80022e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	2b08      	cmp	r3, #8
 80022de:	d101      	bne.n	80022e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022e0:	4b22      	ldr	r3, [pc, #136]	; (800236c <HAL_RCC_GetSysClockFreq+0x110>)
 80022e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	2b0c      	cmp	r3, #12
 80022e8:	d133      	bne.n	8002352 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022ea:	4b1d      	ldr	r3, [pc, #116]	; (8002360 <HAL_RCC_GetSysClockFreq+0x104>)
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d002      	beq.n	8002300 <HAL_RCC_GetSysClockFreq+0xa4>
 80022fa:	2b03      	cmp	r3, #3
 80022fc:	d003      	beq.n	8002306 <HAL_RCC_GetSysClockFreq+0xaa>
 80022fe:	e005      	b.n	800230c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002300:	4b19      	ldr	r3, [pc, #100]	; (8002368 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002302:	617b      	str	r3, [r7, #20]
      break;
 8002304:	e005      	b.n	8002312 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002306:	4b19      	ldr	r3, [pc, #100]	; (800236c <HAL_RCC_GetSysClockFreq+0x110>)
 8002308:	617b      	str	r3, [r7, #20]
      break;
 800230a:	e002      	b.n	8002312 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	617b      	str	r3, [r7, #20]
      break;
 8002310:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002312:	4b13      	ldr	r3, [pc, #76]	; (8002360 <HAL_RCC_GetSysClockFreq+0x104>)
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	091b      	lsrs	r3, r3, #4
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	3301      	adds	r3, #1
 800231e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002320:	4b0f      	ldr	r3, [pc, #60]	; (8002360 <HAL_RCC_GetSysClockFreq+0x104>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	0a1b      	lsrs	r3, r3, #8
 8002326:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	fb02 f203 	mul.w	r2, r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	fbb2 f3f3 	udiv	r3, r2, r3
 8002336:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002338:	4b09      	ldr	r3, [pc, #36]	; (8002360 <HAL_RCC_GetSysClockFreq+0x104>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	0e5b      	lsrs	r3, r3, #25
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	3301      	adds	r3, #1
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002350:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002352:	69bb      	ldr	r3, [r7, #24]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3724      	adds	r7, #36	; 0x24
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	40021000 	.word	0x40021000
 8002364:	080057e8 	.word	0x080057e8
 8002368:	00f42400 	.word	0x00f42400
 800236c:	007a1200 	.word	0x007a1200

08002370 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002374:	4b03      	ldr	r3, [pc, #12]	; (8002384 <HAL_RCC_GetHCLKFreq+0x14>)
 8002376:	681b      	ldr	r3, [r3, #0]
}
 8002378:	4618      	mov	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	20000000 	.word	0x20000000

08002388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800238c:	f7ff fff0 	bl	8002370 <HAL_RCC_GetHCLKFreq>
 8002390:	4601      	mov	r1, r0
 8002392:	4b06      	ldr	r3, [pc, #24]	; (80023ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	0a1b      	lsrs	r3, r3, #8
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	4a04      	ldr	r2, [pc, #16]	; (80023b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800239e:	5cd3      	ldrb	r3, [r2, r3]
 80023a0:	f003 031f 	and.w	r3, r3, #31
 80023a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40021000 	.word	0x40021000
 80023b0:	080057e0 	.word	0x080057e0

080023b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80023b8:	f7ff ffda 	bl	8002370 <HAL_RCC_GetHCLKFreq>
 80023bc:	4601      	mov	r1, r0
 80023be:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	0adb      	lsrs	r3, r3, #11
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	4a04      	ldr	r2, [pc, #16]	; (80023dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80023ca:	5cd3      	ldrb	r3, [r2, r3]
 80023cc:	f003 031f 	and.w	r3, r3, #31
 80023d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40021000 	.word	0x40021000
 80023dc:	080057e0 	.word	0x080057e0

080023e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023e8:	2300      	movs	r3, #0
 80023ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023ec:	4b2a      	ldr	r3, [pc, #168]	; (8002498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80023f8:	f7ff f9ca 	bl	8001790 <HAL_PWREx_GetVoltageRange>
 80023fc:	6178      	str	r0, [r7, #20]
 80023fe:	e014      	b.n	800242a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002400:	4b25      	ldr	r3, [pc, #148]	; (8002498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002404:	4a24      	ldr	r2, [pc, #144]	; (8002498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800240a:	6593      	str	r3, [r2, #88]	; 0x58
 800240c:	4b22      	ldr	r3, [pc, #136]	; (8002498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800240e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002418:	f7ff f9ba 	bl	8001790 <HAL_PWREx_GetVoltageRange>
 800241c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800241e:	4b1e      	ldr	r3, [pc, #120]	; (8002498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002422:	4a1d      	ldr	r2, [pc, #116]	; (8002498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002424:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002428:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002430:	d10b      	bne.n	800244a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b80      	cmp	r3, #128	; 0x80
 8002436:	d919      	bls.n	800246c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2ba0      	cmp	r3, #160	; 0xa0
 800243c:	d902      	bls.n	8002444 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800243e:	2302      	movs	r3, #2
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	e013      	b.n	800246c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002444:	2301      	movs	r3, #1
 8002446:	613b      	str	r3, [r7, #16]
 8002448:	e010      	b.n	800246c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b80      	cmp	r3, #128	; 0x80
 800244e:	d902      	bls.n	8002456 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002450:	2303      	movs	r3, #3
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	e00a      	b.n	800246c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b80      	cmp	r3, #128	; 0x80
 800245a:	d102      	bne.n	8002462 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800245c:	2302      	movs	r3, #2
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	e004      	b.n	800246c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b70      	cmp	r3, #112	; 0x70
 8002466:	d101      	bne.n	800246c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002468:	2301      	movs	r3, #1
 800246a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800246c:	4b0b      	ldr	r3, [pc, #44]	; (800249c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f023 0207 	bic.w	r2, r3, #7
 8002474:	4909      	ldr	r1, [pc, #36]	; (800249c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800247c:	4b07      	ldr	r3, [pc, #28]	; (800249c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	429a      	cmp	r2, r3
 8002488:	d001      	beq.n	800248e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40021000 	.word	0x40021000
 800249c:	40022000 	.word	0x40022000

080024a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024a8:	2300      	movs	r3, #0
 80024aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024ac:	2300      	movs	r3, #0
 80024ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d02f      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024c4:	d005      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80024c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024ca:	d015      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d007      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80024d0:	e00f      	b.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80024d2:	4bac      	ldr	r3, [pc, #688]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	4aab      	ldr	r2, [pc, #684]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024dc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024de:	e00c      	b.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3304      	adds	r3, #4
 80024e4:	2100      	movs	r1, #0
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 f9dc 	bl	80028a4 <RCCEx_PLLSAI1_Config>
 80024ec:	4603      	mov	r3, r0
 80024ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024f0:	e003      	b.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	74fb      	strb	r3, [r7, #19]
      break;
 80024f6:	e000      	b.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 80024f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024fa:	7cfb      	ldrb	r3, [r7, #19]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10b      	bne.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002500:	4ba0      	ldr	r3, [pc, #640]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002506:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800250e:	499d      	ldr	r1, [pc, #628]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002510:	4313      	orrs	r3, r2
 8002512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002516:	e001      	b.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002518:	7cfb      	ldrb	r3, [r7, #19]
 800251a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 8099 	beq.w	800265c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 800252a:	2300      	movs	r3, #0
 800252c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800252e:	4b95      	ldr	r3, [pc, #596]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800253a:	2301      	movs	r3, #1
 800253c:	e000      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800253e:	2300      	movs	r3, #0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00d      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002544:	4b8f      	ldr	r3, [pc, #572]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002548:	4a8e      	ldr	r2, [pc, #568]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800254a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800254e:	6593      	str	r3, [r2, #88]	; 0x58
 8002550:	4b8c      	ldr	r3, [pc, #560]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800255c:	2301      	movs	r3, #1
 800255e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002560:	4b89      	ldr	r3, [pc, #548]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a88      	ldr	r2, [pc, #544]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800256a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800256c:	f7fe fe26 	bl	80011bc <HAL_GetTick>
 8002570:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002572:	e009      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002574:	f7fe fe22 	bl	80011bc <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d902      	bls.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	74fb      	strb	r3, [r7, #19]
        break;
 8002586:	e005      	b.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002588:	4b7f      	ldr	r3, [pc, #508]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0ef      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8002594:	7cfb      	ldrb	r3, [r7, #19]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d155      	bne.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800259a:	4b7a      	ldr	r3, [pc, #488]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800259c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d01e      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d019      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025b6:	4b73      	ldr	r3, [pc, #460]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025c0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025c2:	4b70      	ldr	r3, [pc, #448]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c8:	4a6e      	ldr	r2, [pc, #440]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025d2:	4b6c      	ldr	r3, [pc, #432]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d8:	4a6a      	ldr	r2, [pc, #424]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025e2:	4a68      	ldr	r2, [pc, #416]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d016      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f4:	f7fe fde2 	bl	80011bc <HAL_GetTick>
 80025f8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025fa:	e00b      	b.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025fc:	f7fe fdde 	bl	80011bc <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	f241 3288 	movw	r2, #5000	; 0x1388
 800260a:	4293      	cmp	r3, r2
 800260c:	d902      	bls.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	74fb      	strb	r3, [r7, #19]
            break;
 8002612:	e006      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002614:	4b5b      	ldr	r3, [pc, #364]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d0ec      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8002622:	7cfb      	ldrb	r3, [r7, #19]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10b      	bne.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002628:	4b56      	ldr	r3, [pc, #344]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800262a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800262e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002636:	4953      	ldr	r1, [pc, #332]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002638:	4313      	orrs	r3, r2
 800263a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800263e:	e004      	b.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002640:	7cfb      	ldrb	r3, [r7, #19]
 8002642:	74bb      	strb	r3, [r7, #18]
 8002644:	e001      	b.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002646:	7cfb      	ldrb	r3, [r7, #19]
 8002648:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800264a:	7c7b      	ldrb	r3, [r7, #17]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d105      	bne.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002650:	4b4c      	ldr	r3, [pc, #304]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002654:	4a4b      	ldr	r2, [pc, #300]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002656:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800265a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00a      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002668:	4b46      	ldr	r3, [pc, #280]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800266a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266e:	f023 0203 	bic.w	r2, r3, #3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	4943      	ldr	r1, [pc, #268]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002678:	4313      	orrs	r3, r2
 800267a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00a      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800268a:	4b3e      	ldr	r3, [pc, #248]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800268c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002690:	f023 020c 	bic.w	r2, r3, #12
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	493a      	ldr	r1, [pc, #232]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800269a:	4313      	orrs	r3, r2
 800269c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0320 	and.w	r3, r3, #32
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00a      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026ac:	4b35      	ldr	r3, [pc, #212]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ba:	4932      	ldr	r1, [pc, #200]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00a      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026ce:	4b2d      	ldr	r3, [pc, #180]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026dc:	4929      	ldr	r1, [pc, #164]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00a      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026f0:	4b24      	ldr	r3, [pc, #144]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fe:	4921      	ldr	r1, [pc, #132]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002700:	4313      	orrs	r3, r2
 8002702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00a      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002712:	4b1c      	ldr	r3, [pc, #112]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002718:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002720:	4918      	ldr	r1, [pc, #96]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002722:	4313      	orrs	r3, r2
 8002724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00a      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002734:	4b13      	ldr	r3, [pc, #76]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	4910      	ldr	r1, [pc, #64]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002744:	4313      	orrs	r3, r2
 8002746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d02c      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002756:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	4907      	ldr	r1, [pc, #28]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002766:	4313      	orrs	r3, r2
 8002768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002774:	d10a      	bne.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002776:	4b03      	ldr	r3, [pc, #12]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	4a02      	ldr	r2, [pc, #8]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800277c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002780:	60d3      	str	r3, [r2, #12]
 8002782:	e015      	b.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002784:	40021000 	.word	0x40021000
 8002788:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002794:	d10c      	bne.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3304      	adds	r3, #4
 800279a:	2101      	movs	r1, #1
 800279c:	4618      	mov	r0, r3
 800279e:	f000 f881 	bl	80028a4 <RCCEx_PLLSAI1_Config>
 80027a2:	4603      	mov	r3, r0
 80027a4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80027a6:	7cfb      	ldrb	r3, [r7, #19]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 80027ac:	7cfb      	ldrb	r3, [r7, #19]
 80027ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d028      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027bc:	4b30      	ldr	r3, [pc, #192]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ca:	492d      	ldr	r1, [pc, #180]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027da:	d106      	bne.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027dc:	4b28      	ldr	r3, [pc, #160]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	4a27      	ldr	r2, [pc, #156]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027e6:	60d3      	str	r3, [r2, #12]
 80027e8:	e011      	b.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027f2:	d10c      	bne.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3304      	adds	r3, #4
 80027f8:	2101      	movs	r1, #1
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 f852 	bl	80028a4 <RCCEx_PLLSAI1_Config>
 8002800:	4603      	mov	r3, r0
 8002802:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002804:	7cfb      	ldrb	r3, [r7, #19]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 800280a:	7cfb      	ldrb	r3, [r7, #19]
 800280c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d01c      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800281a:	4b19      	ldr	r3, [pc, #100]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800281c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002820:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002828:	4915      	ldr	r1, [pc, #84]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800282a:	4313      	orrs	r3, r2
 800282c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002834:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002838:	d10c      	bne.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3304      	adds	r3, #4
 800283e:	2102      	movs	r1, #2
 8002840:	4618      	mov	r0, r3
 8002842:	f000 f82f 	bl	80028a4 <RCCEx_PLLSAI1_Config>
 8002846:	4603      	mov	r3, r0
 8002848:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800284a:	7cfb      	ldrb	r3, [r7, #19]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8002850:	7cfb      	ldrb	r3, [r7, #19]
 8002852:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00a      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002860:	4b07      	ldr	r3, [pc, #28]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002866:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286e:	4904      	ldr	r1, [pc, #16]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002870:	4313      	orrs	r3, r2
 8002872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002876:	7cbb      	ldrb	r3, [r7, #18]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40021000 	.word	0x40021000

08002884 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002888:	4b05      	ldr	r3, [pc, #20]	; (80028a0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a04      	ldr	r2, [pc, #16]	; (80028a0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800288e:	f043 0304 	orr.w	r3, r3, #4
 8002892:	6013      	str	r3, [r2, #0]
}
 8002894:	bf00      	nop
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	40021000 	.word	0x40021000

080028a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028b2:	4b73      	ldr	r3, [pc, #460]	; (8002a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d018      	beq.n	80028f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80028be:	4b70      	ldr	r3, [pc, #448]	; (8002a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	f003 0203 	and.w	r2, r3, #3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d10d      	bne.n	80028ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
       ||
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d009      	beq.n	80028ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80028d6:	4b6a      	ldr	r3, [pc, #424]	; (8002a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	091b      	lsrs	r3, r3, #4
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
       ||
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d044      	beq.n	8002974 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	73fb      	strb	r3, [r7, #15]
 80028ee:	e041      	b.n	8002974 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d00c      	beq.n	8002912 <RCCEx_PLLSAI1_Config+0x6e>
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	d013      	beq.n	8002924 <RCCEx_PLLSAI1_Config+0x80>
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d120      	bne.n	8002942 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002900:	4b5f      	ldr	r3, [pc, #380]	; (8002a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d11d      	bne.n	8002948 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002910:	e01a      	b.n	8002948 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002912:	4b5b      	ldr	r3, [pc, #364]	; (8002a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800291a:	2b00      	cmp	r3, #0
 800291c:	d116      	bne.n	800294c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002922:	e013      	b.n	800294c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002924:	4b56      	ldr	r3, [pc, #344]	; (8002a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10f      	bne.n	8002950 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002930:	4b53      	ldr	r3, [pc, #332]	; (8002a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d109      	bne.n	8002950 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002940:	e006      	b.n	8002950 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	73fb      	strb	r3, [r7, #15]
      break;
 8002946:	e004      	b.n	8002952 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002948:	bf00      	nop
 800294a:	e002      	b.n	8002952 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800294c:	bf00      	nop
 800294e:	e000      	b.n	8002952 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002950:	bf00      	nop
    }

    if(status == HAL_OK)
 8002952:	7bfb      	ldrb	r3, [r7, #15]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10d      	bne.n	8002974 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002958:	4b49      	ldr	r3, [pc, #292]	; (8002a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6819      	ldr	r1, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	3b01      	subs	r3, #1
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	430b      	orrs	r3, r1
 800296e:	4944      	ldr	r1, [pc, #272]	; (8002a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002970:	4313      	orrs	r3, r2
 8002972:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002974:	7bfb      	ldrb	r3, [r7, #15]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d17c      	bne.n	8002a74 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800297a:	4b41      	ldr	r3, [pc, #260]	; (8002a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a40      	ldr	r2, [pc, #256]	; (8002a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002980:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002984:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002986:	f7fe fc19 	bl	80011bc <HAL_GetTick>
 800298a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800298c:	e009      	b.n	80029a2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800298e:	f7fe fc15 	bl	80011bc <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d902      	bls.n	80029a2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	73fb      	strb	r3, [r7, #15]
        break;
 80029a0:	e005      	b.n	80029ae <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029a2:	4b37      	ldr	r3, [pc, #220]	; (8002a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1ef      	bne.n	800298e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80029ae:	7bfb      	ldrb	r3, [r7, #15]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d15f      	bne.n	8002a74 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d110      	bne.n	80029dc <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029ba:	4b31      	ldr	r3, [pc, #196]	; (8002a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80029c2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6892      	ldr	r2, [r2, #8]
 80029ca:	0211      	lsls	r1, r2, #8
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	68d2      	ldr	r2, [r2, #12]
 80029d0:	06d2      	lsls	r2, r2, #27
 80029d2:	430a      	orrs	r2, r1
 80029d4:	492a      	ldr	r1, [pc, #168]	; (8002a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	610b      	str	r3, [r1, #16]
 80029da:	e027      	b.n	8002a2c <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d112      	bne.n	8002a08 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029e2:	4b27      	ldr	r3, [pc, #156]	; (8002a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80029ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6892      	ldr	r2, [r2, #8]
 80029f2:	0211      	lsls	r1, r2, #8
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6912      	ldr	r2, [r2, #16]
 80029f8:	0852      	lsrs	r2, r2, #1
 80029fa:	3a01      	subs	r2, #1
 80029fc:	0552      	lsls	r2, r2, #21
 80029fe:	430a      	orrs	r2, r1
 8002a00:	491f      	ldr	r1, [pc, #124]	; (8002a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	610b      	str	r3, [r1, #16]
 8002a06:	e011      	b.n	8002a2c <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a08:	4b1d      	ldr	r3, [pc, #116]	; (8002a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a10:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6892      	ldr	r2, [r2, #8]
 8002a18:	0211      	lsls	r1, r2, #8
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6952      	ldr	r2, [r2, #20]
 8002a1e:	0852      	lsrs	r2, r2, #1
 8002a20:	3a01      	subs	r2, #1
 8002a22:	0652      	lsls	r2, r2, #25
 8002a24:	430a      	orrs	r2, r1
 8002a26:	4916      	ldr	r1, [pc, #88]	; (8002a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a2c:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a13      	ldr	r2, [pc, #76]	; (8002a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a38:	f7fe fbc0 	bl	80011bc <HAL_GetTick>
 8002a3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a3e:	e009      	b.n	8002a54 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a40:	f7fe fbbc 	bl	80011bc <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d902      	bls.n	8002a54 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	73fb      	strb	r3, [r7, #15]
          break;
 8002a52:	e005      	b.n	8002a60 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a54:	4b0a      	ldr	r3, [pc, #40]	; (8002a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0ef      	beq.n	8002a40 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d106      	bne.n	8002a74 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a66:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a68:	691a      	ldr	r2, [r3, #16]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	4904      	ldr	r1, [pc, #16]	; (8002a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40021000 	.word	0x40021000

08002a84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e07c      	b.n	8002b90 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d106      	bne.n	8002ab6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7fe f901 	bl	8000cb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2202      	movs	r2, #2
 8002aba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002acc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ad6:	d902      	bls.n	8002ade <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	e002      	b.n	8002ae4 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ade:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ae2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002aec:	d007      	beq.n	8002afe <HAL_SPI_Init+0x7a>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002af6:	d002      	beq.n	8002afe <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10b      	bne.n	8002b1e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b0e:	d903      	bls.n	8002b18 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	631a      	str	r2, [r3, #48]	; 0x30
 8002b16:	e002      	b.n	8002b1e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	ea42 0103 	orr.w	r1, r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	0c1b      	lsrs	r3, r3, #16
 8002b5e:	f003 0204 	and.w	r2, r3, #4
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	ea42 0103 	orr.w	r1, r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b088      	sub	sp, #32
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	603b      	str	r3, [r7, #0]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d101      	bne.n	8002bba <HAL_SPI_Transmit+0x22>
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	e150      	b.n	8002e5c <HAL_SPI_Transmit+0x2c4>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bc2:	f7fe fafb 	bl	80011bc <HAL_GetTick>
 8002bc6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002bc8:	88fb      	ldrh	r3, [r7, #6]
 8002bca:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d002      	beq.n	8002bde <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002bdc:	e135      	b.n	8002e4a <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d002      	beq.n	8002bea <HAL_SPI_Transmit+0x52>
 8002be4:	88fb      	ldrh	r3, [r7, #6]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d102      	bne.n	8002bf0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002bee:	e12c      	b.n	8002e4a <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2203      	movs	r2, #3
 8002bf4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	88fa      	ldrh	r2, [r7, #6]
 8002c08:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	88fa      	ldrh	r2, [r7, #6]
 8002c0e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c3a:	d107      	bne.n	8002c4c <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c4a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c56:	2b40      	cmp	r3, #64	; 0x40
 8002c58:	d007      	beq.n	8002c6a <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c68:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c72:	d94b      	bls.n	8002d0c <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <HAL_SPI_Transmit+0xea>
 8002c7c:	8afb      	ldrh	r3, [r7, #22]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d13e      	bne.n	8002d00 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c86:	881a      	ldrh	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c92:	1c9a      	adds	r2, r3, #2
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ca6:	e02b      	b.n	8002d00 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d112      	bne.n	8002cdc <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cba:	881a      	ldrh	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc6:	1c9a      	adds	r2, r3, #2
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cda:	e011      	b.n	8002d00 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cdc:	f7fe fa6e 	bl	80011bc <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d803      	bhi.n	8002cf4 <HAL_SPI_Transmit+0x15c>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf2:	d102      	bne.n	8002cfa <HAL_SPI_Transmit+0x162>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d102      	bne.n	8002d00 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002cfe:	e0a4      	b.n	8002e4a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1ce      	bne.n	8002ca8 <HAL_SPI_Transmit+0x110>
 8002d0a:	e07c      	b.n	8002e06 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d002      	beq.n	8002d1a <HAL_SPI_Transmit+0x182>
 8002d14:	8afb      	ldrh	r3, [r7, #22]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d170      	bne.n	8002dfc <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d912      	bls.n	8002d4a <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d28:	881a      	ldrh	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d34:	1c9a      	adds	r2, r3, #2
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	3b02      	subs	r3, #2
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d48:	e058      	b.n	8002dfc <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	330c      	adds	r3, #12
 8002d54:	7812      	ldrb	r2, [r2, #0]
 8002d56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5c:	1c5a      	adds	r2, r3, #1
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002d70:	e044      	b.n	8002dfc <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d12b      	bne.n	8002dd8 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d912      	bls.n	8002db0 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8e:	881a      	ldrh	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9a:	1c9a      	adds	r2, r3, #2
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	3b02      	subs	r3, #2
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002dae:	e025      	b.n	8002dfc <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	330c      	adds	r3, #12
 8002dba:	7812      	ldrb	r2, [r2, #0]
 8002dbc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc2:	1c5a      	adds	r2, r3, #1
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002dd6:	e011      	b.n	8002dfc <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dd8:	f7fe f9f0 	bl	80011bc <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d803      	bhi.n	8002df0 <HAL_SPI_Transmit+0x258>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dee:	d102      	bne.n	8002df6 <HAL_SPI_Transmit+0x25e>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d102      	bne.n	8002dfc <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002dfa:	e026      	b.n	8002e4a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1b5      	bne.n	8002d72 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	6839      	ldr	r1, [r7, #0]
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 f901 	bl	8003012 <SPI_EndRxTxTransaction>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d002      	beq.n	8002e1c <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10a      	bne.n	8002e3a <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e24:	2300      	movs	r3, #0
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	613b      	str	r3, [r7, #16]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	613b      	str	r3, [r7, #16]
 8002e38:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d002      	beq.n	8002e48 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	77fb      	strb	r3, [r7, #31]
 8002e46:	e000      	b.n	8002e4a <HAL_SPI_Transmit+0x2b2>
  }

error:
 8002e48:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002e5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3720      	adds	r7, #32
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	603b      	str	r3, [r7, #0]
 8002e70:	4613      	mov	r3, r2
 8002e72:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e74:	e04c      	b.n	8002f10 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7c:	d048      	beq.n	8002f10 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002e7e:	f7fe f99d 	bl	80011bc <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d902      	bls.n	8002e94 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d13d      	bne.n	8002f10 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ea2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002eac:	d111      	bne.n	8002ed2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eb6:	d004      	beq.n	8002ec2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ec0:	d107      	bne.n	8002ed2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ed0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eda:	d10f      	bne.n	8002efc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002efa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e00f      	b.n	8002f30 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	bf0c      	ite	eq
 8002f20:	2301      	moveq	r3, #1
 8002f22:	2300      	movne	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	461a      	mov	r2, r3
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d1a3      	bne.n	8002e76 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
 8002f44:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8002f46:	e057      	b.n	8002ff8 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002f4e:	d106      	bne.n	8002f5e <SPI_WaitFifoStateUntilTimeout+0x26>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d103      	bne.n	8002f5e <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	330c      	adds	r3, #12
 8002f5c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f64:	d048      	beq.n	8002ff8 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002f66:	f7fe f929 	bl	80011bc <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d902      	bls.n	8002f7c <SPI_WaitFifoStateUntilTimeout+0x44>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d13d      	bne.n	8002ff8 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f8a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f94:	d111      	bne.n	8002fba <SPI_WaitFifoStateUntilTimeout+0x82>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f9e:	d004      	beq.n	8002faa <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fa8:	d107      	bne.n	8002fba <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fb8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fc2:	d10f      	bne.n	8002fe4 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fe2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e008      	b.n	800300a <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689a      	ldr	r2, [r3, #8]
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	4013      	ands	r3, r2
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	429a      	cmp	r2, r3
 8003006:	d19f      	bne.n	8002f48 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b086      	sub	sp, #24
 8003016:	af02      	add	r7, sp, #8
 8003018:	60f8      	str	r0, [r7, #12]
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2200      	movs	r2, #0
 8003026:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f7ff ff84 	bl	8002f38 <SPI_WaitFifoStateUntilTimeout>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d007      	beq.n	8003046 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800303a:	f043 0220 	orr.w	r2, r3, #32
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e027      	b.n	8003096 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2200      	movs	r2, #0
 800304e:	2180      	movs	r1, #128	; 0x80
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f7ff ff07 	bl	8002e64 <SPI_WaitFlagStateUntilTimeout>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d007      	beq.n	800306c <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003060:	f043 0220 	orr.w	r2, r3, #32
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e014      	b.n	8003096 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2200      	movs	r2, #0
 8003074:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f7ff ff5d 	bl	8002f38 <SPI_WaitFifoStateUntilTimeout>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d007      	beq.n	8003094 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003088:	f043 0220 	orr.w	r2, r3, #32
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e000      	b.n	8003096 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b082      	sub	sp, #8
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e01d      	b.n	80030ec <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d106      	bne.n	80030ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f7fd fe3b 	bl	8000d40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2202      	movs	r2, #2
 80030ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	3304      	adds	r3, #4
 80030da:	4619      	mov	r1, r3
 80030dc:	4610      	mov	r0, r2
 80030de:	f000 fa33 	bl	8003548 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0201 	orr.w	r2, r2, #1
 800310a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	4b0c      	ldr	r3, [pc, #48]	; (8003144 <HAL_TIM_Base_Start_IT+0x50>)
 8003114:	4013      	ands	r3, r2
 8003116:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2b06      	cmp	r3, #6
 800311c:	d00b      	beq.n	8003136 <HAL_TIM_Base_Start_IT+0x42>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003124:	d007      	beq.n	8003136 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f042 0201 	orr.w	r2, r2, #1
 8003134:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3714      	adds	r7, #20
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	00010007 	.word	0x00010007

08003148 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b02      	cmp	r3, #2
 800315c:	d122      	bne.n	80031a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b02      	cmp	r3, #2
 800316a:	d11b      	bne.n	80031a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f06f 0202 	mvn.w	r2, #2
 8003174:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f9be 	bl	800350c <HAL_TIM_IC_CaptureCallback>
 8003190:	e005      	b.n	800319e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f9b0 	bl	80034f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 f9c1 	bl	8003520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	f003 0304 	and.w	r3, r3, #4
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d122      	bne.n	80031f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b04      	cmp	r3, #4
 80031be:	d11b      	bne.n	80031f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f06f 0204 	mvn.w	r2, #4
 80031c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2202      	movs	r2, #2
 80031ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f994 	bl	800350c <HAL_TIM_IC_CaptureCallback>
 80031e4:	e005      	b.n	80031f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f986 	bl	80034f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f997 	bl	8003520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b08      	cmp	r3, #8
 8003204:	d122      	bne.n	800324c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f003 0308 	and.w	r3, r3, #8
 8003210:	2b08      	cmp	r3, #8
 8003212:	d11b      	bne.n	800324c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f06f 0208 	mvn.w	r2, #8
 800321c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2204      	movs	r2, #4
 8003222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f96a 	bl	800350c <HAL_TIM_IC_CaptureCallback>
 8003238:	e005      	b.n	8003246 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f95c 	bl	80034f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 f96d 	bl	8003520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	f003 0310 	and.w	r3, r3, #16
 8003256:	2b10      	cmp	r3, #16
 8003258:	d122      	bne.n	80032a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f003 0310 	and.w	r3, r3, #16
 8003264:	2b10      	cmp	r3, #16
 8003266:	d11b      	bne.n	80032a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f06f 0210 	mvn.w	r2, #16
 8003270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2208      	movs	r2, #8
 8003276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f940 	bl	800350c <HAL_TIM_IC_CaptureCallback>
 800328c:	e005      	b.n	800329a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f932 	bl	80034f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 f943 	bl	8003520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d10e      	bne.n	80032cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d107      	bne.n	80032cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f06f 0201 	mvn.w	r2, #1
 80032c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7fd fb70 	bl	80009ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d6:	2b80      	cmp	r3, #128	; 0x80
 80032d8:	d10e      	bne.n	80032f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e4:	2b80      	cmp	r3, #128	; 0x80
 80032e6:	d107      	bne.n	80032f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 fa96 	bl	8003824 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003306:	d10e      	bne.n	8003326 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003312:	2b80      	cmp	r3, #128	; 0x80
 8003314:	d107      	bne.n	8003326 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800331e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 fa89 	bl	8003838 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003330:	2b40      	cmp	r3, #64	; 0x40
 8003332:	d10e      	bne.n	8003352 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333e:	2b40      	cmp	r3, #64	; 0x40
 8003340:	d107      	bne.n	8003352 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800334a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f8f1 	bl	8003534 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	f003 0320 	and.w	r3, r3, #32
 800335c:	2b20      	cmp	r3, #32
 800335e:	d10e      	bne.n	800337e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	f003 0320 	and.w	r3, r3, #32
 800336a:	2b20      	cmp	r3, #32
 800336c:	d107      	bne.n	800337e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f06f 0220 	mvn.w	r2, #32
 8003376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 fa49 	bl	8003810 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800337e:	bf00      	nop
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b084      	sub	sp, #16
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
 800338e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003396:	2b01      	cmp	r3, #1
 8003398:	d101      	bne.n	800339e <HAL_TIM_ConfigClockSource+0x18>
 800339a:	2302      	movs	r3, #2
 800339c:	e0a8      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x16a>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2202      	movs	r2, #2
 80033aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033bc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033c0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033c8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2b40      	cmp	r3, #64	; 0x40
 80033d8:	d067      	beq.n	80034aa <HAL_TIM_ConfigClockSource+0x124>
 80033da:	2b40      	cmp	r3, #64	; 0x40
 80033dc:	d80b      	bhi.n	80033f6 <HAL_TIM_ConfigClockSource+0x70>
 80033de:	2b10      	cmp	r3, #16
 80033e0:	d073      	beq.n	80034ca <HAL_TIM_ConfigClockSource+0x144>
 80033e2:	2b10      	cmp	r3, #16
 80033e4:	d802      	bhi.n	80033ec <HAL_TIM_ConfigClockSource+0x66>
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d06f      	beq.n	80034ca <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80033ea:	e078      	b.n	80034de <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80033ec:	2b20      	cmp	r3, #32
 80033ee:	d06c      	beq.n	80034ca <HAL_TIM_ConfigClockSource+0x144>
 80033f0:	2b30      	cmp	r3, #48	; 0x30
 80033f2:	d06a      	beq.n	80034ca <HAL_TIM_ConfigClockSource+0x144>
      break;
 80033f4:	e073      	b.n	80034de <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80033f6:	2b70      	cmp	r3, #112	; 0x70
 80033f8:	d00d      	beq.n	8003416 <HAL_TIM_ConfigClockSource+0x90>
 80033fa:	2b70      	cmp	r3, #112	; 0x70
 80033fc:	d804      	bhi.n	8003408 <HAL_TIM_ConfigClockSource+0x82>
 80033fe:	2b50      	cmp	r3, #80	; 0x50
 8003400:	d033      	beq.n	800346a <HAL_TIM_ConfigClockSource+0xe4>
 8003402:	2b60      	cmp	r3, #96	; 0x60
 8003404:	d041      	beq.n	800348a <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003406:	e06a      	b.n	80034de <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800340c:	d066      	beq.n	80034dc <HAL_TIM_ConfigClockSource+0x156>
 800340e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003412:	d017      	beq.n	8003444 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003414:	e063      	b.n	80034de <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6818      	ldr	r0, [r3, #0]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	6899      	ldr	r1, [r3, #8]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f000 f96d 	bl	8003704 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003438:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	609a      	str	r2, [r3, #8]
      break;
 8003442:	e04c      	b.n	80034de <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6818      	ldr	r0, [r3, #0]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	6899      	ldr	r1, [r3, #8]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f000 f956 	bl	8003704 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003466:	609a      	str	r2, [r3, #8]
      break;
 8003468:	e039      	b.n	80034de <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6818      	ldr	r0, [r3, #0]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	6859      	ldr	r1, [r3, #4]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	461a      	mov	r2, r3
 8003478:	f000 f8ca 	bl	8003610 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2150      	movs	r1, #80	; 0x50
 8003482:	4618      	mov	r0, r3
 8003484:	f000 f923 	bl	80036ce <TIM_ITRx_SetConfig>
      break;
 8003488:	e029      	b.n	80034de <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6818      	ldr	r0, [r3, #0]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	6859      	ldr	r1, [r3, #4]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	461a      	mov	r2, r3
 8003498:	f000 f8e9 	bl	800366e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2160      	movs	r1, #96	; 0x60
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 f913 	bl	80036ce <TIM_ITRx_SetConfig>
      break;
 80034a8:	e019      	b.n	80034de <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6818      	ldr	r0, [r3, #0]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	6859      	ldr	r1, [r3, #4]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	461a      	mov	r2, r3
 80034b8:	f000 f8aa 	bl	8003610 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2140      	movs	r1, #64	; 0x40
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 f903 	bl	80036ce <TIM_ITRx_SetConfig>
      break;
 80034c8:	e009      	b.n	80034de <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4619      	mov	r1, r3
 80034d4:	4610      	mov	r0, r2
 80034d6:	f000 f8fa 	bl	80036ce <TIM_ITRx_SetConfig>
      break;
 80034da:	e000      	b.n	80034de <HAL_TIM_ConfigClockSource+0x158>
      break;
 80034dc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a2a      	ldr	r2, [pc, #168]	; (8003604 <TIM_Base_SetConfig+0xbc>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d003      	beq.n	8003568 <TIM_Base_SetConfig+0x20>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003566:	d108      	bne.n	800357a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800356e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	4313      	orrs	r3, r2
 8003578:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a21      	ldr	r2, [pc, #132]	; (8003604 <TIM_Base_SetConfig+0xbc>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d00b      	beq.n	800359a <TIM_Base_SetConfig+0x52>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003588:	d007      	beq.n	800359a <TIM_Base_SetConfig+0x52>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a1e      	ldr	r2, [pc, #120]	; (8003608 <TIM_Base_SetConfig+0xc0>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d003      	beq.n	800359a <TIM_Base_SetConfig+0x52>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a1d      	ldr	r2, [pc, #116]	; (800360c <TIM_Base_SetConfig+0xc4>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d108      	bne.n	80035ac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a0c      	ldr	r2, [pc, #48]	; (8003604 <TIM_Base_SetConfig+0xbc>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d007      	beq.n	80035e8 <TIM_Base_SetConfig+0xa0>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a0b      	ldr	r2, [pc, #44]	; (8003608 <TIM_Base_SetConfig+0xc0>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d003      	beq.n	80035e8 <TIM_Base_SetConfig+0xa0>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a0a      	ldr	r2, [pc, #40]	; (800360c <TIM_Base_SetConfig+0xc4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d103      	bne.n	80035f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	691a      	ldr	r2, [r3, #16]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	615a      	str	r2, [r3, #20]
}
 80035f6:	bf00      	nop
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	40012c00 	.word	0x40012c00
 8003608:	40014000 	.word	0x40014000
 800360c:	40014400 	.word	0x40014400

08003610 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003610:	b480      	push	{r7}
 8003612:	b087      	sub	sp, #28
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	f023 0201 	bic.w	r2, r3, #1
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800363a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	011b      	lsls	r3, r3, #4
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	4313      	orrs	r3, r2
 8003644:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f023 030a 	bic.w	r3, r3, #10
 800364c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	4313      	orrs	r3, r2
 8003654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	621a      	str	r2, [r3, #32]
}
 8003662:	bf00      	nop
 8003664:	371c      	adds	r7, #28
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800366e:	b480      	push	{r7}
 8003670:	b087      	sub	sp, #28
 8003672:	af00      	add	r7, sp, #0
 8003674:	60f8      	str	r0, [r7, #12]
 8003676:	60b9      	str	r1, [r7, #8]
 8003678:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	f023 0210 	bic.w	r2, r3, #16
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003698:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	031b      	lsls	r3, r3, #12
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	621a      	str	r2, [r3, #32]
}
 80036c2:	bf00      	nop
 80036c4:	371c      	adds	r7, #28
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b085      	sub	sp, #20
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
 80036d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f043 0307 	orr.w	r3, r3, #7
 80036f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	609a      	str	r2, [r3, #8]
}
 80036f8:	bf00      	nop
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
 8003710:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800371e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	021a      	lsls	r2, r3, #8
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	431a      	orrs	r2, r3
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	4313      	orrs	r3, r2
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	4313      	orrs	r3, r2
 8003730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	609a      	str	r2, [r3, #8]
}
 8003738:	bf00      	nop
 800373a:	371c      	adds	r7, #28
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003754:	2b01      	cmp	r3, #1
 8003756:	d101      	bne.n	800375c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003758:	2302      	movs	r3, #2
 800375a:	e04f      	b.n	80037fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2202      	movs	r2, #2
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a21      	ldr	r2, [pc, #132]	; (8003808 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d108      	bne.n	8003798 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800378c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	4313      	orrs	r3, r2
 8003796:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800379e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a14      	ldr	r2, [pc, #80]	; (8003808 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d009      	beq.n	80037d0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c4:	d004      	beq.n	80037d0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a10      	ldr	r2, [pc, #64]	; (800380c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d10c      	bne.n	80037ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	4313      	orrs	r3, r2
 80037e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	40012c00 	.word	0x40012c00
 800380c:	40014000 	.word	0x40014000

08003810 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e040      	b.n	80038e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003862:	2b00      	cmp	r3, #0
 8003864:	d106      	bne.n	8003874 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7fd fa8a 	bl	8000d88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2224      	movs	r2, #36	; 0x24
 8003878:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0201 	bic.w	r2, r2, #1
 8003888:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f8c0 	bl	8003a10 <UART_SetConfig>
 8003890:	4603      	mov	r3, r0
 8003892:	2b01      	cmp	r3, #1
 8003894:	d101      	bne.n	800389a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e022      	b.n	80038e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d002      	beq.n	80038a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 fb9a 	bl	8003fdc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689a      	ldr	r2, [r3, #8]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 0201 	orr.w	r2, r2, #1
 80038d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 fc21 	bl	8004120 <UART_CheckIdleState>
 80038de:	4603      	mov	r3, r0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3708      	adds	r7, #8
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08a      	sub	sp, #40	; 0x28
 80038ec:	af02      	add	r7, sp, #8
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	603b      	str	r3, [r7, #0]
 80038f4:	4613      	mov	r3, r2
 80038f6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038fc:	2b20      	cmp	r3, #32
 80038fe:	f040 8081 	bne.w	8003a04 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <HAL_UART_Transmit+0x26>
 8003908:	88fb      	ldrh	r3, [r7, #6]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e079      	b.n	8003a06 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <HAL_UART_Transmit+0x38>
 800391c:	2302      	movs	r3, #2
 800391e:	e072      	b.n	8003a06 <HAL_UART_Transmit+0x11e>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2221      	movs	r2, #33	; 0x21
 8003932:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003934:	f7fd fc42 	bl	80011bc <HAL_GetTick>
 8003938:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	88fa      	ldrh	r2, [r7, #6]
 800393e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	88fa      	ldrh	r2, [r7, #6]
 8003946:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003952:	d108      	bne.n	8003966 <HAL_UART_Transmit+0x7e>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d104      	bne.n	8003966 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800395c:	2300      	movs	r3, #0
 800395e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	61bb      	str	r3, [r7, #24]
 8003964:	e003      	b.n	800396e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800396a:	2300      	movs	r3, #0
 800396c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003976:	e02d      	b.n	80039d4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	2200      	movs	r2, #0
 8003980:	2180      	movs	r1, #128	; 0x80
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 fc11 	bl	80041aa <UART_WaitOnFlagUntilTimeout>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e039      	b.n	8003a06 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10b      	bne.n	80039b0 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	881a      	ldrh	r2, [r3, #0]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039a4:	b292      	uxth	r2, r2
 80039a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	3302      	adds	r3, #2
 80039ac:	61bb      	str	r3, [r7, #24]
 80039ae:	e008      	b.n	80039c2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	781a      	ldrb	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	b292      	uxth	r2, r2
 80039ba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	3301      	adds	r3, #1
 80039c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039da:	b29b      	uxth	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1cb      	bne.n	8003978 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	9300      	str	r3, [sp, #0]
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	2200      	movs	r2, #0
 80039e8:	2140      	movs	r1, #64	; 0x40
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 fbdd 	bl	80041aa <UART_WaitOnFlagUntilTimeout>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e005      	b.n	8003a06 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2220      	movs	r2, #32
 80039fe:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	e000      	b.n	8003a06 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003a04:	2302      	movs	r3, #2
  }
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3720      	adds	r7, #32
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
	...

08003a10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a10:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003a14:	b08a      	sub	sp, #40	; 0x28
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003a22:	2300      	movs	r3, #0
 8003a24:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	431a      	orrs	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	4bb3      	ldr	r3, [pc, #716]	; (8003d14 <UART_SetConfig+0x304>)
 8003a46:	4013      	ands	r3, r2
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	6812      	ldr	r2, [r2, #0]
 8003a4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a4e:	430b      	orrs	r3, r1
 8003a50:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68da      	ldr	r2, [r3, #12]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4aa9      	ldr	r2, [pc, #676]	; (8003d18 <UART_SetConfig+0x308>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d004      	beq.n	8003a82 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a92:	430a      	orrs	r2, r1
 8003a94:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4aa0      	ldr	r2, [pc, #640]	; (8003d1c <UART_SetConfig+0x30c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d126      	bne.n	8003aee <UART_SetConfig+0xde>
 8003aa0:	4b9f      	ldr	r3, [pc, #636]	; (8003d20 <UART_SetConfig+0x310>)
 8003aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	2b03      	cmp	r3, #3
 8003aac:	d81a      	bhi.n	8003ae4 <UART_SetConfig+0xd4>
 8003aae:	a201      	add	r2, pc, #4	; (adr r2, 8003ab4 <UART_SetConfig+0xa4>)
 8003ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab4:	08003ac5 	.word	0x08003ac5
 8003ab8:	08003ad5 	.word	0x08003ad5
 8003abc:	08003acd 	.word	0x08003acd
 8003ac0:	08003add 	.word	0x08003add
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aca:	e080      	b.n	8003bce <UART_SetConfig+0x1be>
 8003acc:	2302      	movs	r3, #2
 8003ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ad2:	e07c      	b.n	8003bce <UART_SetConfig+0x1be>
 8003ad4:	2304      	movs	r3, #4
 8003ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ada:	e078      	b.n	8003bce <UART_SetConfig+0x1be>
 8003adc:	2308      	movs	r3, #8
 8003ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ae2:	e074      	b.n	8003bce <UART_SetConfig+0x1be>
 8003ae4:	2310      	movs	r3, #16
 8003ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aea:	bf00      	nop
 8003aec:	e06f      	b.n	8003bce <UART_SetConfig+0x1be>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a8c      	ldr	r2, [pc, #560]	; (8003d24 <UART_SetConfig+0x314>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d138      	bne.n	8003b6a <UART_SetConfig+0x15a>
 8003af8:	4b89      	ldr	r3, [pc, #548]	; (8003d20 <UART_SetConfig+0x310>)
 8003afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afe:	f003 030c 	and.w	r3, r3, #12
 8003b02:	2b0c      	cmp	r3, #12
 8003b04:	d82c      	bhi.n	8003b60 <UART_SetConfig+0x150>
 8003b06:	a201      	add	r2, pc, #4	; (adr r2, 8003b0c <UART_SetConfig+0xfc>)
 8003b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b0c:	08003b41 	.word	0x08003b41
 8003b10:	08003b61 	.word	0x08003b61
 8003b14:	08003b61 	.word	0x08003b61
 8003b18:	08003b61 	.word	0x08003b61
 8003b1c:	08003b51 	.word	0x08003b51
 8003b20:	08003b61 	.word	0x08003b61
 8003b24:	08003b61 	.word	0x08003b61
 8003b28:	08003b61 	.word	0x08003b61
 8003b2c:	08003b49 	.word	0x08003b49
 8003b30:	08003b61 	.word	0x08003b61
 8003b34:	08003b61 	.word	0x08003b61
 8003b38:	08003b61 	.word	0x08003b61
 8003b3c:	08003b59 	.word	0x08003b59
 8003b40:	2300      	movs	r3, #0
 8003b42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b46:	e042      	b.n	8003bce <UART_SetConfig+0x1be>
 8003b48:	2302      	movs	r3, #2
 8003b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b4e:	e03e      	b.n	8003bce <UART_SetConfig+0x1be>
 8003b50:	2304      	movs	r3, #4
 8003b52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b56:	e03a      	b.n	8003bce <UART_SetConfig+0x1be>
 8003b58:	2308      	movs	r3, #8
 8003b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b5e:	e036      	b.n	8003bce <UART_SetConfig+0x1be>
 8003b60:	2310      	movs	r3, #16
 8003b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b66:	bf00      	nop
 8003b68:	e031      	b.n	8003bce <UART_SetConfig+0x1be>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a6a      	ldr	r2, [pc, #424]	; (8003d18 <UART_SetConfig+0x308>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d129      	bne.n	8003bc8 <UART_SetConfig+0x1b8>
 8003b74:	4b6a      	ldr	r3, [pc, #424]	; (8003d20 <UART_SetConfig+0x310>)
 8003b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b82:	d014      	beq.n	8003bae <UART_SetConfig+0x19e>
 8003b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b88:	d802      	bhi.n	8003b90 <UART_SetConfig+0x180>
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d007      	beq.n	8003b9e <UART_SetConfig+0x18e>
 8003b8e:	e016      	b.n	8003bbe <UART_SetConfig+0x1ae>
 8003b90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b94:	d007      	beq.n	8003ba6 <UART_SetConfig+0x196>
 8003b96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b9a:	d00c      	beq.n	8003bb6 <UART_SetConfig+0x1a6>
 8003b9c:	e00f      	b.n	8003bbe <UART_SetConfig+0x1ae>
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ba4:	e013      	b.n	8003bce <UART_SetConfig+0x1be>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bac:	e00f      	b.n	8003bce <UART_SetConfig+0x1be>
 8003bae:	2304      	movs	r3, #4
 8003bb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bb4:	e00b      	b.n	8003bce <UART_SetConfig+0x1be>
 8003bb6:	2308      	movs	r3, #8
 8003bb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bbc:	e007      	b.n	8003bce <UART_SetConfig+0x1be>
 8003bbe:	2310      	movs	r3, #16
 8003bc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bc4:	bf00      	nop
 8003bc6:	e002      	b.n	8003bce <UART_SetConfig+0x1be>
 8003bc8:	2310      	movs	r3, #16
 8003bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a51      	ldr	r2, [pc, #324]	; (8003d18 <UART_SetConfig+0x308>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	f040 80fa 	bne.w	8003dce <UART_SetConfig+0x3be>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003bda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bde:	2b08      	cmp	r3, #8
 8003be0:	d823      	bhi.n	8003c2a <UART_SetConfig+0x21a>
 8003be2:	a201      	add	r2, pc, #4	; (adr r2, 8003be8 <UART_SetConfig+0x1d8>)
 8003be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be8:	08003c0d 	.word	0x08003c0d
 8003bec:	08003c2b 	.word	0x08003c2b
 8003bf0:	08003c15 	.word	0x08003c15
 8003bf4:	08003c2b 	.word	0x08003c2b
 8003bf8:	08003c1b 	.word	0x08003c1b
 8003bfc:	08003c2b 	.word	0x08003c2b
 8003c00:	08003c2b 	.word	0x08003c2b
 8003c04:	08003c2b 	.word	0x08003c2b
 8003c08:	08003c23 	.word	0x08003c23
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003c0c:	f7fe fbbc 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 8003c10:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c12:	e00d      	b.n	8003c30 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003c14:	4b44      	ldr	r3, [pc, #272]	; (8003d28 <UART_SetConfig+0x318>)
 8003c16:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c18:	e00a      	b.n	8003c30 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003c1a:	f7fe fb1f 	bl	800225c <HAL_RCC_GetSysClockFreq>
 8003c1e:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c20:	e006      	b.n	8003c30 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c26:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c28:	e002      	b.n	8003c30 <UART_SetConfig+0x220>
      default:
        ret = HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	76fb      	strb	r3, [r7, #27]
        break;
 8003c2e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 81c6 	beq.w	8003fc4 <UART_SetConfig+0x5b4>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	4413      	add	r3, r2
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d305      	bcc.n	8003c54 <UART_SetConfig+0x244>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d902      	bls.n	8003c5a <UART_SetConfig+0x24a>
      {
        ret = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	76fb      	strb	r3, [r7, #27]
 8003c58:	e1b4      	b.n	8003fc4 <UART_SetConfig+0x5b4>
      }
      else
      {
        switch (clocksource)
 8003c5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c5e:	2b08      	cmp	r3, #8
 8003c60:	f200 80a2 	bhi.w	8003da8 <UART_SetConfig+0x398>
 8003c64:	a201      	add	r2, pc, #4	; (adr r2, 8003c6c <UART_SetConfig+0x25c>)
 8003c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6a:	bf00      	nop
 8003c6c:	08003c91 	.word	0x08003c91
 8003c70:	08003da9 	.word	0x08003da9
 8003c74:	08003cdf 	.word	0x08003cdf
 8003c78:	08003da9 	.word	0x08003da9
 8003c7c:	08003d31 	.word	0x08003d31
 8003c80:	08003da9 	.word	0x08003da9
 8003c84:	08003da9 	.word	0x08003da9
 8003c88:	08003da9 	.word	0x08003da9
 8003c8c:	08003d7f 	.word	0x08003d7f
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8003c90:	f7fe fb7a 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 8003c94:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	4619      	mov	r1, r3
 8003c9a:	f04f 0200 	mov.w	r2, #0
 8003c9e:	f04f 0300 	mov.w	r3, #0
 8003ca2:	f04f 0400 	mov.w	r4, #0
 8003ca6:	0214      	lsls	r4, r2, #8
 8003ca8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003cac:	020b      	lsls	r3, r1, #8
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6852      	ldr	r2, [r2, #4]
 8003cb2:	0852      	lsrs	r2, r2, #1
 8003cb4:	4611      	mov	r1, r2
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	eb13 0b01 	adds.w	fp, r3, r1
 8003cbe:	eb44 0c02 	adc.w	ip, r4, r2
 8003cc2:	4658      	mov	r0, fp
 8003cc4:	4661      	mov	r1, ip
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f04f 0400 	mov.w	r4, #0
 8003cce:	461a      	mov	r2, r3
 8003cd0:	4623      	mov	r3, r4
 8003cd2:	f7fc fa7b 	bl	80001cc <__aeabi_uldivmod>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	460c      	mov	r4, r1
 8003cda:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003cdc:	e067      	b.n	8003dae <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	085b      	lsrs	r3, r3, #1
 8003ce4:	f04f 0400 	mov.w	r4, #0
 8003ce8:	4910      	ldr	r1, [pc, #64]	; (8003d2c <UART_SetConfig+0x31c>)
 8003cea:	f04f 0200 	mov.w	r2, #0
 8003cee:	eb13 0b01 	adds.w	fp, r3, r1
 8003cf2:	eb44 0c02 	adc.w	ip, r4, r2
 8003cf6:	4658      	mov	r0, fp
 8003cf8:	4661      	mov	r1, ip
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f04f 0400 	mov.w	r4, #0
 8003d02:	461a      	mov	r2, r3
 8003d04:	4623      	mov	r3, r4
 8003d06:	f7fc fa61 	bl	80001cc <__aeabi_uldivmod>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	460c      	mov	r4, r1
 8003d0e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003d10:	e04d      	b.n	8003dae <UART_SetConfig+0x39e>
 8003d12:	bf00      	nop
 8003d14:	efff69f3 	.word	0xefff69f3
 8003d18:	40008000 	.word	0x40008000
 8003d1c:	40013800 	.word	0x40013800
 8003d20:	40021000 	.word	0x40021000
 8003d24:	40004400 	.word	0x40004400
 8003d28:	00f42400 	.word	0x00f42400
 8003d2c:	f4240000 	.word	0xf4240000
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8003d30:	f7fe fa94 	bl	800225c <HAL_RCC_GetSysClockFreq>
 8003d34:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	4619      	mov	r1, r3
 8003d3a:	f04f 0200 	mov.w	r2, #0
 8003d3e:	f04f 0300 	mov.w	r3, #0
 8003d42:	f04f 0400 	mov.w	r4, #0
 8003d46:	0214      	lsls	r4, r2, #8
 8003d48:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003d4c:	020b      	lsls	r3, r1, #8
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6852      	ldr	r2, [r2, #4]
 8003d52:	0852      	lsrs	r2, r2, #1
 8003d54:	4611      	mov	r1, r2
 8003d56:	f04f 0200 	mov.w	r2, #0
 8003d5a:	eb13 0b01 	adds.w	fp, r3, r1
 8003d5e:	eb44 0c02 	adc.w	ip, r4, r2
 8003d62:	4658      	mov	r0, fp
 8003d64:	4661      	mov	r1, ip
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f04f 0400 	mov.w	r4, #0
 8003d6e:	461a      	mov	r2, r3
 8003d70:	4623      	mov	r3, r4
 8003d72:	f7fc fa2b 	bl	80001cc <__aeabi_uldivmod>
 8003d76:	4603      	mov	r3, r0
 8003d78:	460c      	mov	r4, r1
 8003d7a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003d7c:	e017      	b.n	8003dae <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	085b      	lsrs	r3, r3, #1
 8003d84:	f04f 0400 	mov.w	r4, #0
 8003d88:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8003d8c:	f144 0100 	adc.w	r1, r4, #0
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f04f 0400 	mov.w	r4, #0
 8003d98:	461a      	mov	r2, r3
 8003d9a:	4623      	mov	r3, r4
 8003d9c:	f7fc fa16 	bl	80001cc <__aeabi_uldivmod>
 8003da0:	4603      	mov	r3, r0
 8003da2:	460c      	mov	r4, r1
 8003da4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003da6:	e002      	b.n	8003dae <UART_SetConfig+0x39e>
          default:
            ret = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	76fb      	strb	r3, [r7, #27]
            break;
 8003dac:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003db4:	d308      	bcc.n	8003dc8 <UART_SetConfig+0x3b8>
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dbc:	d204      	bcs.n	8003dc8 <UART_SetConfig+0x3b8>
        {
          huart->Instance->BRR = usartdiv;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	69fa      	ldr	r2, [r7, #28]
 8003dc4:	60da      	str	r2, [r3, #12]
 8003dc6:	e0fd      	b.n	8003fc4 <UART_SetConfig+0x5b4>
        }
        else
        {
          ret = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	76fb      	strb	r3, [r7, #27]
 8003dcc:	e0fa      	b.n	8003fc4 <UART_SetConfig+0x5b4>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dd6:	f040 8083 	bne.w	8003ee0 <UART_SetConfig+0x4d0>
  {
    switch (clocksource)
 8003dda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003dde:	2b08      	cmp	r3, #8
 8003de0:	d85e      	bhi.n	8003ea0 <UART_SetConfig+0x490>
 8003de2:	a201      	add	r2, pc, #4	; (adr r2, 8003de8 <UART_SetConfig+0x3d8>)
 8003de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de8:	08003e0d 	.word	0x08003e0d
 8003dec:	08003e2d 	.word	0x08003e2d
 8003df0:	08003e4d 	.word	0x08003e4d
 8003df4:	08003ea1 	.word	0x08003ea1
 8003df8:	08003e69 	.word	0x08003e69
 8003dfc:	08003ea1 	.word	0x08003ea1
 8003e00:	08003ea1 	.word	0x08003ea1
 8003e04:	08003ea1 	.word	0x08003ea1
 8003e08:	08003e89 	.word	0x08003e89
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e0c:	f7fe fabc 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 8003e10:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	005a      	lsls	r2, r3, #1
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	085b      	lsrs	r3, r3, #1
 8003e1c:	441a      	add	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003e2a:	e03c      	b.n	8003ea6 <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e2c:	f7fe fac2 	bl	80023b4 <HAL_RCC_GetPCLK2Freq>
 8003e30:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	005a      	lsls	r2, r3, #1
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	085b      	lsrs	r3, r3, #1
 8003e3c:	441a      	add	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003e4a:	e02c      	b.n	8003ea6 <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	085b      	lsrs	r3, r3, #1
 8003e52:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003e56:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	6852      	ldr	r2, [r2, #4]
 8003e5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003e66:	e01e      	b.n	8003ea6 <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e68:	f7fe f9f8 	bl	800225c <HAL_RCC_GetSysClockFreq>
 8003e6c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	005a      	lsls	r2, r3, #1
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	085b      	lsrs	r3, r3, #1
 8003e78:	441a      	add	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003e86:	e00e      	b.n	8003ea6 <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	085b      	lsrs	r3, r3, #1
 8003e8e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003e9e:	e002      	b.n	8003ea6 <UART_SetConfig+0x496>
      default:
        ret = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	76fb      	strb	r3, [r7, #27]
        break;
 8003ea4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	2b0f      	cmp	r3, #15
 8003eaa:	d916      	bls.n	8003eda <UART_SetConfig+0x4ca>
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb2:	d212      	bcs.n	8003eda <UART_SetConfig+0x4ca>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	f023 030f 	bic.w	r3, r3, #15
 8003ebc:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	085b      	lsrs	r3, r3, #1
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	89fb      	ldrh	r3, [r7, #14]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	89fa      	ldrh	r2, [r7, #14]
 8003ed6:	60da      	str	r2, [r3, #12]
 8003ed8:	e074      	b.n	8003fc4 <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	76fb      	strb	r3, [r7, #27]
 8003ede:	e071      	b.n	8003fc4 <UART_SetConfig+0x5b4>
    }
  }
  else
  {
    switch (clocksource)
 8003ee0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ee4:	2b08      	cmp	r3, #8
 8003ee6:	d85c      	bhi.n	8003fa2 <UART_SetConfig+0x592>
 8003ee8:	a201      	add	r2, pc, #4	; (adr r2, 8003ef0 <UART_SetConfig+0x4e0>)
 8003eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eee:	bf00      	nop
 8003ef0:	08003f15 	.word	0x08003f15
 8003ef4:	08003f33 	.word	0x08003f33
 8003ef8:	08003f51 	.word	0x08003f51
 8003efc:	08003fa3 	.word	0x08003fa3
 8003f00:	08003f6d 	.word	0x08003f6d
 8003f04:	08003fa3 	.word	0x08003fa3
 8003f08:	08003fa3 	.word	0x08003fa3
 8003f0c:	08003fa3 	.word	0x08003fa3
 8003f10:	08003f8b 	.word	0x08003f8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f14:	f7fe fa38 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 8003f18:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	085a      	lsrs	r2, r3, #1
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	441a      	add	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003f30:	e03a      	b.n	8003fa8 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f32:	f7fe fa3f 	bl	80023b4 <HAL_RCC_GetPCLK2Freq>
 8003f36:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	085a      	lsrs	r2, r3, #1
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	441a      	add	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003f4e:	e02b      	b.n	8003fa8 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	085b      	lsrs	r3, r3, #1
 8003f56:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003f5a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	6852      	ldr	r2, [r2, #4]
 8003f62:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003f6a:	e01d      	b.n	8003fa8 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f6c:	f7fe f976 	bl	800225c <HAL_RCC_GetSysClockFreq>
 8003f70:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	085a      	lsrs	r2, r3, #1
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	441a      	add	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003f88:	e00e      	b.n	8003fa8 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	085b      	lsrs	r3, r3, #1
 8003f90:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003fa0:	e002      	b.n	8003fa8 <UART_SetConfig+0x598>
      default:
        ret = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	76fb      	strb	r3, [r7, #27]
        break;
 8003fa6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	2b0f      	cmp	r3, #15
 8003fac:	d908      	bls.n	8003fc0 <UART_SetConfig+0x5b0>
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb4:	d204      	bcs.n	8003fc0 <UART_SetConfig+0x5b0>
    {
      huart->Instance->BRR = usartdiv;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	69fa      	ldr	r2, [r7, #28]
 8003fbc:	60da      	str	r2, [r3, #12]
 8003fbe:	e001      	b.n	8003fc4 <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003fd0:	7efb      	ldrb	r3, [r7, #27]
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3728      	adds	r7, #40	; 0x28
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08003fdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00a      	beq.n	8004006 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	430a      	orrs	r2, r1
 8004004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00a      	beq.n	8004028 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	f003 0304 	and.w	r3, r3, #4
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00a      	beq.n	800404a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	f003 0308 	and.w	r3, r3, #8
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00a      	beq.n	800406c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	430a      	orrs	r2, r1
 800406a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	f003 0310 	and.w	r3, r3, #16
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00a      	beq.n	800408e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	f003 0320 	and.w	r3, r3, #32
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00a      	beq.n	80040b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d01a      	beq.n	80040f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040da:	d10a      	bne.n	80040f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	605a      	str	r2, [r3, #4]
  }
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af02      	add	r7, sp, #8
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800412e:	f7fd f845 	bl	80011bc <HAL_GetTick>
 8004132:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0308 	and.w	r3, r3, #8
 800413e:	2b08      	cmp	r3, #8
 8004140:	d10e      	bne.n	8004160 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004142:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 f82a 	bl	80041aa <UART_WaitOnFlagUntilTimeout>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e020      	b.n	80041a2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0304 	and.w	r3, r3, #4
 800416a:	2b04      	cmp	r3, #4
 800416c:	d10e      	bne.n	800418c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800416e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f814 	bl	80041aa <UART_WaitOnFlagUntilTimeout>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d001      	beq.n	800418c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e00a      	b.n	80041a2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2220      	movs	r2, #32
 8004190:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2220      	movs	r2, #32
 8004196:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b084      	sub	sp, #16
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	60f8      	str	r0, [r7, #12]
 80041b2:	60b9      	str	r1, [r7, #8]
 80041b4:	603b      	str	r3, [r7, #0]
 80041b6:	4613      	mov	r3, r2
 80041b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ba:	e05d      	b.n	8004278 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c2:	d059      	beq.n	8004278 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041c4:	f7fc fffa 	bl	80011bc <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d302      	bcc.n	80041da <UART_WaitOnFlagUntilTimeout+0x30>
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d11b      	bne.n	8004212 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041e8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0201 	bic.w	r2, r2, #1
 80041f8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2220      	movs	r2, #32
 80041fe:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2220      	movs	r2, #32
 8004204:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e042      	b.n	8004298 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	d02b      	beq.n	8004278 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800422a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800422e:	d123      	bne.n	8004278 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004238:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004248:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	689a      	ldr	r2, [r3, #8]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 0201 	bic.w	r2, r2, #1
 8004258:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2220      	movs	r2, #32
 800425e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2220      	movs	r2, #32
 8004264:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2220      	movs	r2, #32
 800426a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e00f      	b.n	8004298 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	69da      	ldr	r2, [r3, #28]
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	4013      	ands	r3, r2
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	429a      	cmp	r2, r3
 8004286:	bf0c      	ite	eq
 8004288:	2301      	moveq	r3, #1
 800428a:	2300      	movne	r3, #0
 800428c:	b2db      	uxtb	r3, r3
 800428e:	461a      	mov	r2, r3
 8004290:	79fb      	ldrb	r3, [r7, #7]
 8004292:	429a      	cmp	r2, r3
 8004294:	d092      	beq.n	80041bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <DISP_SPI_send>:
    HAL_Delay(100);
    HAL_GPIO_WritePin(DISP_RST_PIN, GPIO_PIN_SET);
    HAL_Delay(100);
}

static void DISP_SPI_send(uint8_t data) {
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	4603      	mov	r3, r0
 80042a8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 80042aa:	1df9      	adds	r1, r7, #7
 80042ac:	2364      	movs	r3, #100	; 0x64
 80042ae:	2201      	movs	r2, #1
 80042b0:	4803      	ldr	r0, [pc, #12]	; (80042c0 <DISP_SPI_send+0x20>)
 80042b2:	f7fe fc71 	bl	8002b98 <HAL_SPI_Transmit>
}
 80042b6:	bf00      	nop
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	200000c4 	.word	0x200000c4

080042c4 <DISP_SendCommand>:

void DISP_SendCommand(uint8_t reg) {
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	4603      	mov	r3, r0
 80042cc:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(DISP_CS_PIN, GPIO_PIN_RESET);
 80042ce:	2200      	movs	r2, #0
 80042d0:	2110      	movs	r1, #16
 80042d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042d6:	f7fd fa1b 	bl	8001710 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_PIN, GPIO_PIN_RESET);
 80042da:	2200      	movs	r2, #0
 80042dc:	2180      	movs	r1, #128	; 0x80
 80042de:	4805      	ldr	r0, [pc, #20]	; (80042f4 <DISP_SendCommand+0x30>)
 80042e0:	f7fd fa16 	bl	8001710 <HAL_GPIO_WritePin>
	DISP_SPI_send(reg);
 80042e4:	79fb      	ldrb	r3, [r7, #7]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7ff ffda 	bl	80042a0 <DISP_SPI_send>
}
 80042ec:	bf00      	nop
 80042ee:	3708      	adds	r7, #8
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	48000400 	.word	0x48000400

080042f8 <DISP_SendData_8Bit>:

void DISP_SendData_8Bit(uint8_t data) {
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	4603      	mov	r3, r0
 8004300:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISP_CS_PIN, GPIO_PIN_RESET);
 8004302:	2200      	movs	r2, #0
 8004304:	2110      	movs	r1, #16
 8004306:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800430a:	f7fd fa01 	bl	8001710 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_PIN, GPIO_PIN_SET);
 800430e:	2201      	movs	r2, #1
 8004310:	2180      	movs	r1, #128	; 0x80
 8004312:	4808      	ldr	r0, [pc, #32]	; (8004334 <DISP_SendData_8Bit+0x3c>)
 8004314:	f7fd f9fc 	bl	8001710 <HAL_GPIO_WritePin>
	DISP_SPI_send(data);
 8004318:	79fb      	ldrb	r3, [r7, #7]
 800431a:	4618      	mov	r0, r3
 800431c:	f7ff ffc0 	bl	80042a0 <DISP_SPI_send>
    HAL_GPIO_WritePin(DISP_CS_PIN, GPIO_PIN_SET);
 8004320:	2201      	movs	r2, #1
 8004322:	2110      	movs	r1, #16
 8004324:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004328:	f7fd f9f2 	bl	8001710 <HAL_GPIO_WritePin>
}
 800432c:	bf00      	nop
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	48000400 	.word	0x48000400

08004338 <DISP_SendData_16Bit>:

void DISP_SendData_16Bit(uint16_t data) {
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	4603      	mov	r3, r0
 8004340:	80fb      	strh	r3, [r7, #6]

	uint8_t data_h = (uint8_t)(data >> 8);
 8004342:	88fb      	ldrh	r3, [r7, #6]
 8004344:	0a1b      	lsrs	r3, r3, #8
 8004346:	b29b      	uxth	r3, r3
 8004348:	73fb      	strb	r3, [r7, #15]
	uint8_t data_l = (uint8_t) data;
 800434a:	88fb      	ldrh	r3, [r7, #6]
 800434c:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(DISP_CS_PIN, GPIO_PIN_RESET);
 800434e:	2200      	movs	r2, #0
 8004350:	2110      	movs	r1, #16
 8004352:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004356:	f7fd f9db 	bl	8001710 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_PIN, GPIO_PIN_SET);
 800435a:	2201      	movs	r2, #1
 800435c:	2180      	movs	r1, #128	; 0x80
 800435e:	480a      	ldr	r0, [pc, #40]	; (8004388 <DISP_SendData_16Bit+0x50>)
 8004360:	f7fd f9d6 	bl	8001710 <HAL_GPIO_WritePin>
	DISP_SPI_send(data_h);
 8004364:	7bfb      	ldrb	r3, [r7, #15]
 8004366:	4618      	mov	r0, r3
 8004368:	f7ff ff9a 	bl	80042a0 <DISP_SPI_send>
	DISP_SPI_send(data_l);
 800436c:	7bbb      	ldrb	r3, [r7, #14]
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff ff96 	bl	80042a0 <DISP_SPI_send>
    HAL_GPIO_WritePin(DISP_CS_PIN, GPIO_PIN_SET);
 8004374:	2201      	movs	r2, #1
 8004376:	2110      	movs	r1, #16
 8004378:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800437c:	f7fd f9c8 	bl	8001710 <HAL_GPIO_WritePin>
}
 8004380:	bf00      	nop
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	48000400 	.word	0x48000400

0800438c <DISP_SetCursor>:
		Xstart 	:   X direction Start coordinates
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void DISP_SetCursor(uint16_t Xstart, uint16_t Ystart, uint16_t Xend, uint16_t Yend) {
 800438c:	b590      	push	{r4, r7, lr}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	4604      	mov	r4, r0
 8004394:	4608      	mov	r0, r1
 8004396:	4611      	mov	r1, r2
 8004398:	461a      	mov	r2, r3
 800439a:	4623      	mov	r3, r4
 800439c:	80fb      	strh	r3, [r7, #6]
 800439e:	4603      	mov	r3, r0
 80043a0:	80bb      	strh	r3, [r7, #4]
 80043a2:	460b      	mov	r3, r1
 80043a4:	807b      	strh	r3, [r7, #2]
 80043a6:	4613      	mov	r3, r2
 80043a8:	803b      	strh	r3, [r7, #0]

    //set the X coordinates
    DISP_SendCommand(0x2A);
 80043aa:	202a      	movs	r0, #42	; 0x2a
 80043ac:	f7ff ff8a 	bl	80042c4 <DISP_SendCommand>
    DISP_SendData_8Bit(0x00);
 80043b0:	2000      	movs	r0, #0
 80043b2:	f7ff ffa1 	bl	80042f8 <DISP_SendData_8Bit>
    DISP_SendData_8Bit(Xstart);
 80043b6:	88fb      	ldrh	r3, [r7, #6]
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7ff ff9c 	bl	80042f8 <DISP_SendData_8Bit>
    DISP_SendData_8Bit(0x00);
 80043c0:	2000      	movs	r0, #0
 80043c2:	f7ff ff99 	bl	80042f8 <DISP_SendData_8Bit>
    DISP_SendData_8Bit(Xend);
 80043c6:	887b      	ldrh	r3, [r7, #2]
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff ff94 	bl	80042f8 <DISP_SendData_8Bit>

    //set the Y coordinates
    DISP_SendCommand(0x2B);
 80043d0:	202b      	movs	r0, #43	; 0x2b
 80043d2:	f7ff ff77 	bl	80042c4 <DISP_SendCommand>
    DISP_SendData_8Bit(0x00);
 80043d6:	2000      	movs	r0, #0
 80043d8:	f7ff ff8e 	bl	80042f8 <DISP_SendData_8Bit>
    DISP_SendData_8Bit(Ystart);
 80043dc:	88bb      	ldrh	r3, [r7, #4]
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff ff89 	bl	80042f8 <DISP_SendData_8Bit>
    DISP_SendData_8Bit(0x00);
 80043e6:	2000      	movs	r0, #0
 80043e8:	f7ff ff86 	bl	80042f8 <DISP_SendData_8Bit>
    DISP_SendData_8Bit(Yend);
 80043ec:	883b      	ldrh	r3, [r7, #0]
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7ff ff81 	bl	80042f8 <DISP_SendData_8Bit>

    DISP_SendCommand(0X2C);
 80043f6:	202c      	movs	r0, #44	; 0x2c
 80043f8:	f7ff ff64 	bl	80042c4 <DISP_SendCommand>
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	bd90      	pop	{r4, r7, pc}

08004404 <DISP_Clear>:

void DISP_Clear(uint16_t Color) {
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	4603      	mov	r3, r0
 800440c:	80fb      	strh	r3, [r7, #6]

    uint16_t i,j;
    DISP_SetCursor(0, 0, DISP_WIDTH-1, DISP_HEIGHT-1);
 800440e:	23ef      	movs	r3, #239	; 0xef
 8004410:	22ef      	movs	r2, #239	; 0xef
 8004412:	2100      	movs	r1, #0
 8004414:	2000      	movs	r0, #0
 8004416:	f7ff ffb9 	bl	800438c <DISP_SetCursor>

    HAL_GPIO_WritePin(DISP_DC_PIN, GPIO_PIN_SET);
 800441a:	2201      	movs	r2, #1
 800441c:	2180      	movs	r1, #128	; 0x80
 800441e:	4812      	ldr	r0, [pc, #72]	; (8004468 <DISP_Clear+0x64>)
 8004420:	f7fd f976 	bl	8001710 <HAL_GPIO_WritePin>
	for(i = 0; i < DISP_WIDTH; i++){
 8004424:	2300      	movs	r3, #0
 8004426:	81fb      	strh	r3, [r7, #14]
 8004428:	e017      	b.n	800445a <DISP_Clear+0x56>
		for(j = 0; j < DISP_HEIGHT; j++){
 800442a:	2300      	movs	r3, #0
 800442c:	81bb      	strh	r3, [r7, #12]
 800442e:	e00e      	b.n	800444e <DISP_Clear+0x4a>
			DISP_SPI_send(Color>>8);
 8004430:	88fb      	ldrh	r3, [r7, #6]
 8004432:	0a1b      	lsrs	r3, r3, #8
 8004434:	b29b      	uxth	r3, r3
 8004436:	b2db      	uxtb	r3, r3
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff ff31 	bl	80042a0 <DISP_SPI_send>
			DISP_SPI_send(Color);
 800443e:	88fb      	ldrh	r3, [r7, #6]
 8004440:	b2db      	uxtb	r3, r3
 8004442:	4618      	mov	r0, r3
 8004444:	f7ff ff2c 	bl	80042a0 <DISP_SPI_send>
		for(j = 0; j < DISP_HEIGHT; j++){
 8004448:	89bb      	ldrh	r3, [r7, #12]
 800444a:	3301      	adds	r3, #1
 800444c:	81bb      	strh	r3, [r7, #12]
 800444e:	89bb      	ldrh	r3, [r7, #12]
 8004450:	2bef      	cmp	r3, #239	; 0xef
 8004452:	d9ed      	bls.n	8004430 <DISP_Clear+0x2c>
	for(i = 0; i < DISP_WIDTH; i++){
 8004454:	89fb      	ldrh	r3, [r7, #14]
 8004456:	3301      	adds	r3, #1
 8004458:	81fb      	strh	r3, [r7, #14]
 800445a:	89fb      	ldrh	r3, [r7, #14]
 800445c:	2bef      	cmp	r3, #239	; 0xef
 800445e:	d9e4      	bls.n	800442a <DISP_Clear+0x26>
		}
	 }
}
 8004460:	bf00      	nop
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	48000400 	.word	0x48000400

0800446c <DISP_DrawPaint>:
	    X	: 	Set the X coordinate
	    Y	:	Set the Y coordinate
	  Color :	Set the color
******************************************************************************/
void DISP_DrawPaint(uint16_t x, uint16_t y, uint16_t Color)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	4603      	mov	r3, r0
 8004474:	80fb      	strh	r3, [r7, #6]
 8004476:	460b      	mov	r3, r1
 8004478:	80bb      	strh	r3, [r7, #4]
 800447a:	4613      	mov	r3, r2
 800447c:	807b      	strh	r3, [r7, #2]
	DISP_SetCursor(x,y,x,y);
 800447e:	88bb      	ldrh	r3, [r7, #4]
 8004480:	88fa      	ldrh	r2, [r7, #6]
 8004482:	88b9      	ldrh	r1, [r7, #4]
 8004484:	88f8      	ldrh	r0, [r7, #6]
 8004486:	f7ff ff81 	bl	800438c <DISP_SetCursor>
	DISP_SendData_16Bit(Color);
 800448a:	887b      	ldrh	r3, [r7, #2]
 800448c:	4618      	mov	r0, r3
 800448e:	f7ff ff53 	bl	8004338 <DISP_SendData_16Bit>
}
 8004492:	bf00      	nop
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
	...

0800449c <DISP_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void DISP_SetPixel(uint16_t Xpoint, uint16_t Ypoint, uint16_t Color)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	4603      	mov	r3, r0
 80044a4:	80fb      	strh	r3, [r7, #6]
 80044a6:	460b      	mov	r3, r1
 80044a8:	80bb      	strh	r3, [r7, #4]
 80044aa:	4613      	mov	r3, r2
 80044ac:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 80044ae:	4b4e      	ldr	r3, [pc, #312]	; (80045e8 <DISP_SetPixel+0x14c>)
 80044b0:	889b      	ldrh	r3, [r3, #4]
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	88fa      	ldrh	r2, [r7, #6]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d805      	bhi.n	80044c6 <DISP_SetPixel+0x2a>
 80044ba:	4b4b      	ldr	r3, [pc, #300]	; (80045e8 <DISP_SetPixel+0x14c>)
 80044bc:	88db      	ldrh	r3, [r3, #6]
 80044be:	b29b      	uxth	r3, r3
 80044c0:	88ba      	ldrh	r2, [r7, #4]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d903      	bls.n	80044ce <DISP_SetPixel+0x32>
        Debug("Exceeding display boundaries\r\n");
 80044c6:	4849      	ldr	r0, [pc, #292]	; (80045ec <DISP_SetPixel+0x150>)
 80044c8:	f000 fb8c 	bl	8004be4 <puts>
        return;
 80044cc:	e088      	b.n	80045e0 <DISP_SetPixel+0x144>
    }      
    uint16_t X, Y;

    switch(Paint.Rotate) {
 80044ce:	4b46      	ldr	r3, [pc, #280]	; (80045e8 <DISP_SetPixel+0x14c>)
 80044d0:	89db      	ldrh	r3, [r3, #14]
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	2b5a      	cmp	r3, #90	; 0x5a
 80044d6:	d00f      	beq.n	80044f8 <DISP_SetPixel+0x5c>
 80044d8:	2b5a      	cmp	r3, #90	; 0x5a
 80044da:	dc02      	bgt.n	80044e2 <DISP_SetPixel+0x46>
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d006      	beq.n	80044ee <DISP_SetPixel+0x52>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 80044e0:	e07e      	b.n	80045e0 <DISP_SetPixel+0x144>
    switch(Paint.Rotate) {
 80044e2:	2bb4      	cmp	r3, #180	; 0xb4
 80044e4:	d013      	beq.n	800450e <DISP_SetPixel+0x72>
 80044e6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80044ea:	d021      	beq.n	8004530 <DISP_SetPixel+0x94>
        return;
 80044ec:	e078      	b.n	80045e0 <DISP_SetPixel+0x144>
        X = Xpoint;
 80044ee:	88fb      	ldrh	r3, [r7, #6]
 80044f0:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 80044f2:	88bb      	ldrh	r3, [r7, #4]
 80044f4:	81bb      	strh	r3, [r7, #12]
        break;
 80044f6:	e026      	b.n	8004546 <DISP_SetPixel+0xaa>
        X = Paint.WidthMemory - Ypoint - 1;
 80044f8:	4b3b      	ldr	r3, [pc, #236]	; (80045e8 <DISP_SetPixel+0x14c>)
 80044fa:	891b      	ldrh	r3, [r3, #8]
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	88bb      	ldrh	r3, [r7, #4]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	b29b      	uxth	r3, r3
 8004504:	3b01      	subs	r3, #1
 8004506:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 8004508:	88fb      	ldrh	r3, [r7, #6]
 800450a:	81bb      	strh	r3, [r7, #12]
        break;
 800450c:	e01b      	b.n	8004546 <DISP_SetPixel+0xaa>
        X = Paint.WidthMemory - Xpoint - 1;
 800450e:	4b36      	ldr	r3, [pc, #216]	; (80045e8 <DISP_SetPixel+0x14c>)
 8004510:	891b      	ldrh	r3, [r3, #8]
 8004512:	b29a      	uxth	r2, r3
 8004514:	88fb      	ldrh	r3, [r7, #6]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	b29b      	uxth	r3, r3
 800451a:	3b01      	subs	r3, #1
 800451c:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 800451e:	4b32      	ldr	r3, [pc, #200]	; (80045e8 <DISP_SetPixel+0x14c>)
 8004520:	895b      	ldrh	r3, [r3, #10]
 8004522:	b29a      	uxth	r2, r3
 8004524:	88bb      	ldrh	r3, [r7, #4]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	b29b      	uxth	r3, r3
 800452a:	3b01      	subs	r3, #1
 800452c:	81bb      	strh	r3, [r7, #12]
        break;
 800452e:	e00a      	b.n	8004546 <DISP_SetPixel+0xaa>
        X = Ypoint;
 8004530:	88bb      	ldrh	r3, [r7, #4]
 8004532:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 8004534:	4b2c      	ldr	r3, [pc, #176]	; (80045e8 <DISP_SetPixel+0x14c>)
 8004536:	895b      	ldrh	r3, [r3, #10]
 8004538:	b29a      	uxth	r2, r3
 800453a:	88fb      	ldrh	r3, [r7, #6]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	b29b      	uxth	r3, r3
 8004540:	3b01      	subs	r3, #1
 8004542:	81bb      	strh	r3, [r7, #12]
        break;
 8004544:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8004546:	4b28      	ldr	r3, [pc, #160]	; (80045e8 <DISP_SetPixel+0x14c>)
 8004548:	8a1b      	ldrh	r3, [r3, #16]
 800454a:	b29b      	uxth	r3, r3
 800454c:	2b03      	cmp	r3, #3
 800454e:	d846      	bhi.n	80045de <DISP_SetPixel+0x142>
 8004550:	a201      	add	r2, pc, #4	; (adr r2, 8004558 <DISP_SetPixel+0xbc>)
 8004552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004556:	bf00      	nop
 8004558:	080045af 	.word	0x080045af
 800455c:	08004569 	.word	0x08004569
 8004560:	0800457b 	.word	0x0800457b
 8004564:	0800458d 	.word	0x0800458d
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8004568:	4b1f      	ldr	r3, [pc, #124]	; (80045e8 <DISP_SetPixel+0x14c>)
 800456a:	891b      	ldrh	r3, [r3, #8]
 800456c:	b29a      	uxth	r2, r3
 800456e:	89fb      	ldrh	r3, [r7, #14]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	b29b      	uxth	r3, r3
 8004574:	3b01      	subs	r3, #1
 8004576:	81fb      	strh	r3, [r7, #14]
        break;
 8004578:	e01a      	b.n	80045b0 <DISP_SetPixel+0x114>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 800457a:	4b1b      	ldr	r3, [pc, #108]	; (80045e8 <DISP_SetPixel+0x14c>)
 800457c:	895b      	ldrh	r3, [r3, #10]
 800457e:	b29a      	uxth	r2, r3
 8004580:	89bb      	ldrh	r3, [r7, #12]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	b29b      	uxth	r3, r3
 8004586:	3b01      	subs	r3, #1
 8004588:	81bb      	strh	r3, [r7, #12]
        break;
 800458a:	e011      	b.n	80045b0 <DISP_SetPixel+0x114>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 800458c:	4b16      	ldr	r3, [pc, #88]	; (80045e8 <DISP_SetPixel+0x14c>)
 800458e:	891b      	ldrh	r3, [r3, #8]
 8004590:	b29a      	uxth	r2, r3
 8004592:	89fb      	ldrh	r3, [r7, #14]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	b29b      	uxth	r3, r3
 8004598:	3b01      	subs	r3, #1
 800459a:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 800459c:	4b12      	ldr	r3, [pc, #72]	; (80045e8 <DISP_SetPixel+0x14c>)
 800459e:	895b      	ldrh	r3, [r3, #10]
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	89bb      	ldrh	r3, [r7, #12]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	3b01      	subs	r3, #1
 80045aa:	81bb      	strh	r3, [r7, #12]
        break;
 80045ac:	e000      	b.n	80045b0 <DISP_SetPixel+0x114>
        break;
 80045ae:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 80045b0:	4b0d      	ldr	r3, [pc, #52]	; (80045e8 <DISP_SetPixel+0x14c>)
 80045b2:	891b      	ldrh	r3, [r3, #8]
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	89fa      	ldrh	r2, [r7, #14]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d805      	bhi.n	80045c8 <DISP_SetPixel+0x12c>
 80045bc:	4b0a      	ldr	r3, [pc, #40]	; (80045e8 <DISP_SetPixel+0x14c>)
 80045be:	895b      	ldrh	r3, [r3, #10]
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	89ba      	ldrh	r2, [r7, #12]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d903      	bls.n	80045d0 <DISP_SetPixel+0x134>
        Debug("Exceeding display boundaries\r\n");
 80045c8:	4808      	ldr	r0, [pc, #32]	; (80045ec <DISP_SetPixel+0x150>)
 80045ca:	f000 fb0b 	bl	8004be4 <puts>
        return;
 80045ce:	e007      	b.n	80045e0 <DISP_SetPixel+0x144>
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		//DISPLAY(X,Y, Color);
    DISP_DrawPaint(X, Y, Color);
 80045d0:	887a      	ldrh	r2, [r7, #2]
 80045d2:	89b9      	ldrh	r1, [r7, #12]
 80045d4:	89fb      	ldrh	r3, [r7, #14]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7ff ff48 	bl	800446c <DISP_DrawPaint>
 80045dc:	e000      	b.n	80045e0 <DISP_SetPixel+0x144>
        return;
 80045de:	bf00      	nop
}
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	20000288 	.word	0x20000288
 80045ec:	080055ec 	.word	0x080055ec

080045f0 <DISP_DrawPoint>:
    Color		:   Set color
    Dot_Pixel	:	point size
******************************************************************************/
void DISP_DrawPoint( uint16_t Xpoint,       uint16_t Ypoint, uint16_t Color,
                      DOT_PIXEL Dot_Pixel,DOT_STYLE Dot_FillWay)
{
 80045f0:	b590      	push	{r4, r7, lr}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	4604      	mov	r4, r0
 80045f8:	4608      	mov	r0, r1
 80045fa:	4611      	mov	r1, r2
 80045fc:	461a      	mov	r2, r3
 80045fe:	4623      	mov	r3, r4
 8004600:	80fb      	strh	r3, [r7, #6]
 8004602:	4603      	mov	r3, r0
 8004604:	80bb      	strh	r3, [r7, #4]
 8004606:	460b      	mov	r3, r1
 8004608:	807b      	strh	r3, [r7, #2]
 800460a:	4613      	mov	r3, r2
 800460c:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800460e:	4b44      	ldr	r3, [pc, #272]	; (8004720 <DISP_DrawPoint+0x130>)
 8004610:	889b      	ldrh	r3, [r3, #4]
 8004612:	b29b      	uxth	r3, r3
 8004614:	88fa      	ldrh	r2, [r7, #6]
 8004616:	429a      	cmp	r2, r3
 8004618:	d805      	bhi.n	8004626 <DISP_DrawPoint+0x36>
 800461a:	4b41      	ldr	r3, [pc, #260]	; (8004720 <DISP_DrawPoint+0x130>)
 800461c:	88db      	ldrh	r3, [r3, #6]
 800461e:	b29b      	uxth	r3, r3
 8004620:	88ba      	ldrh	r2, [r7, #4]
 8004622:	429a      	cmp	r2, r3
 8004624:	d903      	bls.n	800462e <DISP_DrawPoint+0x3e>
        Debug("DISP_DrawPoint Input exceeds the normal display range\r\n");
 8004626:	483f      	ldr	r0, [pc, #252]	; (8004724 <DISP_DrawPoint+0x134>)
 8004628:	f000 fadc 	bl	8004be4 <puts>
        return;
 800462c:	e074      	b.n	8004718 <DISP_DrawPoint+0x128>
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_FillWay == DOT_FILL_AROUND) {
 800462e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d144      	bne.n	80046c0 <DISP_DrawPoint+0xd0>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 8004636:	2300      	movs	r3, #0
 8004638:	81fb      	strh	r3, [r7, #14]
 800463a:	e039      	b.n	80046b0 <DISP_DrawPoint+0xc0>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 800463c:	2300      	movs	r3, #0
 800463e:	81bb      	strh	r3, [r7, #12]
 8004640:	e029      	b.n	8004696 <DISP_DrawPoint+0xa6>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 8004642:	88fa      	ldrh	r2, [r7, #6]
 8004644:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004648:	441a      	add	r2, r3
 800464a:	787b      	ldrb	r3, [r7, #1]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	db28      	blt.n	80046a4 <DISP_DrawPoint+0xb4>
 8004652:	88ba      	ldrh	r2, [r7, #4]
 8004654:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004658:	441a      	add	r2, r3
 800465a:	787b      	ldrb	r3, [r7, #1]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	db20      	blt.n	80046a4 <DISP_DrawPoint+0xb4>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                DISP_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 8004662:	89fa      	ldrh	r2, [r7, #14]
 8004664:	88fb      	ldrh	r3, [r7, #6]
 8004666:	4413      	add	r3, r2
 8004668:	b29a      	uxth	r2, r3
 800466a:	787b      	ldrb	r3, [r7, #1]
 800466c:	b29b      	uxth	r3, r3
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	b298      	uxth	r0, r3
 8004672:	89ba      	ldrh	r2, [r7, #12]
 8004674:	88bb      	ldrh	r3, [r7, #4]
 8004676:	4413      	add	r3, r2
 8004678:	b29a      	uxth	r2, r3
 800467a:	787b      	ldrb	r3, [r7, #1]
 800467c:	b29b      	uxth	r3, r3
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	b29b      	uxth	r3, r3
 8004682:	887a      	ldrh	r2, [r7, #2]
 8004684:	4619      	mov	r1, r3
 8004686:	f7ff ff09 	bl	800449c <DISP_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 800468a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800468e:	b29b      	uxth	r3, r3
 8004690:	3301      	adds	r3, #1
 8004692:	b29b      	uxth	r3, r3
 8004694:	81bb      	strh	r3, [r7, #12]
 8004696:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800469a:	787b      	ldrb	r3, [r7, #1]
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	3b01      	subs	r3, #1
 80046a0:	429a      	cmp	r2, r3
 80046a2:	dbce      	blt.n	8004642 <DISP_DrawPoint+0x52>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 80046a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	3301      	adds	r3, #1
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	81fb      	strh	r3, [r7, #14]
 80046b0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80046b4:	787b      	ldrb	r3, [r7, #1]
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	3b01      	subs	r3, #1
 80046ba:	429a      	cmp	r2, r3
 80046bc:	dbbe      	blt.n	800463c <DISP_DrawPoint+0x4c>
 80046be:	e02b      	b.n	8004718 <DISP_DrawPoint+0x128>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 80046c0:	2300      	movs	r3, #0
 80046c2:	81fb      	strh	r3, [r7, #14]
 80046c4:	e023      	b.n	800470e <DISP_DrawPoint+0x11e>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 80046c6:	2300      	movs	r3, #0
 80046c8:	81bb      	strh	r3, [r7, #12]
 80046ca:	e015      	b.n	80046f8 <DISP_DrawPoint+0x108>
                DISP_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 80046cc:	89fa      	ldrh	r2, [r7, #14]
 80046ce:	88fb      	ldrh	r3, [r7, #6]
 80046d0:	4413      	add	r3, r2
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	3b01      	subs	r3, #1
 80046d6:	b298      	uxth	r0, r3
 80046d8:	89ba      	ldrh	r2, [r7, #12]
 80046da:	88bb      	ldrh	r3, [r7, #4]
 80046dc:	4413      	add	r3, r2
 80046de:	b29b      	uxth	r3, r3
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	887a      	ldrh	r2, [r7, #2]
 80046e6:	4619      	mov	r1, r3
 80046e8:	f7ff fed8 	bl	800449c <DISP_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 80046ec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3301      	adds	r3, #1
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	81bb      	strh	r3, [r7, #12]
 80046f8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80046fc:	787b      	ldrb	r3, [r7, #1]
 80046fe:	429a      	cmp	r2, r3
 8004700:	dbe4      	blt.n	80046cc <DISP_DrawPoint+0xdc>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8004702:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004706:	b29b      	uxth	r3, r3
 8004708:	3301      	adds	r3, #1
 800470a:	b29b      	uxth	r3, r3
 800470c:	81fb      	strh	r3, [r7, #14]
 800470e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004712:	787b      	ldrb	r3, [r7, #1]
 8004714:	429a      	cmp	r2, r3
 8004716:	dbd6      	blt.n	80046c6 <DISP_DrawPoint+0xd6>
            }
        }
    }
}
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	bd90      	pop	{r4, r7, pc}
 800471e:	bf00      	nop
 8004720:	20000288 	.word	0x20000288
 8004724:	08005614 	.word	0x08005614

08004728 <DISP_DrawLine>:
    Yend   ：End point Ypoint coordinate
    Color  ：The color of the line segment
******************************************************************************/
void DISP_DrawLine(uint16_t Xstart, uint16_t Ystart, uint16_t Xend, uint16_t Yend,
                    uint16_t Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 8004728:	b590      	push	{r4, r7, lr}
 800472a:	b08d      	sub	sp, #52	; 0x34
 800472c:	af02      	add	r7, sp, #8
 800472e:	4604      	mov	r4, r0
 8004730:	4608      	mov	r0, r1
 8004732:	4611      	mov	r1, r2
 8004734:	461a      	mov	r2, r3
 8004736:	4623      	mov	r3, r4
 8004738:	80fb      	strh	r3, [r7, #6]
 800473a:	4603      	mov	r3, r0
 800473c:	80bb      	strh	r3, [r7, #4]
 800473e:	460b      	mov	r3, r1
 8004740:	807b      	strh	r3, [r7, #2]
 8004742:	4613      	mov	r3, r2
 8004744:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8004746:	4b4e      	ldr	r3, [pc, #312]	; (8004880 <DISP_DrawLine+0x158>)
 8004748:	889b      	ldrh	r3, [r3, #4]
 800474a:	b29b      	uxth	r3, r3
 800474c:	88fa      	ldrh	r2, [r7, #6]
 800474e:	429a      	cmp	r2, r3
 8004750:	d811      	bhi.n	8004776 <DISP_DrawLine+0x4e>
 8004752:	4b4b      	ldr	r3, [pc, #300]	; (8004880 <DISP_DrawLine+0x158>)
 8004754:	88db      	ldrh	r3, [r3, #6]
 8004756:	b29b      	uxth	r3, r3
 8004758:	88ba      	ldrh	r2, [r7, #4]
 800475a:	429a      	cmp	r2, r3
 800475c:	d80b      	bhi.n	8004776 <DISP_DrawLine+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 800475e:	4b48      	ldr	r3, [pc, #288]	; (8004880 <DISP_DrawLine+0x158>)
 8004760:	889b      	ldrh	r3, [r3, #4]
 8004762:	b29b      	uxth	r3, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8004764:	887a      	ldrh	r2, [r7, #2]
 8004766:	429a      	cmp	r2, r3
 8004768:	d805      	bhi.n	8004776 <DISP_DrawLine+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 800476a:	4b45      	ldr	r3, [pc, #276]	; (8004880 <DISP_DrawLine+0x158>)
 800476c:	88db      	ldrh	r3, [r3, #6]
 800476e:	b29b      	uxth	r3, r3
 8004770:	883a      	ldrh	r2, [r7, #0]
 8004772:	429a      	cmp	r2, r3
 8004774:	d903      	bls.n	800477e <DISP_DrawLine+0x56>
        Debug("DISP_DrawLine Input exceeds the normal display range\r\n");
 8004776:	4843      	ldr	r0, [pc, #268]	; (8004884 <DISP_DrawLine+0x15c>)
 8004778:	f000 fa34 	bl	8004be4 <puts>
        return;
 800477c:	e07d      	b.n	800487a <DISP_DrawLine+0x152>
    }

    uint16_t Xpoint = Xstart;
 800477e:	88fb      	ldrh	r3, [r7, #6]
 8004780:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint16_t Ypoint = Ystart;
 8004782:	88bb      	ldrh	r3, [r7, #4]
 8004784:	84bb      	strh	r3, [r7, #36]	; 0x24
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8004786:	887a      	ldrh	r2, [r7, #2]
 8004788:	88fb      	ldrh	r3, [r7, #6]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	bfb8      	it	lt
 8004790:	425b      	neglt	r3, r3
 8004792:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8004794:	883a      	ldrh	r2, [r7, #0]
 8004796:	88bb      	ldrh	r3, [r7, #4]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	bfb8      	it	lt
 800479e:	425b      	neglt	r3, r3
 80047a0:	425b      	negs	r3, r3
 80047a2:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 80047a4:	88fa      	ldrh	r2, [r7, #6]
 80047a6:	887b      	ldrh	r3, [r7, #2]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d201      	bcs.n	80047b0 <DISP_DrawLine+0x88>
 80047ac:	2301      	movs	r3, #1
 80047ae:	e001      	b.n	80047b4 <DISP_DrawLine+0x8c>
 80047b0:	f04f 33ff 	mov.w	r3, #4294967295
 80047b4:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 80047b6:	88ba      	ldrh	r2, [r7, #4]
 80047b8:	883b      	ldrh	r3, [r7, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d201      	bcs.n	80047c2 <DISP_DrawLine+0x9a>
 80047be:	2301      	movs	r3, #1
 80047c0:	e001      	b.n	80047c6 <DISP_DrawLine+0x9e>
 80047c2:	f04f 33ff 	mov.w	r3, #4294967295
 80047c6:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	4413      	add	r3, r2
 80047ce:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 80047d0:	2300      	movs	r3, #0
 80047d2:	77fb      	strb	r3, [r7, #31]

    for (;;) {
        Dotted_Len++;
 80047d4:	7ffb      	ldrb	r3, [r7, #31]
 80047d6:	3301      	adds	r3, #1
 80047d8:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 80047da:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d119      	bne.n	8004816 <DISP_DrawLine+0xee>
 80047e2:	7ffa      	ldrb	r2, [r7, #31]
 80047e4:	4b28      	ldr	r3, [pc, #160]	; (8004888 <DISP_DrawLine+0x160>)
 80047e6:	fba3 1302 	umull	r1, r3, r3, r2
 80047ea:	0859      	lsrs	r1, r3, #1
 80047ec:	460b      	mov	r3, r1
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	440b      	add	r3, r1
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10d      	bne.n	8004816 <DISP_DrawLine+0xee>
            //Debug("LINE_DOTTED\r\n");
            DISP_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 80047fa:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80047fe:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8004800:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8004802:	2301      	movs	r3, #1
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	4613      	mov	r3, r2
 8004808:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800480c:	f7ff fef0 	bl	80045f0 <DISP_DrawPoint>
            Dotted_Len = 0;
 8004810:	2300      	movs	r3, #0
 8004812:	77fb      	strb	r3, [r7, #31]
 8004814:	e009      	b.n	800482a <DISP_DrawLine+0x102>
        } else {
            DISP_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 8004816:	f897 403c 	ldrb.w	r4, [r7, #60]	; 0x3c
 800481a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800481c:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800481e:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8004820:	2301      	movs	r3, #1
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	4623      	mov	r3, r4
 8004826:	f7ff fee3 	bl	80045f0 <DISP_DrawPoint>
        }
        if (2 * Esp >= dy) {
 800482a:	6a3b      	ldr	r3, [r7, #32]
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	429a      	cmp	r2, r3
 8004832:	dc0c      	bgt.n	800484e <DISP_DrawLine+0x126>
            if (Xpoint == Xend)
 8004834:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004836:	887b      	ldrh	r3, [r7, #2]
 8004838:	429a      	cmp	r2, r3
 800483a:	d01b      	beq.n	8004874 <DISP_DrawLine+0x14c>
                break;
            Esp += dy;
 800483c:	6a3a      	ldr	r2, [r7, #32]
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	4413      	add	r3, r2
 8004842:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	b29a      	uxth	r2, r3
 8004848:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800484a:	4413      	add	r3, r2
 800484c:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if (2 * Esp <= dx) {
 800484e:	6a3b      	ldr	r3, [r7, #32]
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	429a      	cmp	r2, r3
 8004856:	dbbd      	blt.n	80047d4 <DISP_DrawLine+0xac>
            if (Ypoint == Yend)
 8004858:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800485a:	883b      	ldrh	r3, [r7, #0]
 800485c:	429a      	cmp	r2, r3
 800485e:	d00b      	beq.n	8004878 <DISP_DrawLine+0x150>
                break;
            Esp += dx;
 8004860:	6a3a      	ldr	r2, [r7, #32]
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	4413      	add	r3, r2
 8004866:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	b29a      	uxth	r2, r3
 800486c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800486e:	4413      	add	r3, r2
 8004870:	84bb      	strh	r3, [r7, #36]	; 0x24
        Dotted_Len++;
 8004872:	e7af      	b.n	80047d4 <DISP_DrawLine+0xac>
                break;
 8004874:	bf00      	nop
 8004876:	e000      	b.n	800487a <DISP_DrawLine+0x152>
                break;
 8004878:	bf00      	nop
        }
    }
}
 800487a:	372c      	adds	r7, #44	; 0x2c
 800487c:	46bd      	mov	sp, r7
 800487e:	bd90      	pop	{r4, r7, pc}
 8004880:	20000288 	.word	0x20000288
 8004884:	08005654 	.word	0x08005654
 8004888:	aaaaaaab 	.word	0xaaaaaaab

0800488c <DISP_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void DISP_DrawChar(uint16_t Xpoint, uint16_t Ypoint, const char Acsii_Char,
                    sFONT* Font, uint16_t Color_Background, uint16_t Color_Foreground)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b088      	sub	sp, #32
 8004890:	af00      	add	r7, sp, #0
 8004892:	607b      	str	r3, [r7, #4]
 8004894:	4603      	mov	r3, r0
 8004896:	81fb      	strh	r3, [r7, #14]
 8004898:	460b      	mov	r3, r1
 800489a:	81bb      	strh	r3, [r7, #12]
 800489c:	4613      	mov	r3, r2
 800489e:	72fb      	strb	r3, [r7, #11]
    uint16_t Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 80048a0:	4b4e      	ldr	r3, [pc, #312]	; (80049dc <DISP_DrawChar+0x150>)
 80048a2:	889b      	ldrh	r3, [r3, #4]
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	89fa      	ldrh	r2, [r7, #14]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d805      	bhi.n	80048b8 <DISP_DrawChar+0x2c>
 80048ac:	4b4b      	ldr	r3, [pc, #300]	; (80049dc <DISP_DrawChar+0x150>)
 80048ae:	88db      	ldrh	r3, [r3, #6]
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	89ba      	ldrh	r2, [r7, #12]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d903      	bls.n	80048c0 <DISP_DrawChar+0x34>
        Debug("DISP_DrawChar Input exceeds the normal display range\r\n");
 80048b8:	4849      	ldr	r0, [pc, #292]	; (80049e0 <DISP_DrawChar+0x154>)
 80048ba:	f000 f993 	bl	8004be4 <puts>
        return;
 80048be:	e089      	b.n	80049d4 <DISP_DrawChar+0x148>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 80048c0:	7afb      	ldrb	r3, [r7, #11]
 80048c2:	3b20      	subs	r3, #32
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	88d2      	ldrh	r2, [r2, #6]
 80048c8:	fb02 f303 	mul.w	r3, r2, r3
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	8892      	ldrh	r2, [r2, #4]
 80048d0:	08d2      	lsrs	r2, r2, #3
 80048d2:	b292      	uxth	r2, r2
 80048d4:	4611      	mov	r1, r2
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	8892      	ldrh	r2, [r2, #4]
 80048da:	f002 0207 	and.w	r2, r2, #7
 80048de:	b292      	uxth	r2, r2
 80048e0:	2a00      	cmp	r2, #0
 80048e2:	bf14      	ite	ne
 80048e4:	2201      	movne	r2, #1
 80048e6:	2200      	moveq	r2, #0
 80048e8:	b2d2      	uxtb	r2, r2
 80048ea:	440a      	add	r2, r1
 80048ec:	fb02 f303 	mul.w	r3, r2, r3
 80048f0:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	4413      	add	r3, r2
 80048fa:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 80048fc:	2300      	movs	r3, #0
 80048fe:	83fb      	strh	r3, [r7, #30]
 8004900:	e063      	b.n	80049ca <DISP_DrawChar+0x13e>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8004902:	2300      	movs	r3, #0
 8004904:	83bb      	strh	r3, [r7, #28]
 8004906:	e04e      	b.n	80049a6 <DISP_DrawChar+0x11a>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8004908:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800490a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800490e:	4293      	cmp	r3, r2
 8004910:	d118      	bne.n	8004944 <DISP_DrawChar+0xb8>
                if (*ptr & (0x80 >> (Column % 8)))
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	4619      	mov	r1, r3
 8004918:	8bbb      	ldrh	r3, [r7, #28]
 800491a:	f003 0307 	and.w	r3, r3, #7
 800491e:	2280      	movs	r2, #128	; 0x80
 8004920:	fa42 f303 	asr.w	r3, r2, r3
 8004924:	400b      	ands	r3, r1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d031      	beq.n	800498e <DISP_DrawChar+0x102>
                    DISP_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800492a:	89fa      	ldrh	r2, [r7, #14]
 800492c:	8bbb      	ldrh	r3, [r7, #28]
 800492e:	4413      	add	r3, r2
 8004930:	b298      	uxth	r0, r3
 8004932:	89ba      	ldrh	r2, [r7, #12]
 8004934:	8bfb      	ldrh	r3, [r7, #30]
 8004936:	4413      	add	r3, r2
 8004938:	b29b      	uxth	r3, r3
 800493a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800493c:	4619      	mov	r1, r3
 800493e:	f7ff fdad 	bl	800449c <DISP_SetPixel>
 8004942:	e024      	b.n	800498e <DISP_DrawChar+0x102>
                    // DISP_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	4619      	mov	r1, r3
 800494a:	8bbb      	ldrh	r3, [r7, #28]
 800494c:	f003 0307 	and.w	r3, r3, #7
 8004950:	2280      	movs	r2, #128	; 0x80
 8004952:	fa42 f303 	asr.w	r3, r2, r3
 8004956:	400b      	ands	r3, r1
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00c      	beq.n	8004976 <DISP_DrawChar+0xea>
                    DISP_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800495c:	89fa      	ldrh	r2, [r7, #14]
 800495e:	8bbb      	ldrh	r3, [r7, #28]
 8004960:	4413      	add	r3, r2
 8004962:	b298      	uxth	r0, r3
 8004964:	89ba      	ldrh	r2, [r7, #12]
 8004966:	8bfb      	ldrh	r3, [r7, #30]
 8004968:	4413      	add	r3, r2
 800496a:	b29b      	uxth	r3, r3
 800496c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800496e:	4619      	mov	r1, r3
 8004970:	f7ff fd94 	bl	800449c <DISP_SetPixel>
 8004974:	e00b      	b.n	800498e <DISP_DrawChar+0x102>
                    // DISP_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    DISP_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8004976:	89fa      	ldrh	r2, [r7, #14]
 8004978:	8bbb      	ldrh	r3, [r7, #28]
 800497a:	4413      	add	r3, r2
 800497c:	b298      	uxth	r0, r3
 800497e:	89ba      	ldrh	r2, [r7, #12]
 8004980:	8bfb      	ldrh	r3, [r7, #30]
 8004982:	4413      	add	r3, r2
 8004984:	b29b      	uxth	r3, r3
 8004986:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004988:	4619      	mov	r1, r3
 800498a:	f7ff fd87 	bl	800449c <DISP_SetPixel>
                    // DISP_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 800498e:	8bbb      	ldrh	r3, [r7, #28]
 8004990:	f003 0307 	and.w	r3, r3, #7
 8004994:	b29b      	uxth	r3, r3
 8004996:	2b07      	cmp	r3, #7
 8004998:	d102      	bne.n	80049a0 <DISP_DrawChar+0x114>
                ptr++;
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	3301      	adds	r3, #1
 800499e:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 80049a0:	8bbb      	ldrh	r3, [r7, #28]
 80049a2:	3301      	adds	r3, #1
 80049a4:	83bb      	strh	r3, [r7, #28]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	889b      	ldrh	r3, [r3, #4]
 80049aa:	8bba      	ldrh	r2, [r7, #28]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d3ab      	bcc.n	8004908 <DISP_DrawChar+0x7c>
        }// Write a line
        if (Font->Width % 8 != 0)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	889b      	ldrh	r3, [r3, #4]
 80049b4:	f003 0307 	and.w	r3, r3, #7
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d002      	beq.n	80049c4 <DISP_DrawChar+0x138>
            ptr++;
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	3301      	adds	r3, #1
 80049c2:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 80049c4:	8bfb      	ldrh	r3, [r7, #30]
 80049c6:	3301      	adds	r3, #1
 80049c8:	83fb      	strh	r3, [r7, #30]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	88db      	ldrh	r3, [r3, #6]
 80049ce:	8bfa      	ldrh	r2, [r7, #30]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d396      	bcc.n	8004902 <DISP_DrawChar+0x76>
    }// Write all
}
 80049d4:	3720      	adds	r7, #32
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	20000288 	.word	0x20000288
 80049e0:	08005704 	.word	0x08005704

080049e4 <DISP_DrawString>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void DISP_DrawString(uint16_t Xstart, uint16_t Ystart, const char * pString,
                         sFONT* Font, uint16_t Color_Background, uint16_t Color_Foreground )
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b088      	sub	sp, #32
 80049e8:	af02      	add	r7, sp, #8
 80049ea:	60ba      	str	r2, [r7, #8]
 80049ec:	607b      	str	r3, [r7, #4]
 80049ee:	4603      	mov	r3, r0
 80049f0:	81fb      	strh	r3, [r7, #14]
 80049f2:	460b      	mov	r3, r1
 80049f4:	81bb      	strh	r3, [r7, #12]
    uint16_t Xpoint = Xstart;
 80049f6:	89fb      	ldrh	r3, [r7, #14]
 80049f8:	82fb      	strh	r3, [r7, #22]
    uint16_t Ypoint = Ystart;
 80049fa:	89bb      	ldrh	r3, [r7, #12]
 80049fc:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 80049fe:	4b23      	ldr	r3, [pc, #140]	; (8004a8c <DISP_DrawString+0xa8>)
 8004a00:	889b      	ldrh	r3, [r3, #4]
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	89fa      	ldrh	r2, [r7, #14]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d805      	bhi.n	8004a16 <DISP_DrawString+0x32>
 8004a0a:	4b20      	ldr	r3, [pc, #128]	; (8004a8c <DISP_DrawString+0xa8>)
 8004a0c:	88db      	ldrh	r3, [r3, #6]
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	89ba      	ldrh	r2, [r7, #12]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d933      	bls.n	8004a7e <DISP_DrawString+0x9a>
        Debug("DISP_DrawString_EN Input exceeds the normal display range\r\n");
 8004a16:	481e      	ldr	r0, [pc, #120]	; (8004a90 <DISP_DrawString+0xac>)
 8004a18:	f000 f8e4 	bl	8004be4 <puts>
        return;
 8004a1c:	e033      	b.n	8004a86 <DISP_DrawString+0xa2>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8004a1e:	8afb      	ldrh	r3, [r7, #22]
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	8892      	ldrh	r2, [r2, #4]
 8004a24:	4413      	add	r3, r2
 8004a26:	4a19      	ldr	r2, [pc, #100]	; (8004a8c <DISP_DrawString+0xa8>)
 8004a28:	8892      	ldrh	r2, [r2, #4]
 8004a2a:	b292      	uxth	r2, r2
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	dd06      	ble.n	8004a3e <DISP_DrawString+0x5a>
            Xpoint = Xstart;
 8004a30:	89fb      	ldrh	r3, [r7, #14]
 8004a32:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	88da      	ldrh	r2, [r3, #6]
 8004a38:	8abb      	ldrh	r3, [r7, #20]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8004a3e:	8abb      	ldrh	r3, [r7, #20]
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	88d2      	ldrh	r2, [r2, #6]
 8004a44:	4413      	add	r3, r2
 8004a46:	4a11      	ldr	r2, [pc, #68]	; (8004a8c <DISP_DrawString+0xa8>)
 8004a48:	88d2      	ldrh	r2, [r2, #6]
 8004a4a:	b292      	uxth	r2, r2
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	dd03      	ble.n	8004a58 <DISP_DrawString+0x74>
            Xpoint = Xstart;
 8004a50:	89fb      	ldrh	r3, [r7, #14]
 8004a52:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8004a54:	89bb      	ldrh	r3, [r7, #12]
 8004a56:	82bb      	strh	r3, [r7, #20]
        }
        DISP_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	781a      	ldrb	r2, [r3, #0]
 8004a5c:	8ab9      	ldrh	r1, [r7, #20]
 8004a5e:	8af8      	ldrh	r0, [r7, #22]
 8004a60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a62:	9301      	str	r3, [sp, #4]
 8004a64:	8c3b      	ldrh	r3, [r7, #32]
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f7ff ff0f 	bl	800488c <DISP_DrawChar>

        //The next character of the address
        pString ++;
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	3301      	adds	r3, #1
 8004a72:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	889a      	ldrh	r2, [r3, #4]
 8004a78:	8afb      	ldrh	r3, [r7, #22]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1cb      	bne.n	8004a1e <DISP_DrawString+0x3a>
    }
}
 8004a86:	3718      	adds	r7, #24
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	20000288 	.word	0x20000288
 8004a90:	08005744 	.word	0x08005744

08004a94 <__errno>:
 8004a94:	4b01      	ldr	r3, [pc, #4]	; (8004a9c <__errno+0x8>)
 8004a96:	6818      	ldr	r0, [r3, #0]
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	20000014 	.word	0x20000014

08004aa0 <__libc_init_array>:
 8004aa0:	b570      	push	{r4, r5, r6, lr}
 8004aa2:	4e0d      	ldr	r6, [pc, #52]	; (8004ad8 <__libc_init_array+0x38>)
 8004aa4:	4c0d      	ldr	r4, [pc, #52]	; (8004adc <__libc_init_array+0x3c>)
 8004aa6:	1ba4      	subs	r4, r4, r6
 8004aa8:	10a4      	asrs	r4, r4, #2
 8004aaa:	2500      	movs	r5, #0
 8004aac:	42a5      	cmp	r5, r4
 8004aae:	d109      	bne.n	8004ac4 <__libc_init_array+0x24>
 8004ab0:	4e0b      	ldr	r6, [pc, #44]	; (8004ae0 <__libc_init_array+0x40>)
 8004ab2:	4c0c      	ldr	r4, [pc, #48]	; (8004ae4 <__libc_init_array+0x44>)
 8004ab4:	f000 fce0 	bl	8005478 <_init>
 8004ab8:	1ba4      	subs	r4, r4, r6
 8004aba:	10a4      	asrs	r4, r4, #2
 8004abc:	2500      	movs	r5, #0
 8004abe:	42a5      	cmp	r5, r4
 8004ac0:	d105      	bne.n	8004ace <__libc_init_array+0x2e>
 8004ac2:	bd70      	pop	{r4, r5, r6, pc}
 8004ac4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ac8:	4798      	blx	r3
 8004aca:	3501      	adds	r5, #1
 8004acc:	e7ee      	b.n	8004aac <__libc_init_array+0xc>
 8004ace:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ad2:	4798      	blx	r3
 8004ad4:	3501      	adds	r5, #1
 8004ad6:	e7f2      	b.n	8004abe <__libc_init_array+0x1e>
 8004ad8:	08006784 	.word	0x08006784
 8004adc:	08006784 	.word	0x08006784
 8004ae0:	08006784 	.word	0x08006784
 8004ae4:	08006788 	.word	0x08006788

08004ae8 <__itoa>:
 8004ae8:	1e93      	subs	r3, r2, #2
 8004aea:	2b22      	cmp	r3, #34	; 0x22
 8004aec:	b510      	push	{r4, lr}
 8004aee:	460c      	mov	r4, r1
 8004af0:	d904      	bls.n	8004afc <__itoa+0x14>
 8004af2:	2300      	movs	r3, #0
 8004af4:	700b      	strb	r3, [r1, #0]
 8004af6:	461c      	mov	r4, r3
 8004af8:	4620      	mov	r0, r4
 8004afa:	bd10      	pop	{r4, pc}
 8004afc:	2a0a      	cmp	r2, #10
 8004afe:	d109      	bne.n	8004b14 <__itoa+0x2c>
 8004b00:	2800      	cmp	r0, #0
 8004b02:	da07      	bge.n	8004b14 <__itoa+0x2c>
 8004b04:	232d      	movs	r3, #45	; 0x2d
 8004b06:	700b      	strb	r3, [r1, #0]
 8004b08:	4240      	negs	r0, r0
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	4421      	add	r1, r4
 8004b0e:	f000 f871 	bl	8004bf4 <__utoa>
 8004b12:	e7f1      	b.n	8004af8 <__itoa+0x10>
 8004b14:	2100      	movs	r1, #0
 8004b16:	e7f9      	b.n	8004b0c <__itoa+0x24>

08004b18 <itoa>:
 8004b18:	f7ff bfe6 	b.w	8004ae8 <__itoa>

08004b1c <memset>:
 8004b1c:	4402      	add	r2, r0
 8004b1e:	4603      	mov	r3, r0
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d100      	bne.n	8004b26 <memset+0xa>
 8004b24:	4770      	bx	lr
 8004b26:	f803 1b01 	strb.w	r1, [r3], #1
 8004b2a:	e7f9      	b.n	8004b20 <memset+0x4>

08004b2c <_puts_r>:
 8004b2c:	b570      	push	{r4, r5, r6, lr}
 8004b2e:	460e      	mov	r6, r1
 8004b30:	4605      	mov	r5, r0
 8004b32:	b118      	cbz	r0, 8004b3c <_puts_r+0x10>
 8004b34:	6983      	ldr	r3, [r0, #24]
 8004b36:	b90b      	cbnz	r3, 8004b3c <_puts_r+0x10>
 8004b38:	f000 fa4a 	bl	8004fd0 <__sinit>
 8004b3c:	69ab      	ldr	r3, [r5, #24]
 8004b3e:	68ac      	ldr	r4, [r5, #8]
 8004b40:	b913      	cbnz	r3, 8004b48 <_puts_r+0x1c>
 8004b42:	4628      	mov	r0, r5
 8004b44:	f000 fa44 	bl	8004fd0 <__sinit>
 8004b48:	4b23      	ldr	r3, [pc, #140]	; (8004bd8 <_puts_r+0xac>)
 8004b4a:	429c      	cmp	r4, r3
 8004b4c:	d117      	bne.n	8004b7e <_puts_r+0x52>
 8004b4e:	686c      	ldr	r4, [r5, #4]
 8004b50:	89a3      	ldrh	r3, [r4, #12]
 8004b52:	071b      	lsls	r3, r3, #28
 8004b54:	d51d      	bpl.n	8004b92 <_puts_r+0x66>
 8004b56:	6923      	ldr	r3, [r4, #16]
 8004b58:	b1db      	cbz	r3, 8004b92 <_puts_r+0x66>
 8004b5a:	3e01      	subs	r6, #1
 8004b5c:	68a3      	ldr	r3, [r4, #8]
 8004b5e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004b62:	3b01      	subs	r3, #1
 8004b64:	60a3      	str	r3, [r4, #8]
 8004b66:	b9e9      	cbnz	r1, 8004ba4 <_puts_r+0x78>
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	da2e      	bge.n	8004bca <_puts_r+0x9e>
 8004b6c:	4622      	mov	r2, r4
 8004b6e:	210a      	movs	r1, #10
 8004b70:	4628      	mov	r0, r5
 8004b72:	f000 f87d 	bl	8004c70 <__swbuf_r>
 8004b76:	3001      	adds	r0, #1
 8004b78:	d011      	beq.n	8004b9e <_puts_r+0x72>
 8004b7a:	200a      	movs	r0, #10
 8004b7c:	e011      	b.n	8004ba2 <_puts_r+0x76>
 8004b7e:	4b17      	ldr	r3, [pc, #92]	; (8004bdc <_puts_r+0xb0>)
 8004b80:	429c      	cmp	r4, r3
 8004b82:	d101      	bne.n	8004b88 <_puts_r+0x5c>
 8004b84:	68ac      	ldr	r4, [r5, #8]
 8004b86:	e7e3      	b.n	8004b50 <_puts_r+0x24>
 8004b88:	4b15      	ldr	r3, [pc, #84]	; (8004be0 <_puts_r+0xb4>)
 8004b8a:	429c      	cmp	r4, r3
 8004b8c:	bf08      	it	eq
 8004b8e:	68ec      	ldreq	r4, [r5, #12]
 8004b90:	e7de      	b.n	8004b50 <_puts_r+0x24>
 8004b92:	4621      	mov	r1, r4
 8004b94:	4628      	mov	r0, r5
 8004b96:	f000 f8bd 	bl	8004d14 <__swsetup_r>
 8004b9a:	2800      	cmp	r0, #0
 8004b9c:	d0dd      	beq.n	8004b5a <_puts_r+0x2e>
 8004b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba2:	bd70      	pop	{r4, r5, r6, pc}
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	da04      	bge.n	8004bb2 <_puts_r+0x86>
 8004ba8:	69a2      	ldr	r2, [r4, #24]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	dc06      	bgt.n	8004bbc <_puts_r+0x90>
 8004bae:	290a      	cmp	r1, #10
 8004bb0:	d004      	beq.n	8004bbc <_puts_r+0x90>
 8004bb2:	6823      	ldr	r3, [r4, #0]
 8004bb4:	1c5a      	adds	r2, r3, #1
 8004bb6:	6022      	str	r2, [r4, #0]
 8004bb8:	7019      	strb	r1, [r3, #0]
 8004bba:	e7cf      	b.n	8004b5c <_puts_r+0x30>
 8004bbc:	4622      	mov	r2, r4
 8004bbe:	4628      	mov	r0, r5
 8004bc0:	f000 f856 	bl	8004c70 <__swbuf_r>
 8004bc4:	3001      	adds	r0, #1
 8004bc6:	d1c9      	bne.n	8004b5c <_puts_r+0x30>
 8004bc8:	e7e9      	b.n	8004b9e <_puts_r+0x72>
 8004bca:	6823      	ldr	r3, [r4, #0]
 8004bcc:	200a      	movs	r0, #10
 8004bce:	1c5a      	adds	r2, r3, #1
 8004bd0:	6022      	str	r2, [r4, #0]
 8004bd2:	7018      	strb	r0, [r3, #0]
 8004bd4:	e7e5      	b.n	8004ba2 <_puts_r+0x76>
 8004bd6:	bf00      	nop
 8004bd8:	0800673c 	.word	0x0800673c
 8004bdc:	0800675c 	.word	0x0800675c
 8004be0:	0800671c 	.word	0x0800671c

08004be4 <puts>:
 8004be4:	4b02      	ldr	r3, [pc, #8]	; (8004bf0 <puts+0xc>)
 8004be6:	4601      	mov	r1, r0
 8004be8:	6818      	ldr	r0, [r3, #0]
 8004bea:	f7ff bf9f 	b.w	8004b2c <_puts_r>
 8004bee:	bf00      	nop
 8004bf0:	20000014 	.word	0x20000014

08004bf4 <__utoa>:
 8004bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bf6:	4b1d      	ldr	r3, [pc, #116]	; (8004c6c <__utoa+0x78>)
 8004bf8:	b08b      	sub	sp, #44	; 0x2c
 8004bfa:	4605      	mov	r5, r0
 8004bfc:	460c      	mov	r4, r1
 8004bfe:	466e      	mov	r6, sp
 8004c00:	f103 0c20 	add.w	ip, r3, #32
 8004c04:	6818      	ldr	r0, [r3, #0]
 8004c06:	6859      	ldr	r1, [r3, #4]
 8004c08:	4637      	mov	r7, r6
 8004c0a:	c703      	stmia	r7!, {r0, r1}
 8004c0c:	3308      	adds	r3, #8
 8004c0e:	4563      	cmp	r3, ip
 8004c10:	463e      	mov	r6, r7
 8004c12:	d1f7      	bne.n	8004c04 <__utoa+0x10>
 8004c14:	6818      	ldr	r0, [r3, #0]
 8004c16:	791b      	ldrb	r3, [r3, #4]
 8004c18:	713b      	strb	r3, [r7, #4]
 8004c1a:	1e93      	subs	r3, r2, #2
 8004c1c:	2b22      	cmp	r3, #34	; 0x22
 8004c1e:	6038      	str	r0, [r7, #0]
 8004c20:	f04f 0300 	mov.w	r3, #0
 8004c24:	d904      	bls.n	8004c30 <__utoa+0x3c>
 8004c26:	7023      	strb	r3, [r4, #0]
 8004c28:	461c      	mov	r4, r3
 8004c2a:	4620      	mov	r0, r4
 8004c2c:	b00b      	add	sp, #44	; 0x2c
 8004c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c30:	1e66      	subs	r6, r4, #1
 8004c32:	fbb5 f0f2 	udiv	r0, r5, r2
 8004c36:	af0a      	add	r7, sp, #40	; 0x28
 8004c38:	fb02 5510 	mls	r5, r2, r0, r5
 8004c3c:	443d      	add	r5, r7
 8004c3e:	1c59      	adds	r1, r3, #1
 8004c40:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8004c44:	f806 5f01 	strb.w	r5, [r6, #1]!
 8004c48:	4605      	mov	r5, r0
 8004c4a:	b968      	cbnz	r0, 8004c68 <__utoa+0x74>
 8004c4c:	5460      	strb	r0, [r4, r1]
 8004c4e:	4423      	add	r3, r4
 8004c50:	4622      	mov	r2, r4
 8004c52:	1b19      	subs	r1, r3, r4
 8004c54:	1b10      	subs	r0, r2, r4
 8004c56:	4281      	cmp	r1, r0
 8004c58:	dde7      	ble.n	8004c2a <__utoa+0x36>
 8004c5a:	7811      	ldrb	r1, [r2, #0]
 8004c5c:	7818      	ldrb	r0, [r3, #0]
 8004c5e:	f802 0b01 	strb.w	r0, [r2], #1
 8004c62:	f803 1901 	strb.w	r1, [r3], #-1
 8004c66:	e7f4      	b.n	8004c52 <__utoa+0x5e>
 8004c68:	460b      	mov	r3, r1
 8004c6a:	e7e2      	b.n	8004c32 <__utoa+0x3e>
 8004c6c:	080066f4 	.word	0x080066f4

08004c70 <__swbuf_r>:
 8004c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c72:	460e      	mov	r6, r1
 8004c74:	4614      	mov	r4, r2
 8004c76:	4605      	mov	r5, r0
 8004c78:	b118      	cbz	r0, 8004c82 <__swbuf_r+0x12>
 8004c7a:	6983      	ldr	r3, [r0, #24]
 8004c7c:	b90b      	cbnz	r3, 8004c82 <__swbuf_r+0x12>
 8004c7e:	f000 f9a7 	bl	8004fd0 <__sinit>
 8004c82:	4b21      	ldr	r3, [pc, #132]	; (8004d08 <__swbuf_r+0x98>)
 8004c84:	429c      	cmp	r4, r3
 8004c86:	d12a      	bne.n	8004cde <__swbuf_r+0x6e>
 8004c88:	686c      	ldr	r4, [r5, #4]
 8004c8a:	69a3      	ldr	r3, [r4, #24]
 8004c8c:	60a3      	str	r3, [r4, #8]
 8004c8e:	89a3      	ldrh	r3, [r4, #12]
 8004c90:	071a      	lsls	r2, r3, #28
 8004c92:	d52e      	bpl.n	8004cf2 <__swbuf_r+0x82>
 8004c94:	6923      	ldr	r3, [r4, #16]
 8004c96:	b363      	cbz	r3, 8004cf2 <__swbuf_r+0x82>
 8004c98:	6923      	ldr	r3, [r4, #16]
 8004c9a:	6820      	ldr	r0, [r4, #0]
 8004c9c:	1ac0      	subs	r0, r0, r3
 8004c9e:	6963      	ldr	r3, [r4, #20]
 8004ca0:	b2f6      	uxtb	r6, r6
 8004ca2:	4283      	cmp	r3, r0
 8004ca4:	4637      	mov	r7, r6
 8004ca6:	dc04      	bgt.n	8004cb2 <__swbuf_r+0x42>
 8004ca8:	4621      	mov	r1, r4
 8004caa:	4628      	mov	r0, r5
 8004cac:	f000 f926 	bl	8004efc <_fflush_r>
 8004cb0:	bb28      	cbnz	r0, 8004cfe <__swbuf_r+0x8e>
 8004cb2:	68a3      	ldr	r3, [r4, #8]
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	60a3      	str	r3, [r4, #8]
 8004cb8:	6823      	ldr	r3, [r4, #0]
 8004cba:	1c5a      	adds	r2, r3, #1
 8004cbc:	6022      	str	r2, [r4, #0]
 8004cbe:	701e      	strb	r6, [r3, #0]
 8004cc0:	6963      	ldr	r3, [r4, #20]
 8004cc2:	3001      	adds	r0, #1
 8004cc4:	4283      	cmp	r3, r0
 8004cc6:	d004      	beq.n	8004cd2 <__swbuf_r+0x62>
 8004cc8:	89a3      	ldrh	r3, [r4, #12]
 8004cca:	07db      	lsls	r3, r3, #31
 8004ccc:	d519      	bpl.n	8004d02 <__swbuf_r+0x92>
 8004cce:	2e0a      	cmp	r6, #10
 8004cd0:	d117      	bne.n	8004d02 <__swbuf_r+0x92>
 8004cd2:	4621      	mov	r1, r4
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	f000 f911 	bl	8004efc <_fflush_r>
 8004cda:	b190      	cbz	r0, 8004d02 <__swbuf_r+0x92>
 8004cdc:	e00f      	b.n	8004cfe <__swbuf_r+0x8e>
 8004cde:	4b0b      	ldr	r3, [pc, #44]	; (8004d0c <__swbuf_r+0x9c>)
 8004ce0:	429c      	cmp	r4, r3
 8004ce2:	d101      	bne.n	8004ce8 <__swbuf_r+0x78>
 8004ce4:	68ac      	ldr	r4, [r5, #8]
 8004ce6:	e7d0      	b.n	8004c8a <__swbuf_r+0x1a>
 8004ce8:	4b09      	ldr	r3, [pc, #36]	; (8004d10 <__swbuf_r+0xa0>)
 8004cea:	429c      	cmp	r4, r3
 8004cec:	bf08      	it	eq
 8004cee:	68ec      	ldreq	r4, [r5, #12]
 8004cf0:	e7cb      	b.n	8004c8a <__swbuf_r+0x1a>
 8004cf2:	4621      	mov	r1, r4
 8004cf4:	4628      	mov	r0, r5
 8004cf6:	f000 f80d 	bl	8004d14 <__swsetup_r>
 8004cfa:	2800      	cmp	r0, #0
 8004cfc:	d0cc      	beq.n	8004c98 <__swbuf_r+0x28>
 8004cfe:	f04f 37ff 	mov.w	r7, #4294967295
 8004d02:	4638      	mov	r0, r7
 8004d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d06:	bf00      	nop
 8004d08:	0800673c 	.word	0x0800673c
 8004d0c:	0800675c 	.word	0x0800675c
 8004d10:	0800671c 	.word	0x0800671c

08004d14 <__swsetup_r>:
 8004d14:	4b32      	ldr	r3, [pc, #200]	; (8004de0 <__swsetup_r+0xcc>)
 8004d16:	b570      	push	{r4, r5, r6, lr}
 8004d18:	681d      	ldr	r5, [r3, #0]
 8004d1a:	4606      	mov	r6, r0
 8004d1c:	460c      	mov	r4, r1
 8004d1e:	b125      	cbz	r5, 8004d2a <__swsetup_r+0x16>
 8004d20:	69ab      	ldr	r3, [r5, #24]
 8004d22:	b913      	cbnz	r3, 8004d2a <__swsetup_r+0x16>
 8004d24:	4628      	mov	r0, r5
 8004d26:	f000 f953 	bl	8004fd0 <__sinit>
 8004d2a:	4b2e      	ldr	r3, [pc, #184]	; (8004de4 <__swsetup_r+0xd0>)
 8004d2c:	429c      	cmp	r4, r3
 8004d2e:	d10f      	bne.n	8004d50 <__swsetup_r+0x3c>
 8004d30:	686c      	ldr	r4, [r5, #4]
 8004d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	0715      	lsls	r5, r2, #28
 8004d3a:	d42c      	bmi.n	8004d96 <__swsetup_r+0x82>
 8004d3c:	06d0      	lsls	r0, r2, #27
 8004d3e:	d411      	bmi.n	8004d64 <__swsetup_r+0x50>
 8004d40:	2209      	movs	r2, #9
 8004d42:	6032      	str	r2, [r6, #0]
 8004d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d48:	81a3      	strh	r3, [r4, #12]
 8004d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d4e:	e03e      	b.n	8004dce <__swsetup_r+0xba>
 8004d50:	4b25      	ldr	r3, [pc, #148]	; (8004de8 <__swsetup_r+0xd4>)
 8004d52:	429c      	cmp	r4, r3
 8004d54:	d101      	bne.n	8004d5a <__swsetup_r+0x46>
 8004d56:	68ac      	ldr	r4, [r5, #8]
 8004d58:	e7eb      	b.n	8004d32 <__swsetup_r+0x1e>
 8004d5a:	4b24      	ldr	r3, [pc, #144]	; (8004dec <__swsetup_r+0xd8>)
 8004d5c:	429c      	cmp	r4, r3
 8004d5e:	bf08      	it	eq
 8004d60:	68ec      	ldreq	r4, [r5, #12]
 8004d62:	e7e6      	b.n	8004d32 <__swsetup_r+0x1e>
 8004d64:	0751      	lsls	r1, r2, #29
 8004d66:	d512      	bpl.n	8004d8e <__swsetup_r+0x7a>
 8004d68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d6a:	b141      	cbz	r1, 8004d7e <__swsetup_r+0x6a>
 8004d6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d70:	4299      	cmp	r1, r3
 8004d72:	d002      	beq.n	8004d7a <__swsetup_r+0x66>
 8004d74:	4630      	mov	r0, r6
 8004d76:	f000 fa19 	bl	80051ac <_free_r>
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	6363      	str	r3, [r4, #52]	; 0x34
 8004d7e:	89a3      	ldrh	r3, [r4, #12]
 8004d80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d84:	81a3      	strh	r3, [r4, #12]
 8004d86:	2300      	movs	r3, #0
 8004d88:	6063      	str	r3, [r4, #4]
 8004d8a:	6923      	ldr	r3, [r4, #16]
 8004d8c:	6023      	str	r3, [r4, #0]
 8004d8e:	89a3      	ldrh	r3, [r4, #12]
 8004d90:	f043 0308 	orr.w	r3, r3, #8
 8004d94:	81a3      	strh	r3, [r4, #12]
 8004d96:	6923      	ldr	r3, [r4, #16]
 8004d98:	b94b      	cbnz	r3, 8004dae <__swsetup_r+0x9a>
 8004d9a:	89a3      	ldrh	r3, [r4, #12]
 8004d9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004da4:	d003      	beq.n	8004dae <__swsetup_r+0x9a>
 8004da6:	4621      	mov	r1, r4
 8004da8:	4630      	mov	r0, r6
 8004daa:	f000 f9bf 	bl	800512c <__smakebuf_r>
 8004dae:	89a2      	ldrh	r2, [r4, #12]
 8004db0:	f012 0301 	ands.w	r3, r2, #1
 8004db4:	d00c      	beq.n	8004dd0 <__swsetup_r+0xbc>
 8004db6:	2300      	movs	r3, #0
 8004db8:	60a3      	str	r3, [r4, #8]
 8004dba:	6963      	ldr	r3, [r4, #20]
 8004dbc:	425b      	negs	r3, r3
 8004dbe:	61a3      	str	r3, [r4, #24]
 8004dc0:	6923      	ldr	r3, [r4, #16]
 8004dc2:	b953      	cbnz	r3, 8004dda <__swsetup_r+0xc6>
 8004dc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dc8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004dcc:	d1ba      	bne.n	8004d44 <__swsetup_r+0x30>
 8004dce:	bd70      	pop	{r4, r5, r6, pc}
 8004dd0:	0792      	lsls	r2, r2, #30
 8004dd2:	bf58      	it	pl
 8004dd4:	6963      	ldrpl	r3, [r4, #20]
 8004dd6:	60a3      	str	r3, [r4, #8]
 8004dd8:	e7f2      	b.n	8004dc0 <__swsetup_r+0xac>
 8004dda:	2000      	movs	r0, #0
 8004ddc:	e7f7      	b.n	8004dce <__swsetup_r+0xba>
 8004dde:	bf00      	nop
 8004de0:	20000014 	.word	0x20000014
 8004de4:	0800673c 	.word	0x0800673c
 8004de8:	0800675c 	.word	0x0800675c
 8004dec:	0800671c 	.word	0x0800671c

08004df0 <__sflush_r>:
 8004df0:	898a      	ldrh	r2, [r1, #12]
 8004df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004df6:	4605      	mov	r5, r0
 8004df8:	0710      	lsls	r0, r2, #28
 8004dfa:	460c      	mov	r4, r1
 8004dfc:	d458      	bmi.n	8004eb0 <__sflush_r+0xc0>
 8004dfe:	684b      	ldr	r3, [r1, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	dc05      	bgt.n	8004e10 <__sflush_r+0x20>
 8004e04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	dc02      	bgt.n	8004e10 <__sflush_r+0x20>
 8004e0a:	2000      	movs	r0, #0
 8004e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e12:	2e00      	cmp	r6, #0
 8004e14:	d0f9      	beq.n	8004e0a <__sflush_r+0x1a>
 8004e16:	2300      	movs	r3, #0
 8004e18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e1c:	682f      	ldr	r7, [r5, #0]
 8004e1e:	6a21      	ldr	r1, [r4, #32]
 8004e20:	602b      	str	r3, [r5, #0]
 8004e22:	d032      	beq.n	8004e8a <__sflush_r+0x9a>
 8004e24:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e26:	89a3      	ldrh	r3, [r4, #12]
 8004e28:	075a      	lsls	r2, r3, #29
 8004e2a:	d505      	bpl.n	8004e38 <__sflush_r+0x48>
 8004e2c:	6863      	ldr	r3, [r4, #4]
 8004e2e:	1ac0      	subs	r0, r0, r3
 8004e30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e32:	b10b      	cbz	r3, 8004e38 <__sflush_r+0x48>
 8004e34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e36:	1ac0      	subs	r0, r0, r3
 8004e38:	2300      	movs	r3, #0
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e3e:	6a21      	ldr	r1, [r4, #32]
 8004e40:	4628      	mov	r0, r5
 8004e42:	47b0      	blx	r6
 8004e44:	1c43      	adds	r3, r0, #1
 8004e46:	89a3      	ldrh	r3, [r4, #12]
 8004e48:	d106      	bne.n	8004e58 <__sflush_r+0x68>
 8004e4a:	6829      	ldr	r1, [r5, #0]
 8004e4c:	291d      	cmp	r1, #29
 8004e4e:	d848      	bhi.n	8004ee2 <__sflush_r+0xf2>
 8004e50:	4a29      	ldr	r2, [pc, #164]	; (8004ef8 <__sflush_r+0x108>)
 8004e52:	40ca      	lsrs	r2, r1
 8004e54:	07d6      	lsls	r6, r2, #31
 8004e56:	d544      	bpl.n	8004ee2 <__sflush_r+0xf2>
 8004e58:	2200      	movs	r2, #0
 8004e5a:	6062      	str	r2, [r4, #4]
 8004e5c:	04d9      	lsls	r1, r3, #19
 8004e5e:	6922      	ldr	r2, [r4, #16]
 8004e60:	6022      	str	r2, [r4, #0]
 8004e62:	d504      	bpl.n	8004e6e <__sflush_r+0x7e>
 8004e64:	1c42      	adds	r2, r0, #1
 8004e66:	d101      	bne.n	8004e6c <__sflush_r+0x7c>
 8004e68:	682b      	ldr	r3, [r5, #0]
 8004e6a:	b903      	cbnz	r3, 8004e6e <__sflush_r+0x7e>
 8004e6c:	6560      	str	r0, [r4, #84]	; 0x54
 8004e6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e70:	602f      	str	r7, [r5, #0]
 8004e72:	2900      	cmp	r1, #0
 8004e74:	d0c9      	beq.n	8004e0a <__sflush_r+0x1a>
 8004e76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e7a:	4299      	cmp	r1, r3
 8004e7c:	d002      	beq.n	8004e84 <__sflush_r+0x94>
 8004e7e:	4628      	mov	r0, r5
 8004e80:	f000 f994 	bl	80051ac <_free_r>
 8004e84:	2000      	movs	r0, #0
 8004e86:	6360      	str	r0, [r4, #52]	; 0x34
 8004e88:	e7c0      	b.n	8004e0c <__sflush_r+0x1c>
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	4628      	mov	r0, r5
 8004e8e:	47b0      	blx	r6
 8004e90:	1c41      	adds	r1, r0, #1
 8004e92:	d1c8      	bne.n	8004e26 <__sflush_r+0x36>
 8004e94:	682b      	ldr	r3, [r5, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d0c5      	beq.n	8004e26 <__sflush_r+0x36>
 8004e9a:	2b1d      	cmp	r3, #29
 8004e9c:	d001      	beq.n	8004ea2 <__sflush_r+0xb2>
 8004e9e:	2b16      	cmp	r3, #22
 8004ea0:	d101      	bne.n	8004ea6 <__sflush_r+0xb6>
 8004ea2:	602f      	str	r7, [r5, #0]
 8004ea4:	e7b1      	b.n	8004e0a <__sflush_r+0x1a>
 8004ea6:	89a3      	ldrh	r3, [r4, #12]
 8004ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004eac:	81a3      	strh	r3, [r4, #12]
 8004eae:	e7ad      	b.n	8004e0c <__sflush_r+0x1c>
 8004eb0:	690f      	ldr	r7, [r1, #16]
 8004eb2:	2f00      	cmp	r7, #0
 8004eb4:	d0a9      	beq.n	8004e0a <__sflush_r+0x1a>
 8004eb6:	0793      	lsls	r3, r2, #30
 8004eb8:	680e      	ldr	r6, [r1, #0]
 8004eba:	bf08      	it	eq
 8004ebc:	694b      	ldreq	r3, [r1, #20]
 8004ebe:	600f      	str	r7, [r1, #0]
 8004ec0:	bf18      	it	ne
 8004ec2:	2300      	movne	r3, #0
 8004ec4:	eba6 0807 	sub.w	r8, r6, r7
 8004ec8:	608b      	str	r3, [r1, #8]
 8004eca:	f1b8 0f00 	cmp.w	r8, #0
 8004ece:	dd9c      	ble.n	8004e0a <__sflush_r+0x1a>
 8004ed0:	4643      	mov	r3, r8
 8004ed2:	463a      	mov	r2, r7
 8004ed4:	6a21      	ldr	r1, [r4, #32]
 8004ed6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ed8:	4628      	mov	r0, r5
 8004eda:	47b0      	blx	r6
 8004edc:	2800      	cmp	r0, #0
 8004ede:	dc06      	bgt.n	8004eee <__sflush_r+0xfe>
 8004ee0:	89a3      	ldrh	r3, [r4, #12]
 8004ee2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ee6:	81a3      	strh	r3, [r4, #12]
 8004ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8004eec:	e78e      	b.n	8004e0c <__sflush_r+0x1c>
 8004eee:	4407      	add	r7, r0
 8004ef0:	eba8 0800 	sub.w	r8, r8, r0
 8004ef4:	e7e9      	b.n	8004eca <__sflush_r+0xda>
 8004ef6:	bf00      	nop
 8004ef8:	20400001 	.word	0x20400001

08004efc <_fflush_r>:
 8004efc:	b538      	push	{r3, r4, r5, lr}
 8004efe:	690b      	ldr	r3, [r1, #16]
 8004f00:	4605      	mov	r5, r0
 8004f02:	460c      	mov	r4, r1
 8004f04:	b1db      	cbz	r3, 8004f3e <_fflush_r+0x42>
 8004f06:	b118      	cbz	r0, 8004f10 <_fflush_r+0x14>
 8004f08:	6983      	ldr	r3, [r0, #24]
 8004f0a:	b90b      	cbnz	r3, 8004f10 <_fflush_r+0x14>
 8004f0c:	f000 f860 	bl	8004fd0 <__sinit>
 8004f10:	4b0c      	ldr	r3, [pc, #48]	; (8004f44 <_fflush_r+0x48>)
 8004f12:	429c      	cmp	r4, r3
 8004f14:	d109      	bne.n	8004f2a <_fflush_r+0x2e>
 8004f16:	686c      	ldr	r4, [r5, #4]
 8004f18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f1c:	b17b      	cbz	r3, 8004f3e <_fflush_r+0x42>
 8004f1e:	4621      	mov	r1, r4
 8004f20:	4628      	mov	r0, r5
 8004f22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f26:	f7ff bf63 	b.w	8004df0 <__sflush_r>
 8004f2a:	4b07      	ldr	r3, [pc, #28]	; (8004f48 <_fflush_r+0x4c>)
 8004f2c:	429c      	cmp	r4, r3
 8004f2e:	d101      	bne.n	8004f34 <_fflush_r+0x38>
 8004f30:	68ac      	ldr	r4, [r5, #8]
 8004f32:	e7f1      	b.n	8004f18 <_fflush_r+0x1c>
 8004f34:	4b05      	ldr	r3, [pc, #20]	; (8004f4c <_fflush_r+0x50>)
 8004f36:	429c      	cmp	r4, r3
 8004f38:	bf08      	it	eq
 8004f3a:	68ec      	ldreq	r4, [r5, #12]
 8004f3c:	e7ec      	b.n	8004f18 <_fflush_r+0x1c>
 8004f3e:	2000      	movs	r0, #0
 8004f40:	bd38      	pop	{r3, r4, r5, pc}
 8004f42:	bf00      	nop
 8004f44:	0800673c 	.word	0x0800673c
 8004f48:	0800675c 	.word	0x0800675c
 8004f4c:	0800671c 	.word	0x0800671c

08004f50 <std>:
 8004f50:	2300      	movs	r3, #0
 8004f52:	b510      	push	{r4, lr}
 8004f54:	4604      	mov	r4, r0
 8004f56:	e9c0 3300 	strd	r3, r3, [r0]
 8004f5a:	6083      	str	r3, [r0, #8]
 8004f5c:	8181      	strh	r1, [r0, #12]
 8004f5e:	6643      	str	r3, [r0, #100]	; 0x64
 8004f60:	81c2      	strh	r2, [r0, #14]
 8004f62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f66:	6183      	str	r3, [r0, #24]
 8004f68:	4619      	mov	r1, r3
 8004f6a:	2208      	movs	r2, #8
 8004f6c:	305c      	adds	r0, #92	; 0x5c
 8004f6e:	f7ff fdd5 	bl	8004b1c <memset>
 8004f72:	4b05      	ldr	r3, [pc, #20]	; (8004f88 <std+0x38>)
 8004f74:	6263      	str	r3, [r4, #36]	; 0x24
 8004f76:	4b05      	ldr	r3, [pc, #20]	; (8004f8c <std+0x3c>)
 8004f78:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f7a:	4b05      	ldr	r3, [pc, #20]	; (8004f90 <std+0x40>)
 8004f7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f7e:	4b05      	ldr	r3, [pc, #20]	; (8004f94 <std+0x44>)
 8004f80:	6224      	str	r4, [r4, #32]
 8004f82:	6323      	str	r3, [r4, #48]	; 0x30
 8004f84:	bd10      	pop	{r4, pc}
 8004f86:	bf00      	nop
 8004f88:	0800531d 	.word	0x0800531d
 8004f8c:	0800533f 	.word	0x0800533f
 8004f90:	08005377 	.word	0x08005377
 8004f94:	0800539b 	.word	0x0800539b

08004f98 <_cleanup_r>:
 8004f98:	4901      	ldr	r1, [pc, #4]	; (8004fa0 <_cleanup_r+0x8>)
 8004f9a:	f000 b885 	b.w	80050a8 <_fwalk_reent>
 8004f9e:	bf00      	nop
 8004fa0:	08004efd 	.word	0x08004efd

08004fa4 <__sfmoreglue>:
 8004fa4:	b570      	push	{r4, r5, r6, lr}
 8004fa6:	1e4a      	subs	r2, r1, #1
 8004fa8:	2568      	movs	r5, #104	; 0x68
 8004faa:	4355      	muls	r5, r2
 8004fac:	460e      	mov	r6, r1
 8004fae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004fb2:	f000 f949 	bl	8005248 <_malloc_r>
 8004fb6:	4604      	mov	r4, r0
 8004fb8:	b140      	cbz	r0, 8004fcc <__sfmoreglue+0x28>
 8004fba:	2100      	movs	r1, #0
 8004fbc:	e9c0 1600 	strd	r1, r6, [r0]
 8004fc0:	300c      	adds	r0, #12
 8004fc2:	60a0      	str	r0, [r4, #8]
 8004fc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004fc8:	f7ff fda8 	bl	8004b1c <memset>
 8004fcc:	4620      	mov	r0, r4
 8004fce:	bd70      	pop	{r4, r5, r6, pc}

08004fd0 <__sinit>:
 8004fd0:	6983      	ldr	r3, [r0, #24]
 8004fd2:	b510      	push	{r4, lr}
 8004fd4:	4604      	mov	r4, r0
 8004fd6:	bb33      	cbnz	r3, 8005026 <__sinit+0x56>
 8004fd8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004fdc:	6503      	str	r3, [r0, #80]	; 0x50
 8004fde:	4b12      	ldr	r3, [pc, #72]	; (8005028 <__sinit+0x58>)
 8004fe0:	4a12      	ldr	r2, [pc, #72]	; (800502c <__sinit+0x5c>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6282      	str	r2, [r0, #40]	; 0x28
 8004fe6:	4298      	cmp	r0, r3
 8004fe8:	bf04      	itt	eq
 8004fea:	2301      	moveq	r3, #1
 8004fec:	6183      	streq	r3, [r0, #24]
 8004fee:	f000 f81f 	bl	8005030 <__sfp>
 8004ff2:	6060      	str	r0, [r4, #4]
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	f000 f81b 	bl	8005030 <__sfp>
 8004ffa:	60a0      	str	r0, [r4, #8]
 8004ffc:	4620      	mov	r0, r4
 8004ffe:	f000 f817 	bl	8005030 <__sfp>
 8005002:	2200      	movs	r2, #0
 8005004:	60e0      	str	r0, [r4, #12]
 8005006:	2104      	movs	r1, #4
 8005008:	6860      	ldr	r0, [r4, #4]
 800500a:	f7ff ffa1 	bl	8004f50 <std>
 800500e:	2201      	movs	r2, #1
 8005010:	2109      	movs	r1, #9
 8005012:	68a0      	ldr	r0, [r4, #8]
 8005014:	f7ff ff9c 	bl	8004f50 <std>
 8005018:	2202      	movs	r2, #2
 800501a:	2112      	movs	r1, #18
 800501c:	68e0      	ldr	r0, [r4, #12]
 800501e:	f7ff ff97 	bl	8004f50 <std>
 8005022:	2301      	movs	r3, #1
 8005024:	61a3      	str	r3, [r4, #24]
 8005026:	bd10      	pop	{r4, pc}
 8005028:	080066f0 	.word	0x080066f0
 800502c:	08004f99 	.word	0x08004f99

08005030 <__sfp>:
 8005030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005032:	4b1b      	ldr	r3, [pc, #108]	; (80050a0 <__sfp+0x70>)
 8005034:	681e      	ldr	r6, [r3, #0]
 8005036:	69b3      	ldr	r3, [r6, #24]
 8005038:	4607      	mov	r7, r0
 800503a:	b913      	cbnz	r3, 8005042 <__sfp+0x12>
 800503c:	4630      	mov	r0, r6
 800503e:	f7ff ffc7 	bl	8004fd0 <__sinit>
 8005042:	3648      	adds	r6, #72	; 0x48
 8005044:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005048:	3b01      	subs	r3, #1
 800504a:	d503      	bpl.n	8005054 <__sfp+0x24>
 800504c:	6833      	ldr	r3, [r6, #0]
 800504e:	b133      	cbz	r3, 800505e <__sfp+0x2e>
 8005050:	6836      	ldr	r6, [r6, #0]
 8005052:	e7f7      	b.n	8005044 <__sfp+0x14>
 8005054:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005058:	b16d      	cbz	r5, 8005076 <__sfp+0x46>
 800505a:	3468      	adds	r4, #104	; 0x68
 800505c:	e7f4      	b.n	8005048 <__sfp+0x18>
 800505e:	2104      	movs	r1, #4
 8005060:	4638      	mov	r0, r7
 8005062:	f7ff ff9f 	bl	8004fa4 <__sfmoreglue>
 8005066:	6030      	str	r0, [r6, #0]
 8005068:	2800      	cmp	r0, #0
 800506a:	d1f1      	bne.n	8005050 <__sfp+0x20>
 800506c:	230c      	movs	r3, #12
 800506e:	603b      	str	r3, [r7, #0]
 8005070:	4604      	mov	r4, r0
 8005072:	4620      	mov	r0, r4
 8005074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005076:	4b0b      	ldr	r3, [pc, #44]	; (80050a4 <__sfp+0x74>)
 8005078:	6665      	str	r5, [r4, #100]	; 0x64
 800507a:	e9c4 5500 	strd	r5, r5, [r4]
 800507e:	60a5      	str	r5, [r4, #8]
 8005080:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005084:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005088:	2208      	movs	r2, #8
 800508a:	4629      	mov	r1, r5
 800508c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005090:	f7ff fd44 	bl	8004b1c <memset>
 8005094:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005098:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800509c:	e7e9      	b.n	8005072 <__sfp+0x42>
 800509e:	bf00      	nop
 80050a0:	080066f0 	.word	0x080066f0
 80050a4:	ffff0001 	.word	0xffff0001

080050a8 <_fwalk_reent>:
 80050a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050ac:	4680      	mov	r8, r0
 80050ae:	4689      	mov	r9, r1
 80050b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80050b4:	2600      	movs	r6, #0
 80050b6:	b914      	cbnz	r4, 80050be <_fwalk_reent+0x16>
 80050b8:	4630      	mov	r0, r6
 80050ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050be:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80050c2:	3f01      	subs	r7, #1
 80050c4:	d501      	bpl.n	80050ca <_fwalk_reent+0x22>
 80050c6:	6824      	ldr	r4, [r4, #0]
 80050c8:	e7f5      	b.n	80050b6 <_fwalk_reent+0xe>
 80050ca:	89ab      	ldrh	r3, [r5, #12]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d907      	bls.n	80050e0 <_fwalk_reent+0x38>
 80050d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80050d4:	3301      	adds	r3, #1
 80050d6:	d003      	beq.n	80050e0 <_fwalk_reent+0x38>
 80050d8:	4629      	mov	r1, r5
 80050da:	4640      	mov	r0, r8
 80050dc:	47c8      	blx	r9
 80050de:	4306      	orrs	r6, r0
 80050e0:	3568      	adds	r5, #104	; 0x68
 80050e2:	e7ee      	b.n	80050c2 <_fwalk_reent+0x1a>

080050e4 <__swhatbuf_r>:
 80050e4:	b570      	push	{r4, r5, r6, lr}
 80050e6:	460e      	mov	r6, r1
 80050e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050ec:	2900      	cmp	r1, #0
 80050ee:	b096      	sub	sp, #88	; 0x58
 80050f0:	4614      	mov	r4, r2
 80050f2:	461d      	mov	r5, r3
 80050f4:	da07      	bge.n	8005106 <__swhatbuf_r+0x22>
 80050f6:	2300      	movs	r3, #0
 80050f8:	602b      	str	r3, [r5, #0]
 80050fa:	89b3      	ldrh	r3, [r6, #12]
 80050fc:	061a      	lsls	r2, r3, #24
 80050fe:	d410      	bmi.n	8005122 <__swhatbuf_r+0x3e>
 8005100:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005104:	e00e      	b.n	8005124 <__swhatbuf_r+0x40>
 8005106:	466a      	mov	r2, sp
 8005108:	f000 f96e 	bl	80053e8 <_fstat_r>
 800510c:	2800      	cmp	r0, #0
 800510e:	dbf2      	blt.n	80050f6 <__swhatbuf_r+0x12>
 8005110:	9a01      	ldr	r2, [sp, #4]
 8005112:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005116:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800511a:	425a      	negs	r2, r3
 800511c:	415a      	adcs	r2, r3
 800511e:	602a      	str	r2, [r5, #0]
 8005120:	e7ee      	b.n	8005100 <__swhatbuf_r+0x1c>
 8005122:	2340      	movs	r3, #64	; 0x40
 8005124:	2000      	movs	r0, #0
 8005126:	6023      	str	r3, [r4, #0]
 8005128:	b016      	add	sp, #88	; 0x58
 800512a:	bd70      	pop	{r4, r5, r6, pc}

0800512c <__smakebuf_r>:
 800512c:	898b      	ldrh	r3, [r1, #12]
 800512e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005130:	079d      	lsls	r5, r3, #30
 8005132:	4606      	mov	r6, r0
 8005134:	460c      	mov	r4, r1
 8005136:	d507      	bpl.n	8005148 <__smakebuf_r+0x1c>
 8005138:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800513c:	6023      	str	r3, [r4, #0]
 800513e:	6123      	str	r3, [r4, #16]
 8005140:	2301      	movs	r3, #1
 8005142:	6163      	str	r3, [r4, #20]
 8005144:	b002      	add	sp, #8
 8005146:	bd70      	pop	{r4, r5, r6, pc}
 8005148:	ab01      	add	r3, sp, #4
 800514a:	466a      	mov	r2, sp
 800514c:	f7ff ffca 	bl	80050e4 <__swhatbuf_r>
 8005150:	9900      	ldr	r1, [sp, #0]
 8005152:	4605      	mov	r5, r0
 8005154:	4630      	mov	r0, r6
 8005156:	f000 f877 	bl	8005248 <_malloc_r>
 800515a:	b948      	cbnz	r0, 8005170 <__smakebuf_r+0x44>
 800515c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005160:	059a      	lsls	r2, r3, #22
 8005162:	d4ef      	bmi.n	8005144 <__smakebuf_r+0x18>
 8005164:	f023 0303 	bic.w	r3, r3, #3
 8005168:	f043 0302 	orr.w	r3, r3, #2
 800516c:	81a3      	strh	r3, [r4, #12]
 800516e:	e7e3      	b.n	8005138 <__smakebuf_r+0xc>
 8005170:	4b0d      	ldr	r3, [pc, #52]	; (80051a8 <__smakebuf_r+0x7c>)
 8005172:	62b3      	str	r3, [r6, #40]	; 0x28
 8005174:	89a3      	ldrh	r3, [r4, #12]
 8005176:	6020      	str	r0, [r4, #0]
 8005178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800517c:	81a3      	strh	r3, [r4, #12]
 800517e:	9b00      	ldr	r3, [sp, #0]
 8005180:	6163      	str	r3, [r4, #20]
 8005182:	9b01      	ldr	r3, [sp, #4]
 8005184:	6120      	str	r0, [r4, #16]
 8005186:	b15b      	cbz	r3, 80051a0 <__smakebuf_r+0x74>
 8005188:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800518c:	4630      	mov	r0, r6
 800518e:	f000 f93d 	bl	800540c <_isatty_r>
 8005192:	b128      	cbz	r0, 80051a0 <__smakebuf_r+0x74>
 8005194:	89a3      	ldrh	r3, [r4, #12]
 8005196:	f023 0303 	bic.w	r3, r3, #3
 800519a:	f043 0301 	orr.w	r3, r3, #1
 800519e:	81a3      	strh	r3, [r4, #12]
 80051a0:	89a3      	ldrh	r3, [r4, #12]
 80051a2:	431d      	orrs	r5, r3
 80051a4:	81a5      	strh	r5, [r4, #12]
 80051a6:	e7cd      	b.n	8005144 <__smakebuf_r+0x18>
 80051a8:	08004f99 	.word	0x08004f99

080051ac <_free_r>:
 80051ac:	b538      	push	{r3, r4, r5, lr}
 80051ae:	4605      	mov	r5, r0
 80051b0:	2900      	cmp	r1, #0
 80051b2:	d045      	beq.n	8005240 <_free_r+0x94>
 80051b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051b8:	1f0c      	subs	r4, r1, #4
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	bfb8      	it	lt
 80051be:	18e4      	addlt	r4, r4, r3
 80051c0:	f000 f946 	bl	8005450 <__malloc_lock>
 80051c4:	4a1f      	ldr	r2, [pc, #124]	; (8005244 <_free_r+0x98>)
 80051c6:	6813      	ldr	r3, [r2, #0]
 80051c8:	4610      	mov	r0, r2
 80051ca:	b933      	cbnz	r3, 80051da <_free_r+0x2e>
 80051cc:	6063      	str	r3, [r4, #4]
 80051ce:	6014      	str	r4, [r2, #0]
 80051d0:	4628      	mov	r0, r5
 80051d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051d6:	f000 b93c 	b.w	8005452 <__malloc_unlock>
 80051da:	42a3      	cmp	r3, r4
 80051dc:	d90c      	bls.n	80051f8 <_free_r+0x4c>
 80051de:	6821      	ldr	r1, [r4, #0]
 80051e0:	1862      	adds	r2, r4, r1
 80051e2:	4293      	cmp	r3, r2
 80051e4:	bf04      	itt	eq
 80051e6:	681a      	ldreq	r2, [r3, #0]
 80051e8:	685b      	ldreq	r3, [r3, #4]
 80051ea:	6063      	str	r3, [r4, #4]
 80051ec:	bf04      	itt	eq
 80051ee:	1852      	addeq	r2, r2, r1
 80051f0:	6022      	streq	r2, [r4, #0]
 80051f2:	6004      	str	r4, [r0, #0]
 80051f4:	e7ec      	b.n	80051d0 <_free_r+0x24>
 80051f6:	4613      	mov	r3, r2
 80051f8:	685a      	ldr	r2, [r3, #4]
 80051fa:	b10a      	cbz	r2, 8005200 <_free_r+0x54>
 80051fc:	42a2      	cmp	r2, r4
 80051fe:	d9fa      	bls.n	80051f6 <_free_r+0x4a>
 8005200:	6819      	ldr	r1, [r3, #0]
 8005202:	1858      	adds	r0, r3, r1
 8005204:	42a0      	cmp	r0, r4
 8005206:	d10b      	bne.n	8005220 <_free_r+0x74>
 8005208:	6820      	ldr	r0, [r4, #0]
 800520a:	4401      	add	r1, r0
 800520c:	1858      	adds	r0, r3, r1
 800520e:	4282      	cmp	r2, r0
 8005210:	6019      	str	r1, [r3, #0]
 8005212:	d1dd      	bne.n	80051d0 <_free_r+0x24>
 8005214:	6810      	ldr	r0, [r2, #0]
 8005216:	6852      	ldr	r2, [r2, #4]
 8005218:	605a      	str	r2, [r3, #4]
 800521a:	4401      	add	r1, r0
 800521c:	6019      	str	r1, [r3, #0]
 800521e:	e7d7      	b.n	80051d0 <_free_r+0x24>
 8005220:	d902      	bls.n	8005228 <_free_r+0x7c>
 8005222:	230c      	movs	r3, #12
 8005224:	602b      	str	r3, [r5, #0]
 8005226:	e7d3      	b.n	80051d0 <_free_r+0x24>
 8005228:	6820      	ldr	r0, [r4, #0]
 800522a:	1821      	adds	r1, r4, r0
 800522c:	428a      	cmp	r2, r1
 800522e:	bf04      	itt	eq
 8005230:	6811      	ldreq	r1, [r2, #0]
 8005232:	6852      	ldreq	r2, [r2, #4]
 8005234:	6062      	str	r2, [r4, #4]
 8005236:	bf04      	itt	eq
 8005238:	1809      	addeq	r1, r1, r0
 800523a:	6021      	streq	r1, [r4, #0]
 800523c:	605c      	str	r4, [r3, #4]
 800523e:	e7c7      	b.n	80051d0 <_free_r+0x24>
 8005240:	bd38      	pop	{r3, r4, r5, pc}
 8005242:	bf00      	nop
 8005244:	20000098 	.word	0x20000098

08005248 <_malloc_r>:
 8005248:	b570      	push	{r4, r5, r6, lr}
 800524a:	1ccd      	adds	r5, r1, #3
 800524c:	f025 0503 	bic.w	r5, r5, #3
 8005250:	3508      	adds	r5, #8
 8005252:	2d0c      	cmp	r5, #12
 8005254:	bf38      	it	cc
 8005256:	250c      	movcc	r5, #12
 8005258:	2d00      	cmp	r5, #0
 800525a:	4606      	mov	r6, r0
 800525c:	db01      	blt.n	8005262 <_malloc_r+0x1a>
 800525e:	42a9      	cmp	r1, r5
 8005260:	d903      	bls.n	800526a <_malloc_r+0x22>
 8005262:	230c      	movs	r3, #12
 8005264:	6033      	str	r3, [r6, #0]
 8005266:	2000      	movs	r0, #0
 8005268:	bd70      	pop	{r4, r5, r6, pc}
 800526a:	f000 f8f1 	bl	8005450 <__malloc_lock>
 800526e:	4a21      	ldr	r2, [pc, #132]	; (80052f4 <_malloc_r+0xac>)
 8005270:	6814      	ldr	r4, [r2, #0]
 8005272:	4621      	mov	r1, r4
 8005274:	b991      	cbnz	r1, 800529c <_malloc_r+0x54>
 8005276:	4c20      	ldr	r4, [pc, #128]	; (80052f8 <_malloc_r+0xb0>)
 8005278:	6823      	ldr	r3, [r4, #0]
 800527a:	b91b      	cbnz	r3, 8005284 <_malloc_r+0x3c>
 800527c:	4630      	mov	r0, r6
 800527e:	f000 f83d 	bl	80052fc <_sbrk_r>
 8005282:	6020      	str	r0, [r4, #0]
 8005284:	4629      	mov	r1, r5
 8005286:	4630      	mov	r0, r6
 8005288:	f000 f838 	bl	80052fc <_sbrk_r>
 800528c:	1c43      	adds	r3, r0, #1
 800528e:	d124      	bne.n	80052da <_malloc_r+0x92>
 8005290:	230c      	movs	r3, #12
 8005292:	6033      	str	r3, [r6, #0]
 8005294:	4630      	mov	r0, r6
 8005296:	f000 f8dc 	bl	8005452 <__malloc_unlock>
 800529a:	e7e4      	b.n	8005266 <_malloc_r+0x1e>
 800529c:	680b      	ldr	r3, [r1, #0]
 800529e:	1b5b      	subs	r3, r3, r5
 80052a0:	d418      	bmi.n	80052d4 <_malloc_r+0x8c>
 80052a2:	2b0b      	cmp	r3, #11
 80052a4:	d90f      	bls.n	80052c6 <_malloc_r+0x7e>
 80052a6:	600b      	str	r3, [r1, #0]
 80052a8:	50cd      	str	r5, [r1, r3]
 80052aa:	18cc      	adds	r4, r1, r3
 80052ac:	4630      	mov	r0, r6
 80052ae:	f000 f8d0 	bl	8005452 <__malloc_unlock>
 80052b2:	f104 000b 	add.w	r0, r4, #11
 80052b6:	1d23      	adds	r3, r4, #4
 80052b8:	f020 0007 	bic.w	r0, r0, #7
 80052bc:	1ac3      	subs	r3, r0, r3
 80052be:	d0d3      	beq.n	8005268 <_malloc_r+0x20>
 80052c0:	425a      	negs	r2, r3
 80052c2:	50e2      	str	r2, [r4, r3]
 80052c4:	e7d0      	b.n	8005268 <_malloc_r+0x20>
 80052c6:	428c      	cmp	r4, r1
 80052c8:	684b      	ldr	r3, [r1, #4]
 80052ca:	bf16      	itet	ne
 80052cc:	6063      	strne	r3, [r4, #4]
 80052ce:	6013      	streq	r3, [r2, #0]
 80052d0:	460c      	movne	r4, r1
 80052d2:	e7eb      	b.n	80052ac <_malloc_r+0x64>
 80052d4:	460c      	mov	r4, r1
 80052d6:	6849      	ldr	r1, [r1, #4]
 80052d8:	e7cc      	b.n	8005274 <_malloc_r+0x2c>
 80052da:	1cc4      	adds	r4, r0, #3
 80052dc:	f024 0403 	bic.w	r4, r4, #3
 80052e0:	42a0      	cmp	r0, r4
 80052e2:	d005      	beq.n	80052f0 <_malloc_r+0xa8>
 80052e4:	1a21      	subs	r1, r4, r0
 80052e6:	4630      	mov	r0, r6
 80052e8:	f000 f808 	bl	80052fc <_sbrk_r>
 80052ec:	3001      	adds	r0, #1
 80052ee:	d0cf      	beq.n	8005290 <_malloc_r+0x48>
 80052f0:	6025      	str	r5, [r4, #0]
 80052f2:	e7db      	b.n	80052ac <_malloc_r+0x64>
 80052f4:	20000098 	.word	0x20000098
 80052f8:	2000009c 	.word	0x2000009c

080052fc <_sbrk_r>:
 80052fc:	b538      	push	{r3, r4, r5, lr}
 80052fe:	4c06      	ldr	r4, [pc, #24]	; (8005318 <_sbrk_r+0x1c>)
 8005300:	2300      	movs	r3, #0
 8005302:	4605      	mov	r5, r0
 8005304:	4608      	mov	r0, r1
 8005306:	6023      	str	r3, [r4, #0]
 8005308:	f7fb fe68 	bl	8000fdc <_sbrk>
 800530c:	1c43      	adds	r3, r0, #1
 800530e:	d102      	bne.n	8005316 <_sbrk_r+0x1a>
 8005310:	6823      	ldr	r3, [r4, #0]
 8005312:	b103      	cbz	r3, 8005316 <_sbrk_r+0x1a>
 8005314:	602b      	str	r3, [r5, #0]
 8005316:	bd38      	pop	{r3, r4, r5, pc}
 8005318:	200002a4 	.word	0x200002a4

0800531c <__sread>:
 800531c:	b510      	push	{r4, lr}
 800531e:	460c      	mov	r4, r1
 8005320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005324:	f000 f896 	bl	8005454 <_read_r>
 8005328:	2800      	cmp	r0, #0
 800532a:	bfab      	itete	ge
 800532c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800532e:	89a3      	ldrhlt	r3, [r4, #12]
 8005330:	181b      	addge	r3, r3, r0
 8005332:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005336:	bfac      	ite	ge
 8005338:	6563      	strge	r3, [r4, #84]	; 0x54
 800533a:	81a3      	strhlt	r3, [r4, #12]
 800533c:	bd10      	pop	{r4, pc}

0800533e <__swrite>:
 800533e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005342:	461f      	mov	r7, r3
 8005344:	898b      	ldrh	r3, [r1, #12]
 8005346:	05db      	lsls	r3, r3, #23
 8005348:	4605      	mov	r5, r0
 800534a:	460c      	mov	r4, r1
 800534c:	4616      	mov	r6, r2
 800534e:	d505      	bpl.n	800535c <__swrite+0x1e>
 8005350:	2302      	movs	r3, #2
 8005352:	2200      	movs	r2, #0
 8005354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005358:	f000 f868 	bl	800542c <_lseek_r>
 800535c:	89a3      	ldrh	r3, [r4, #12]
 800535e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005362:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005366:	81a3      	strh	r3, [r4, #12]
 8005368:	4632      	mov	r2, r6
 800536a:	463b      	mov	r3, r7
 800536c:	4628      	mov	r0, r5
 800536e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005372:	f000 b817 	b.w	80053a4 <_write_r>

08005376 <__sseek>:
 8005376:	b510      	push	{r4, lr}
 8005378:	460c      	mov	r4, r1
 800537a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800537e:	f000 f855 	bl	800542c <_lseek_r>
 8005382:	1c43      	adds	r3, r0, #1
 8005384:	89a3      	ldrh	r3, [r4, #12]
 8005386:	bf15      	itete	ne
 8005388:	6560      	strne	r0, [r4, #84]	; 0x54
 800538a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800538e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005392:	81a3      	strheq	r3, [r4, #12]
 8005394:	bf18      	it	ne
 8005396:	81a3      	strhne	r3, [r4, #12]
 8005398:	bd10      	pop	{r4, pc}

0800539a <__sclose>:
 800539a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800539e:	f000 b813 	b.w	80053c8 <_close_r>
	...

080053a4 <_write_r>:
 80053a4:	b538      	push	{r3, r4, r5, lr}
 80053a6:	4c07      	ldr	r4, [pc, #28]	; (80053c4 <_write_r+0x20>)
 80053a8:	4605      	mov	r5, r0
 80053aa:	4608      	mov	r0, r1
 80053ac:	4611      	mov	r1, r2
 80053ae:	2200      	movs	r2, #0
 80053b0:	6022      	str	r2, [r4, #0]
 80053b2:	461a      	mov	r2, r3
 80053b4:	f7fb fdc1 	bl	8000f3a <_write>
 80053b8:	1c43      	adds	r3, r0, #1
 80053ba:	d102      	bne.n	80053c2 <_write_r+0x1e>
 80053bc:	6823      	ldr	r3, [r4, #0]
 80053be:	b103      	cbz	r3, 80053c2 <_write_r+0x1e>
 80053c0:	602b      	str	r3, [r5, #0]
 80053c2:	bd38      	pop	{r3, r4, r5, pc}
 80053c4:	200002a4 	.word	0x200002a4

080053c8 <_close_r>:
 80053c8:	b538      	push	{r3, r4, r5, lr}
 80053ca:	4c06      	ldr	r4, [pc, #24]	; (80053e4 <_close_r+0x1c>)
 80053cc:	2300      	movs	r3, #0
 80053ce:	4605      	mov	r5, r0
 80053d0:	4608      	mov	r0, r1
 80053d2:	6023      	str	r3, [r4, #0]
 80053d4:	f7fb fdcd 	bl	8000f72 <_close>
 80053d8:	1c43      	adds	r3, r0, #1
 80053da:	d102      	bne.n	80053e2 <_close_r+0x1a>
 80053dc:	6823      	ldr	r3, [r4, #0]
 80053de:	b103      	cbz	r3, 80053e2 <_close_r+0x1a>
 80053e0:	602b      	str	r3, [r5, #0]
 80053e2:	bd38      	pop	{r3, r4, r5, pc}
 80053e4:	200002a4 	.word	0x200002a4

080053e8 <_fstat_r>:
 80053e8:	b538      	push	{r3, r4, r5, lr}
 80053ea:	4c07      	ldr	r4, [pc, #28]	; (8005408 <_fstat_r+0x20>)
 80053ec:	2300      	movs	r3, #0
 80053ee:	4605      	mov	r5, r0
 80053f0:	4608      	mov	r0, r1
 80053f2:	4611      	mov	r1, r2
 80053f4:	6023      	str	r3, [r4, #0]
 80053f6:	f7fb fdc8 	bl	8000f8a <_fstat>
 80053fa:	1c43      	adds	r3, r0, #1
 80053fc:	d102      	bne.n	8005404 <_fstat_r+0x1c>
 80053fe:	6823      	ldr	r3, [r4, #0]
 8005400:	b103      	cbz	r3, 8005404 <_fstat_r+0x1c>
 8005402:	602b      	str	r3, [r5, #0]
 8005404:	bd38      	pop	{r3, r4, r5, pc}
 8005406:	bf00      	nop
 8005408:	200002a4 	.word	0x200002a4

0800540c <_isatty_r>:
 800540c:	b538      	push	{r3, r4, r5, lr}
 800540e:	4c06      	ldr	r4, [pc, #24]	; (8005428 <_isatty_r+0x1c>)
 8005410:	2300      	movs	r3, #0
 8005412:	4605      	mov	r5, r0
 8005414:	4608      	mov	r0, r1
 8005416:	6023      	str	r3, [r4, #0]
 8005418:	f7fb fdc7 	bl	8000faa <_isatty>
 800541c:	1c43      	adds	r3, r0, #1
 800541e:	d102      	bne.n	8005426 <_isatty_r+0x1a>
 8005420:	6823      	ldr	r3, [r4, #0]
 8005422:	b103      	cbz	r3, 8005426 <_isatty_r+0x1a>
 8005424:	602b      	str	r3, [r5, #0]
 8005426:	bd38      	pop	{r3, r4, r5, pc}
 8005428:	200002a4 	.word	0x200002a4

0800542c <_lseek_r>:
 800542c:	b538      	push	{r3, r4, r5, lr}
 800542e:	4c07      	ldr	r4, [pc, #28]	; (800544c <_lseek_r+0x20>)
 8005430:	4605      	mov	r5, r0
 8005432:	4608      	mov	r0, r1
 8005434:	4611      	mov	r1, r2
 8005436:	2200      	movs	r2, #0
 8005438:	6022      	str	r2, [r4, #0]
 800543a:	461a      	mov	r2, r3
 800543c:	f7fb fdc0 	bl	8000fc0 <_lseek>
 8005440:	1c43      	adds	r3, r0, #1
 8005442:	d102      	bne.n	800544a <_lseek_r+0x1e>
 8005444:	6823      	ldr	r3, [r4, #0]
 8005446:	b103      	cbz	r3, 800544a <_lseek_r+0x1e>
 8005448:	602b      	str	r3, [r5, #0]
 800544a:	bd38      	pop	{r3, r4, r5, pc}
 800544c:	200002a4 	.word	0x200002a4

08005450 <__malloc_lock>:
 8005450:	4770      	bx	lr

08005452 <__malloc_unlock>:
 8005452:	4770      	bx	lr

08005454 <_read_r>:
 8005454:	b538      	push	{r3, r4, r5, lr}
 8005456:	4c07      	ldr	r4, [pc, #28]	; (8005474 <_read_r+0x20>)
 8005458:	4605      	mov	r5, r0
 800545a:	4608      	mov	r0, r1
 800545c:	4611      	mov	r1, r2
 800545e:	2200      	movs	r2, #0
 8005460:	6022      	str	r2, [r4, #0]
 8005462:	461a      	mov	r2, r3
 8005464:	f7fb fd4c 	bl	8000f00 <_read>
 8005468:	1c43      	adds	r3, r0, #1
 800546a:	d102      	bne.n	8005472 <_read_r+0x1e>
 800546c:	6823      	ldr	r3, [r4, #0]
 800546e:	b103      	cbz	r3, 8005472 <_read_r+0x1e>
 8005470:	602b      	str	r3, [r5, #0]
 8005472:	bd38      	pop	{r3, r4, r5, pc}
 8005474:	200002a4 	.word	0x200002a4

08005478 <_init>:
 8005478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800547a:	bf00      	nop
 800547c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800547e:	bc08      	pop	{r3}
 8005480:	469e      	mov	lr, r3
 8005482:	4770      	bx	lr

08005484 <_fini>:
 8005484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005486:	bf00      	nop
 8005488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800548a:	bc08      	pop	{r3}
 800548c:	469e      	mov	lr, r3
 800548e:	4770      	bx	lr
