
CarDisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f70  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00012ab8  080060fc  080060fc  000160fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018bb4  08018bb4  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  08018bb4  08018bb4  00028bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018bbc  08018bbc  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018bbc  08018bbc  00028bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018bc0  08018bc0  00028bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08018bc4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000080  08018c44  00030080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08018c44  000302b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014be9  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002941  00000000  00000000  00044c99  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012a8  00000000  00000000  000475e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010f8  00000000  00000000  00048888  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000232f4  00000000  00000000  00049980  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e391  00000000  00000000  0006cc74  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce48d  00000000  00000000  0007b005  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00149492  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005244  00000000  00000000  00149510  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000080 	.word	0x20000080
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080060e4 	.word	0x080060e4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000084 	.word	0x20000084
 80001c8:	080060e4 	.word	0x080060e4

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f001 f838 	bl	8001546 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 fa21 	bl	800091c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 fb8f 	bl	8000bfc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004de:	f000 fb5d 	bl	8000b9c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80004e2:	f000 fb2b 	bl	8000b3c <MX_USART1_UART_Init>
  MX_SPI3_Init();
 80004e6:	f000 fa9d 	bl	8000a24 <MX_SPI3_Init>
  MX_TIM2_Init();
 80004ea:	f000 fad9 	bl	8000aa0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	devState.switchActv = 0;
 80004ee:	4bb3      	ldr	r3, [pc, #716]	; (80007bc <main+0x2f0>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	705a      	strb	r2, [r3, #1]

#ifdef DISP_ACTIVE
	DISP_Init(VERTICAL);
 80004f4:	2001      	movs	r0, #1
 80004f6:	f004 fbf5 	bl	8004ce4 <DISP_Init>
	DISP_NewImage(DISP_WIDTH, DISP_HEIGHT, 0, BLACK);
 80004fa:	2300      	movs	r3, #0
 80004fc:	2200      	movs	r2, #0
 80004fe:	21f0      	movs	r1, #240	; 0xf0
 8000500:	20f0      	movs	r0, #240	; 0xf0
 8000502:	f004 fcb5 	bl	8004e70 <DISP_NewImage>
	logoScreenDisplay();
 8000506:	f000 fc5b 	bl	8000dc0 <logoScreenDisplay>

	// Waiting for pressing the switch
	while(HAL_GPIO_ReadPin(D6_SWITCH_PIN));
 800050a:	bf00      	nop
 800050c:	2102      	movs	r1, #2
 800050e:	48ac      	ldr	r0, [pc, #688]	; (80007c0 <main+0x2f4>)
 8000510:	f001 fb28 	bl	8001b64 <HAL_GPIO_ReadPin>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d1f8      	bne.n	800050c <main+0x40>
	HAL_Delay(100);
 800051a:	2064      	movs	r0, #100	; 0x64
 800051c:	f001 f884 	bl	8001628 <HAL_Delay>

	paramScreenDisplay();
 8000520:	f000 fc84 	bl	8000e2c <paramScreenDisplay>
	//gearboxScreenDisplay();

	ecuVal.IAT = 40;
 8000524:	4ba7      	ldr	r3, [pc, #668]	; (80007c4 <main+0x2f8>)
 8000526:	2228      	movs	r2, #40	; 0x28
 8000528:	709a      	strb	r2, [r3, #2]
	ecuVal.batt_v = 12.6;
 800052a:	4ba6      	ldr	r3, [pc, #664]	; (80007c4 <main+0x2f8>)
 800052c:	4aa6      	ldr	r2, [pc, #664]	; (80007c8 <main+0x2fc>)
 800052e:	605a      	str	r2, [r3, #4]
	ecuVal.oil_bar = 3.5;
 8000530:	4ba4      	ldr	r3, [pc, #656]	; (80007c4 <main+0x2f8>)
 8000532:	4aa6      	ldr	r2, [pc, #664]	; (80007cc <main+0x300>)
 8000534:	609a      	str	r2, [r3, #8]
	ecuVal.oil_temp = 90;
 8000536:	4ba3      	ldr	r3, [pc, #652]	; (80007c4 <main+0x2f8>)
 8000538:	225a      	movs	r2, #90	; 0x5a
 800053a:	731a      	strb	r2, [r3, #12]
	ecuVal.CLT = 90;
 800053c:	4ba1      	ldr	r3, [pc, #644]	; (80007c4 <main+0x2f8>)
 800053e:	225a      	movs	r2, #90	; 0x5a
 8000540:	81da      	strh	r2, [r3, #14]
	ecuVal.lambda = 12.6;
 8000542:	4ba0      	ldr	r3, [pc, #640]	; (80007c4 <main+0x2f8>)
 8000544:	4aa0      	ldr	r2, [pc, #640]	; (80007c8 <main+0x2fc>)
 8000546:	611a      	str	r2, [r3, #16]

	vehicleVal.actGear = 3;
 8000548:	4ba1      	ldr	r3, [pc, #644]	; (80007d0 <main+0x304>)
 800054a:	2203      	movs	r2, #3
 800054c:	761a      	strb	r2, [r3, #24]

	vehicleVal.gearRatio[0] = 1;
 800054e:	4ba0      	ldr	r3, [pc, #640]	; (80007d0 <main+0x304>)
 8000550:	2201      	movs	r2, #1
 8000552:	801a      	strh	r2, [r3, #0]
	vehicleVal.gearRatio[1] = 442;
 8000554:	4b9e      	ldr	r3, [pc, #632]	; (80007d0 <main+0x304>)
 8000556:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
 800055a:	805a      	strh	r2, [r3, #2]
	vehicleVal.gearRatio[2] = 230;
 800055c:	4b9c      	ldr	r3, [pc, #624]	; (80007d0 <main+0x304>)
 800055e:	22e6      	movs	r2, #230	; 0xe6
 8000560:	809a      	strh	r2, [r3, #4]
	vehicleVal.gearRatio[3] = 167;
 8000562:	4b9b      	ldr	r3, [pc, #620]	; (80007d0 <main+0x304>)
 8000564:	22a7      	movs	r2, #167	; 0xa7
 8000566:	80da      	strh	r2, [r3, #6]
	vehicleVal.gearRatio[4] = 119;
 8000568:	4b99      	ldr	r3, [pc, #612]	; (80007d0 <main+0x304>)
 800056a:	2277      	movs	r2, #119	; 0x77
 800056c:	811a      	strh	r2, [r3, #8]
	vehicleVal.gearRatio[5] = 100;
 800056e:	4b98      	ldr	r3, [pc, #608]	; (80007d0 <main+0x304>)
 8000570:	2264      	movs	r2, #100	; 0x64
 8000572:	815a      	strh	r2, [r3, #10]

	vehicleVal.revGear[1] = 5000;
 8000574:	4b96      	ldr	r3, [pc, #600]	; (80007d0 <main+0x304>)
 8000576:	f241 3288 	movw	r2, #5000	; 0x1388
 800057a:	81da      	strh	r2, [r3, #14]
	for(int i = 2; i <= 5 ; i++) {
 800057c:	2302      	movs	r3, #2
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	e01f      	b.n	80005c2 <main+0xf6>
		vehicleVal.revGear[i] = vehicleVal.revGear[i-1] * vehicleVal.gearRatio[i] / vehicleVal.gearRatio[i-1];
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	3b01      	subs	r3, #1
 8000586:	4a92      	ldr	r2, [pc, #584]	; (80007d0 <main+0x304>)
 8000588:	3304      	adds	r3, #4
 800058a:	005b      	lsls	r3, r3, #1
 800058c:	4413      	add	r3, r2
 800058e:	889b      	ldrh	r3, [r3, #4]
 8000590:	4619      	mov	r1, r3
 8000592:	4a8f      	ldr	r2, [pc, #572]	; (80007d0 <main+0x304>)
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800059a:	fb03 f301 	mul.w	r3, r3, r1
 800059e:	68fa      	ldr	r2, [r7, #12]
 80005a0:	3a01      	subs	r2, #1
 80005a2:	498b      	ldr	r1, [pc, #556]	; (80007d0 <main+0x304>)
 80005a4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80005a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80005ac:	b299      	uxth	r1, r3
 80005ae:	4a88      	ldr	r2, [pc, #544]	; (80007d0 <main+0x304>)
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	3304      	adds	r3, #4
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	4413      	add	r3, r2
 80005b8:	460a      	mov	r2, r1
 80005ba:	809a      	strh	r2, [r3, #4]
	for(int i = 2; i <= 5 ; i++) {
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	3301      	adds	r3, #1
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	2b05      	cmp	r3, #5
 80005c6:	dddc      	ble.n	8000582 <main+0xb6>
	}
#endif

	__HAL_RCC_TIM2_CLK_ENABLE();
 80005c8:	4b82      	ldr	r3, [pc, #520]	; (80007d4 <main+0x308>)
 80005ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005cc:	4a81      	ldr	r2, [pc, #516]	; (80007d4 <main+0x308>)
 80005ce:	f043 0301 	orr.w	r3, r3, #1
 80005d2:	6593      	str	r3, [r2, #88]	; 0x58
 80005d4:	4b7f      	ldr	r3, [pc, #508]	; (80007d4 <main+0x308>)
 80005d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005d8:	f003 0301 	and.w	r3, r3, #1
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80005e0:	201c      	movs	r0, #28
 80005e2:	f001 f93a 	bl	800185a <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim2);
 80005e6:	487c      	ldr	r0, [pc, #496]	; (80007d8 <main+0x30c>)
 80005e8:	f002 ffc6 	bl	8003578 <HAL_TIM_Base_Start_IT>
	vehicleVal.speedSensCnt = 0;
 80005ec:	4b78      	ldr	r3, [pc, #480]	; (80007d0 <main+0x304>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	835a      	strh	r2, [r3, #26]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

#ifdef DISP_ACTIVE
	if(devState.switchActv) {
 80005f2:	4b72      	ldr	r3, [pc, #456]	; (80007bc <main+0x2f0>)
 80005f4:	785b      	ldrb	r3, [r3, #1]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	f000 8169 	beq.w	80008ce <main+0x402>
		if(devState.screenNo == PARAM) {
 80005fc:	4b6f      	ldr	r3, [pc, #444]	; (80007bc <main+0x2f0>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b01      	cmp	r3, #1
 8000602:	f040 8093 	bne.w	800072c <main+0x260>
			DISP_DrawNum(105, 15, (int32_t)ecuVal.CLT, &Font24, BRRED, BLACK);
 8000606:	4b6f      	ldr	r3, [pc, #444]	; (80007c4 <main+0x2f8>)
 8000608:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800060c:	461a      	mov	r2, r3
 800060e:	2300      	movs	r3, #0
 8000610:	9301      	str	r3, [sp, #4]
 8000612:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	4b70      	ldr	r3, [pc, #448]	; (80007dc <main+0x310>)
 800061a:	210f      	movs	r1, #15
 800061c:	2069      	movs	r0, #105	; 0x69
 800061e:	f004 ff61 	bl	80054e4 <DISP_DrawNum>
			DISP_DrawNum(40, 70, (int32_t)ecuVal.oil_temp, &Font24, BRRED, BLACK);
 8000622:	4b68      	ldr	r3, [pc, #416]	; (80007c4 <main+0x2f8>)
 8000624:	7b1b      	ldrb	r3, [r3, #12]
 8000626:	461a      	mov	r2, r3
 8000628:	2300      	movs	r3, #0
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	4b6a      	ldr	r3, [pc, #424]	; (80007dc <main+0x310>)
 8000634:	2146      	movs	r1, #70	; 0x46
 8000636:	2028      	movs	r0, #40	; 0x28
 8000638:	f004 ff54 	bl	80054e4 <DISP_DrawNum>
			DISP_DrawNum(160, 70, (int32_t)ecuVal.oil_bar, &Font24, BRRED, BLACK);
 800063c:	4b61      	ldr	r3, [pc, #388]	; (80007c4 <main+0x2f8>)
 800063e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000642:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000646:	2300      	movs	r3, #0
 8000648:	9301      	str	r3, [sp, #4]
 800064a:	f64f 4307 	movw	r3, #64519	; 0xfc07
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	4b62      	ldr	r3, [pc, #392]	; (80007dc <main+0x310>)
 8000652:	ee17 2a90 	vmov	r2, s15
 8000656:	2146      	movs	r1, #70	; 0x46
 8000658:	20a0      	movs	r0, #160	; 0xa0
 800065a:	f004 ff43 	bl	80054e4 <DISP_DrawNum>
			DISP_DrawNum(40, 130, (int32_t)ecuVal.batt_v, &Font24, BRRED, BLACK);
 800065e:	4b59      	ldr	r3, [pc, #356]	; (80007c4 <main+0x2f8>)
 8000660:	edd3 7a01 	vldr	s15, [r3, #4]
 8000664:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000668:	2300      	movs	r3, #0
 800066a:	9301      	str	r3, [sp, #4]
 800066c:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	4b5a      	ldr	r3, [pc, #360]	; (80007dc <main+0x310>)
 8000674:	ee17 2a90 	vmov	r2, s15
 8000678:	2182      	movs	r1, #130	; 0x82
 800067a:	2028      	movs	r0, #40	; 0x28
 800067c:	f004 ff32 	bl	80054e4 <DISP_DrawNum>
			DISP_DrawNum(160, 130, (int32_t)ecuVal.lambda, &Font24, BRRED, BLACK);
 8000680:	4b50      	ldr	r3, [pc, #320]	; (80007c4 <main+0x2f8>)
 8000682:	edd3 7a04 	vldr	s15, [r3, #16]
 8000686:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800068a:	2300      	movs	r3, #0
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	4b51      	ldr	r3, [pc, #324]	; (80007dc <main+0x310>)
 8000696:	ee17 2a90 	vmov	r2, s15
 800069a:	2182      	movs	r1, #130	; 0x82
 800069c:	20a0      	movs	r0, #160	; 0xa0
 800069e:	f004 ff21 	bl	80054e4 <DISP_DrawNum>
			DISP_DrawNum(105, 207, (int32_t)ecuVal.IAT, &Font24, BRRED, BLACK);
 80006a2:	4b48      	ldr	r3, [pc, #288]	; (80007c4 <main+0x2f8>)
 80006a4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80006a8:	461a      	mov	r2, r3
 80006aa:	2300      	movs	r3, #0
 80006ac:	9301      	str	r3, [sp, #4]
 80006ae:	f64f 4307 	movw	r3, #64519	; 0xfc07
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	4b49      	ldr	r3, [pc, #292]	; (80007dc <main+0x310>)
 80006b6:	21cf      	movs	r1, #207	; 0xcf
 80006b8:	2069      	movs	r0, #105	; 0x69
 80006ba:	f004 ff13 	bl	80054e4 <DISP_DrawNum>
			ecuVal.oil_bar++;
 80006be:	4b41      	ldr	r3, [pc, #260]	; (80007c4 <main+0x2f8>)
 80006c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80006c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80006c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80006cc:	4b3d      	ldr	r3, [pc, #244]	; (80007c4 <main+0x2f8>)
 80006ce:	edc3 7a02 	vstr	s15, [r3, #8]
			ecuVal.oil_temp++;
 80006d2:	4b3c      	ldr	r3, [pc, #240]	; (80007c4 <main+0x2f8>)
 80006d4:	7b1b      	ldrb	r3, [r3, #12]
 80006d6:	3301      	adds	r3, #1
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4b3a      	ldr	r3, [pc, #232]	; (80007c4 <main+0x2f8>)
 80006dc:	731a      	strb	r2, [r3, #12]
			ecuVal.batt_v++;
 80006de:	4b39      	ldr	r3, [pc, #228]	; (80007c4 <main+0x2f8>)
 80006e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80006e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80006e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80006ec:	4b35      	ldr	r3, [pc, #212]	; (80007c4 <main+0x2f8>)
 80006ee:	edc3 7a01 	vstr	s15, [r3, #4]
			ecuVal.lambda++;
 80006f2:	4b34      	ldr	r3, [pc, #208]	; (80007c4 <main+0x2f8>)
 80006f4:	edd3 7a04 	vldr	s15, [r3, #16]
 80006f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80006fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000700:	4b30      	ldr	r3, [pc, #192]	; (80007c4 <main+0x2f8>)
 8000702:	edc3 7a04 	vstr	s15, [r3, #16]
			ecuVal.CLT++;
 8000706:	4b2f      	ldr	r3, [pc, #188]	; (80007c4 <main+0x2f8>)
 8000708:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800070c:	b29b      	uxth	r3, r3
 800070e:	3301      	adds	r3, #1
 8000710:	b29b      	uxth	r3, r3
 8000712:	b21a      	sxth	r2, r3
 8000714:	4b2b      	ldr	r3, [pc, #172]	; (80007c4 <main+0x2f8>)
 8000716:	81da      	strh	r2, [r3, #14]
			ecuVal.IAT++;
 8000718:	4b2a      	ldr	r3, [pc, #168]	; (80007c4 <main+0x2f8>)
 800071a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800071e:	b2db      	uxtb	r3, r3
 8000720:	3301      	adds	r3, #1
 8000722:	b2db      	uxtb	r3, r3
 8000724:	b25a      	sxtb	r2, r3
 8000726:	4b27      	ldr	r3, [pc, #156]	; (80007c4 <main+0x2f8>)
 8000728:	709a      	strb	r2, [r3, #2]
 800072a:	e0bb      	b.n	80008a4 <main+0x3d8>
		} else if(devState.screenNo == GEARBOX) {
 800072c:	4b23      	ldr	r3, [pc, #140]	; (80007bc <main+0x2f0>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b02      	cmp	r3, #2
 8000732:	f040 80b7 	bne.w	80008a4 <main+0x3d8>
			DISP_DrawNum(60, 18, (int32_t)vehicleVal.actSpeed, &Font24, BLACK, BRRED);
 8000736:	4b26      	ldr	r3, [pc, #152]	; (80007d0 <main+0x304>)
 8000738:	8b9b      	ldrh	r3, [r3, #28]
 800073a:	461a      	mov	r2, r3
 800073c:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000740:	9301      	str	r3, [sp, #4]
 8000742:	2300      	movs	r3, #0
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	4b25      	ldr	r3, [pc, #148]	; (80007dc <main+0x310>)
 8000748:	2112      	movs	r1, #18
 800074a:	203c      	movs	r0, #60	; 0x3c
 800074c:	f004 feca 	bl	80054e4 <DISP_DrawNum>
			DISP_DrawNum(60, 43, (int32_t)vehicleVal.fuelCons, &Font24, BLACK, BRRED);
 8000750:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <main+0x304>)
 8000752:	edd3 7a08 	vldr	s15, [r3, #32]
 8000756:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800075a:	f64f 4307 	movw	r3, #64519	; 0xfc07
 800075e:	9301      	str	r3, [sp, #4]
 8000760:	2300      	movs	r3, #0
 8000762:	9300      	str	r3, [sp, #0]
 8000764:	4b1d      	ldr	r3, [pc, #116]	; (80007dc <main+0x310>)
 8000766:	ee17 2a90 	vmov	r2, s15
 800076a:	212b      	movs	r1, #43	; 0x2b
 800076c:	203c      	movs	r0, #60	; 0x3c
 800076e:	f004 feb9 	bl	80054e4 <DISP_DrawNum>
			DISP_DrawNum(130, 90,  vehicleVal.revGear[1], &Font24, ((vehicleVal.actGear == 1) ? BRRED : BLACK), ((vehicleVal.actGear == 1) ? BLACK : BRRED));
 8000772:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <main+0x304>)
 8000774:	89db      	ldrh	r3, [r3, #14]
 8000776:	4619      	mov	r1, r3
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <main+0x304>)
 800077a:	7e1b      	ldrb	r3, [r3, #24]
 800077c:	2b01      	cmp	r3, #1
 800077e:	d102      	bne.n	8000786 <main+0x2ba>
 8000780:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000784:	e000      	b.n	8000788 <main+0x2bc>
 8000786:	2300      	movs	r3, #0
 8000788:	4a11      	ldr	r2, [pc, #68]	; (80007d0 <main+0x304>)
 800078a:	7e12      	ldrb	r2, [r2, #24]
 800078c:	2a01      	cmp	r2, #1
 800078e:	d101      	bne.n	8000794 <main+0x2c8>
 8000790:	2200      	movs	r2, #0
 8000792:	e001      	b.n	8000798 <main+0x2cc>
 8000794:	f64f 4207 	movw	r2, #64519	; 0xfc07
 8000798:	9201      	str	r2, [sp, #4]
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <main+0x310>)
 800079e:	460a      	mov	r2, r1
 80007a0:	215a      	movs	r1, #90	; 0x5a
 80007a2:	2082      	movs	r0, #130	; 0x82
 80007a4:	f004 fe9e 	bl	80054e4 <DISP_DrawNum>
			DISP_DrawNum(130, 115, vehicleVal.revGear[2], &Font24, ((vehicleVal.actGear == 2) ? BRRED : BLACK), ((vehicleVal.actGear == 2) ? BLACK : BRRED));
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <main+0x304>)
 80007aa:	8a1b      	ldrh	r3, [r3, #16]
 80007ac:	4619      	mov	r1, r3
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <main+0x304>)
 80007b0:	7e1b      	ldrb	r3, [r3, #24]
 80007b2:	2b02      	cmp	r3, #2
 80007b4:	d114      	bne.n	80007e0 <main+0x314>
 80007b6:	f64f 4307 	movw	r3, #64519	; 0xfc07
 80007ba:	e012      	b.n	80007e2 <main+0x316>
 80007bc:	20000284 	.word	0x20000284
 80007c0:	48000400 	.word	0x48000400
 80007c4:	200001b0 	.word	0x200001b0
 80007c8:	4149999a 	.word	0x4149999a
 80007cc:	40600000 	.word	0x40600000
 80007d0:	200000a8 	.word	0x200000a8
 80007d4:	40021000 	.word	0x40021000
 80007d8:	200001c4 	.word	0x200001c4
 80007dc:	20000014 	.word	0x20000014
 80007e0:	2300      	movs	r3, #0
 80007e2:	4a47      	ldr	r2, [pc, #284]	; (8000900 <main+0x434>)
 80007e4:	7e12      	ldrb	r2, [r2, #24]
 80007e6:	2a02      	cmp	r2, #2
 80007e8:	d101      	bne.n	80007ee <main+0x322>
 80007ea:	2200      	movs	r2, #0
 80007ec:	e001      	b.n	80007f2 <main+0x326>
 80007ee:	f64f 4207 	movw	r2, #64519	; 0xfc07
 80007f2:	9201      	str	r2, [sp, #4]
 80007f4:	9300      	str	r3, [sp, #0]
 80007f6:	4b43      	ldr	r3, [pc, #268]	; (8000904 <main+0x438>)
 80007f8:	460a      	mov	r2, r1
 80007fa:	2173      	movs	r1, #115	; 0x73
 80007fc:	2082      	movs	r0, #130	; 0x82
 80007fe:	f004 fe71 	bl	80054e4 <DISP_DrawNum>
			DISP_DrawNum(130, 140, vehicleVal.revGear[3], &Font24, ((vehicleVal.actGear == 3) ? BRRED : BLACK), ((vehicleVal.actGear == 3) ? BLACK : BRRED));
 8000802:	4b3f      	ldr	r3, [pc, #252]	; (8000900 <main+0x434>)
 8000804:	8a5b      	ldrh	r3, [r3, #18]
 8000806:	4619      	mov	r1, r3
 8000808:	4b3d      	ldr	r3, [pc, #244]	; (8000900 <main+0x434>)
 800080a:	7e1b      	ldrb	r3, [r3, #24]
 800080c:	2b03      	cmp	r3, #3
 800080e:	d102      	bne.n	8000816 <main+0x34a>
 8000810:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000814:	e000      	b.n	8000818 <main+0x34c>
 8000816:	2300      	movs	r3, #0
 8000818:	4a39      	ldr	r2, [pc, #228]	; (8000900 <main+0x434>)
 800081a:	7e12      	ldrb	r2, [r2, #24]
 800081c:	2a03      	cmp	r2, #3
 800081e:	d101      	bne.n	8000824 <main+0x358>
 8000820:	2200      	movs	r2, #0
 8000822:	e001      	b.n	8000828 <main+0x35c>
 8000824:	f64f 4207 	movw	r2, #64519	; 0xfc07
 8000828:	9201      	str	r2, [sp, #4]
 800082a:	9300      	str	r3, [sp, #0]
 800082c:	4b35      	ldr	r3, [pc, #212]	; (8000904 <main+0x438>)
 800082e:	460a      	mov	r2, r1
 8000830:	218c      	movs	r1, #140	; 0x8c
 8000832:	2082      	movs	r0, #130	; 0x82
 8000834:	f004 fe56 	bl	80054e4 <DISP_DrawNum>
			DISP_DrawNum(130, 165, vehicleVal.revGear[4], &Font24, ((vehicleVal.actGear == 4) ? BRRED : BLACK), ((vehicleVal.actGear == 4) ? BLACK : BRRED));
 8000838:	4b31      	ldr	r3, [pc, #196]	; (8000900 <main+0x434>)
 800083a:	8a9b      	ldrh	r3, [r3, #20]
 800083c:	4619      	mov	r1, r3
 800083e:	4b30      	ldr	r3, [pc, #192]	; (8000900 <main+0x434>)
 8000840:	7e1b      	ldrb	r3, [r3, #24]
 8000842:	2b04      	cmp	r3, #4
 8000844:	d102      	bne.n	800084c <main+0x380>
 8000846:	f64f 4307 	movw	r3, #64519	; 0xfc07
 800084a:	e000      	b.n	800084e <main+0x382>
 800084c:	2300      	movs	r3, #0
 800084e:	4a2c      	ldr	r2, [pc, #176]	; (8000900 <main+0x434>)
 8000850:	7e12      	ldrb	r2, [r2, #24]
 8000852:	2a04      	cmp	r2, #4
 8000854:	d101      	bne.n	800085a <main+0x38e>
 8000856:	2200      	movs	r2, #0
 8000858:	e001      	b.n	800085e <main+0x392>
 800085a:	f64f 4207 	movw	r2, #64519	; 0xfc07
 800085e:	9201      	str	r2, [sp, #4]
 8000860:	9300      	str	r3, [sp, #0]
 8000862:	4b28      	ldr	r3, [pc, #160]	; (8000904 <main+0x438>)
 8000864:	460a      	mov	r2, r1
 8000866:	21a5      	movs	r1, #165	; 0xa5
 8000868:	2082      	movs	r0, #130	; 0x82
 800086a:	f004 fe3b 	bl	80054e4 <DISP_DrawNum>
			DISP_DrawNum(130, 190, vehicleVal.revGear[5], &Font24, ((vehicleVal.actGear == 5) ? BRRED : BLACK), ((vehicleVal.actGear == 5) ? BLACK : BRRED));
 800086e:	4b24      	ldr	r3, [pc, #144]	; (8000900 <main+0x434>)
 8000870:	8adb      	ldrh	r3, [r3, #22]
 8000872:	4619      	mov	r1, r3
 8000874:	4b22      	ldr	r3, [pc, #136]	; (8000900 <main+0x434>)
 8000876:	7e1b      	ldrb	r3, [r3, #24]
 8000878:	2b05      	cmp	r3, #5
 800087a:	d102      	bne.n	8000882 <main+0x3b6>
 800087c:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000880:	e000      	b.n	8000884 <main+0x3b8>
 8000882:	2300      	movs	r3, #0
 8000884:	4a1e      	ldr	r2, [pc, #120]	; (8000900 <main+0x434>)
 8000886:	7e12      	ldrb	r2, [r2, #24]
 8000888:	2a05      	cmp	r2, #5
 800088a:	d101      	bne.n	8000890 <main+0x3c4>
 800088c:	2200      	movs	r2, #0
 800088e:	e001      	b.n	8000894 <main+0x3c8>
 8000890:	f64f 4207 	movw	r2, #64519	; 0xfc07
 8000894:	9201      	str	r2, [sp, #4]
 8000896:	9300      	str	r3, [sp, #0]
 8000898:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <main+0x438>)
 800089a:	460a      	mov	r2, r1
 800089c:	21be      	movs	r1, #190	; 0xbe
 800089e:	2082      	movs	r0, #130	; 0x82
 80008a0:	f004 fe20 	bl	80054e4 <DISP_DrawNum>
		}

		HAL_UART_Transmit(&huart2, "\nCnt ", 5, 100);
 80008a4:	2364      	movs	r3, #100	; 0x64
 80008a6:	2205      	movs	r2, #5
 80008a8:	4917      	ldr	r1, [pc, #92]	; (8000908 <main+0x43c>)
 80008aa:	4818      	ldr	r0, [pc, #96]	; (800090c <main+0x440>)
 80008ac:	f003 fa5e 	bl	8003d6c <HAL_UART_Transmit>
		char b[4];
		itoa(vehicleVal.actSpeed, b, 10);
 80008b0:	4b13      	ldr	r3, [pc, #76]	; (8000900 <main+0x434>)
 80008b2:	8b9b      	ldrh	r3, [r3, #28]
 80008b4:	4618      	mov	r0, r3
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	220a      	movs	r2, #10
 80008ba:	4619      	mov	r1, r3
 80008bc:	f004 ff62 	bl	8005784 <itoa>
		HAL_UART_Transmit(&huart2, b, 4, 100);
 80008c0:	1d39      	adds	r1, r7, #4
 80008c2:	2364      	movs	r3, #100	; 0x64
 80008c4:	2204      	movs	r2, #4
 80008c6:	4811      	ldr	r0, [pc, #68]	; (800090c <main+0x440>)
 80008c8:	f003 fa50 	bl	8003d6c <HAL_UART_Transmit>
 80008cc:	e00c      	b.n	80008e8 <main+0x41c>

	} else {
		if(devState.screenNo == CHANGE_TO_PARAM) {
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <main+0x444>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b03      	cmp	r3, #3
 80008d4:	d102      	bne.n	80008dc <main+0x410>
			paramScreenDisplay();
 80008d6:	f000 faa9 	bl	8000e2c <paramScreenDisplay>
 80008da:	e005      	b.n	80008e8 <main+0x41c>
		} else if(devState.screenNo == CHANGE_TO_GEARBOX) {
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <main+0x444>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b04      	cmp	r3, #4
 80008e2:	d101      	bne.n	80008e8 <main+0x41c>
			gearboxScreenDisplay();
 80008e4:	f000 fb44 	bl	8000f70 <gearboxScreenDisplay>
//	uint32_t timerValue = __HAL_TIM_GET_COUNTER(&htim2);
//	HAL_UART_Transmit(&huart2, "\ntim2: ", 7, 100);
//	uint8_t b[4];
//	itoa(timerValue, b, 10);
//	HAL_UART_Transmit(&huart2, b, 4, 100);
	HAL_UART_Transmit(&huart1, "123aaa", 5, 100);
 80008e8:	2364      	movs	r3, #100	; 0x64
 80008ea:	2205      	movs	r2, #5
 80008ec:	4909      	ldr	r1, [pc, #36]	; (8000914 <main+0x448>)
 80008ee:	480a      	ldr	r0, [pc, #40]	; (8000918 <main+0x44c>)
 80008f0:	f003 fa3c 	bl	8003d6c <HAL_UART_Transmit>
	HAL_Delay(800);
 80008f4:	f44f 7048 	mov.w	r0, #800	; 0x320
 80008f8:	f000 fe96 	bl	8001628 <HAL_Delay>
	if(devState.switchActv) {
 80008fc:	e679      	b.n	80005f2 <main+0x126>
 80008fe:	bf00      	nop
 8000900:	200000a8 	.word	0x200000a8
 8000904:	20000014 	.word	0x20000014
 8000908:	080060fc 	.word	0x080060fc
 800090c:	20000204 	.word	0x20000204
 8000910:	20000284 	.word	0x20000284
 8000914:	08006104 	.word	0x08006104
 8000918:	20000130 	.word	0x20000130

0800091c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b0ac      	sub	sp, #176	; 0xb0
 8000920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000922:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000926:	2244      	movs	r2, #68	; 0x44
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f004 ff2c 	bl	8005788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000930:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2254      	movs	r2, #84	; 0x54
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f004 ff1e 	bl	8005788 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800094c:	f001 f952 	bl	8001bf4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000950:	4b33      	ldr	r3, [pc, #204]	; (8000a20 <SystemClock_Config+0x104>)
 8000952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000956:	4a32      	ldr	r2, [pc, #200]	; (8000a20 <SystemClock_Config+0x104>)
 8000958:	f023 0318 	bic.w	r3, r3, #24
 800095c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000960:	2314      	movs	r3, #20
 8000962:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000964:	2301      	movs	r3, #1
 8000966:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000968:	2301      	movs	r3, #1
 800096a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000974:	2360      	movs	r3, #96	; 0x60
 8000976:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097a:	2302      	movs	r3, #2
 800097c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000980:	2301      	movs	r3, #1
 8000982:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000986:	2301      	movs	r3, #1
 8000988:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 800098c:	2310      	movs	r3, #16
 800098e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000992:	2307      	movs	r3, #7
 8000994:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000998:	2302      	movs	r3, #2
 800099a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800099e:	2302      	movs	r3, #2
 80009a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009a8:	4618      	mov	r0, r3
 80009aa:	f001 f997 	bl	8001cdc <HAL_RCC_OscConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80009b4:	f000 fb7e 	bl	80010b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b8:	230f      	movs	r3, #15
 80009ba:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009bc:	2303      	movs	r3, #3
 80009be:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009d0:	2101      	movs	r1, #1
 80009d2:	4618      	mov	r0, r3
 80009d4:	f001 fda2 	bl	800251c <HAL_RCC_ClockConfig>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80009de:	f000 fb69 	bl	80010b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80009e2:	2303      	movs	r3, #3
 80009e4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009ea:	2300      	movs	r3, #0
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	4618      	mov	r0, r3
 80009f2:	f001 ff97 	bl	8002924 <HAL_RCCEx_PeriphCLKConfig>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80009fc:	f000 fb5a 	bl	80010b4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a00:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a04:	f001 f914 	bl	8001c30 <HAL_PWREx_ControlVoltageScaling>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000a0e:	f000 fb51 	bl	80010b4 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000a12:	f002 f979 	bl	8002d08 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000a16:	bf00      	nop
 8000a18:	37b0      	adds	r7, #176	; 0xb0
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40021000 	.word	0x40021000

08000a24 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a28:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <MX_SPI3_Init+0x74>)
 8000a2a:	4a1c      	ldr	r2, [pc, #112]	; (8000a9c <MX_SPI3_Init+0x78>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a2e:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <MX_SPI3_Init+0x74>)
 8000a30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a34:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a36:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <MX_SPI3_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a3c:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <MX_SPI3_Init+0x74>)
 8000a3e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a42:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a44:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_SPI3_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a4a:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <MX_SPI3_Init+0x74>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a50:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_SPI3_Init+0x74>)
 8000a52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a56:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_SPI3_Init+0x74>)
 8000a5a:	2210      	movs	r2, #16
 8000a5c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_SPI3_Init+0x74>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_SPI3_Init+0x74>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MX_SPI3_Init+0x74>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_SPI3_Init+0x74>)
 8000a72:	2207      	movs	r2, #7
 8000a74:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <MX_SPI3_Init+0x74>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_SPI3_Init+0x74>)
 8000a7e:	2208      	movs	r2, #8
 8000a80:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_SPI3_Init+0x74>)
 8000a84:	f002 fa40 	bl	8002f08 <HAL_SPI_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000a8e:	f000 fb11 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200000cc 	.word	0x200000cc
 8000a9c:	40003c00 	.word	0x40003c00

08000aa0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b088      	sub	sp, #32
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aa6:	f107 0310 	add.w	r3, r7, #16
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000abe:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <MX_TIM2_Init+0x98>)
 8000ac0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ac4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 8000ac6:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <MX_TIM2_Init+0x98>)
 8000ac8:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000acc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ace:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <MX_TIM2_Init+0x98>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000ad4:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <MX_TIM2_Init+0x98>)
 8000ad6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ada:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000adc:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <MX_TIM2_Init+0x98>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <MX_TIM2_Init+0x98>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ae8:	4813      	ldr	r0, [pc, #76]	; (8000b38 <MX_TIM2_Init+0x98>)
 8000aea:	f002 fd1a 	bl	8003522 <HAL_TIM_Base_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000af4:	f000 fade 	bl	80010b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000afc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000afe:	f107 0310 	add.w	r3, r7, #16
 8000b02:	4619      	mov	r1, r3
 8000b04:	480c      	ldr	r0, [pc, #48]	; (8000b38 <MX_TIM2_Init+0x98>)
 8000b06:	f002 fe80 	bl	800380a <HAL_TIM_ConfigClockSource>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000b10:	f000 fad0 	bl	80010b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b14:	2300      	movs	r3, #0
 8000b16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_TIM2_Init+0x98>)
 8000b22:	f003 f851 	bl	8003bc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000b2c:	f000 fac2 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b30:	bf00      	nop
 8000b32:	3720      	adds	r7, #32
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	200001c4 	.word	0x200001c4

08000b3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b40:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <MX_USART1_UART_Init+0x58>)
 8000b42:	4a15      	ldr	r2, [pc, #84]	; (8000b98 <MX_USART1_UART_Init+0x5c>)
 8000b44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <MX_USART1_UART_Init+0x58>)
 8000b48:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_USART1_UART_Init+0x58>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <MX_USART1_UART_Init+0x58>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <MX_USART1_UART_Init+0x58>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <MX_USART1_UART_Init+0x58>)
 8000b62:	220c      	movs	r2, #12
 8000b64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <MX_USART1_UART_Init+0x58>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b6c:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <MX_USART1_UART_Init+0x58>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <MX_USART1_UART_Init+0x58>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <MX_USART1_UART_Init+0x58>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b7e:	4805      	ldr	r0, [pc, #20]	; (8000b94 <MX_USART1_UART_Init+0x58>)
 8000b80:	f003 f8a6 	bl	8003cd0 <HAL_UART_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b8a:	f000 fa93 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000130 	.word	0x20000130
 8000b98:	40013800 	.word	0x40013800

08000b9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ba0:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000ba2:	4a15      	ldr	r2, [pc, #84]	; (8000bf8 <MX_USART2_UART_Init+0x5c>)
 8000ba4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ba6:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000ba8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000bac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bcc:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bde:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000be0:	f003 f876 	bl	8003cd0 <HAL_UART_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bea:	f000 fa63 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000204 	.word	0x20000204
 8000bf8:	40004400 	.word	0x40004400

08000bfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b088      	sub	sp, #32
 8000c00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c02:	f107 030c 	add.w	r3, r7, #12
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
 8000c10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c12:	4b3e      	ldr	r3, [pc, #248]	; (8000d0c <MX_GPIO_Init+0x110>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c16:	4a3d      	ldr	r2, [pc, #244]	; (8000d0c <MX_GPIO_Init+0x110>)
 8000c18:	f043 0304 	orr.w	r3, r3, #4
 8000c1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1e:	4b3b      	ldr	r3, [pc, #236]	; (8000d0c <MX_GPIO_Init+0x110>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c22:	f003 0304 	and.w	r3, r3, #4
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	4b38      	ldr	r3, [pc, #224]	; (8000d0c <MX_GPIO_Init+0x110>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	4a37      	ldr	r2, [pc, #220]	; (8000d0c <MX_GPIO_Init+0x110>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c36:	4b35      	ldr	r3, [pc, #212]	; (8000d0c <MX_GPIO_Init+0x110>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c42:	4b32      	ldr	r3, [pc, #200]	; (8000d0c <MX_GPIO_Init+0x110>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c46:	4a31      	ldr	r2, [pc, #196]	; (8000d0c <MX_GPIO_Init+0x110>)
 8000c48:	f043 0302 	orr.w	r3, r3, #2
 8000c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c4e:	4b2f      	ldr	r3, [pc, #188]	; (8000d0c <MX_GPIO_Init+0x110>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c52:	f003 0302 	and.w	r3, r3, #2
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A3_DISP_CS_Pin|D2_DISP_BL_Pin, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f241 0110 	movw	r1, #4112	; 0x1010
 8000c60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c64:	f000 ff96 	bl	8001b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D3_DISP_RST_Pin|D4_DISP_DC_Pin, GPIO_PIN_RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2181      	movs	r1, #129	; 0x81
 8000c6c:	4828      	ldr	r0, [pc, #160]	; (8000d10 <MX_GPIO_Init+0x114>)
 8000c6e:	f000 ff91 	bl	8001b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A3_DISP_CS_Pin D2_DISP_BL_Pin */
  GPIO_InitStruct.Pin = A3_DISP_CS_Pin|D2_DISP_BL_Pin;
 8000c72:	f241 0310 	movw	r3, #4112	; 0x1010
 8000c76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c84:	f107 030c 	add.w	r3, r7, #12
 8000c88:	4619      	mov	r1, r3
 8000c8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8e:	f000 fdff 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pins : D3_DISP_RST_Pin D4_DISP_DC_Pin */
  GPIO_InitStruct.Pin = D3_DISP_RST_Pin|D4_DISP_DC_Pin;
 8000c92:	2381      	movs	r3, #129	; 0x81
 8000c94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c96:	2301      	movs	r3, #1
 8000c98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca2:	f107 030c 	add.w	r3, r7, #12
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4819      	ldr	r0, [pc, #100]	; (8000d10 <MX_GPIO_Init+0x114>)
 8000caa:	f000 fdf1 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pin : D6_SWITCH_Pin */
  GPIO_InitStruct.Pin = D6_SWITCH_Pin;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cb2:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <MX_GPIO_Init+0x118>)
 8000cb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(D6_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8000cba:	f107 030c 	add.w	r3, r7, #12
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4813      	ldr	r0, [pc, #76]	; (8000d10 <MX_GPIO_Init+0x114>)
 8000cc2:	f000 fde5 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pin : D9_SPEED_SENS_Pin */
  GPIO_InitStruct.Pin = D9_SPEED_SENS_Pin;
 8000cc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <MX_GPIO_Init+0x11c>)
 8000cce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(D9_SPEED_SENS_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	f107 030c 	add.w	r3, r7, #12
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cde:	f000 fdd7 	bl	8001890 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2102      	movs	r1, #2
 8000ce6:	2007      	movs	r0, #7
 8000ce8:	f000 fd9b 	bl	8001822 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000cec:	2007      	movs	r0, #7
 8000cee:	f000 fdb4 	bl	800185a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	2017      	movs	r0, #23
 8000cf8:	f000 fd93 	bl	8001822 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000cfc:	2017      	movs	r0, #23
 8000cfe:	f000 fdac 	bl	800185a <HAL_NVIC_EnableIRQ>

}
 8000d02:	bf00      	nop
 8000d04:	3720      	adds	r7, #32
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	48000400 	.word	0x48000400
 8000d14:	10210000 	.word	0x10210000
 8000d18:	10110000 	.word	0x10110000

08000d1c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	80fb      	strh	r3, [r7, #6]
///////////// SWITCH /////////////
	if(GPIO_Pin == D6_SWITCH_Pin && devState.switchActv) {
 8000d26:	88fb      	ldrh	r3, [r7, #6]
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d116      	bne.n	8000d5a <HAL_GPIO_EXTI_Callback+0x3e>
 8000d2c:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <HAL_GPIO_EXTI_Callback+0x74>)
 8000d2e:	785b      	ldrb	r3, [r3, #1]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d012      	beq.n	8000d5a <HAL_GPIO_EXTI_Callback+0x3e>

		devState.switchActv = 0;
 8000d34:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <HAL_GPIO_EXTI_Callback+0x74>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	705a      	strb	r2, [r3, #1]

		if(devState.screenNo == PARAM) {
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <HAL_GPIO_EXTI_Callback+0x74>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d103      	bne.n	8000d4a <HAL_GPIO_EXTI_Callback+0x2e>
			devState.screenNo = CHANGE_TO_GEARBOX;
 8000d42:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <HAL_GPIO_EXTI_Callback+0x74>)
 8000d44:	2204      	movs	r2, #4
 8000d46:	701a      	strb	r2, [r3, #0]
		if(devState.screenNo == PARAM) {
 8000d48:	e01a      	b.n	8000d80 <HAL_GPIO_EXTI_Callback+0x64>

		} else if(devState.screenNo == GEARBOX) {
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <HAL_GPIO_EXTI_Callback+0x74>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d116      	bne.n	8000d80 <HAL_GPIO_EXTI_Callback+0x64>
			devState.screenNo = CHANGE_TO_PARAM;
 8000d52:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <HAL_GPIO_EXTI_Callback+0x74>)
 8000d54:	2203      	movs	r2, #3
 8000d56:	701a      	strb	r2, [r3, #0]
		if(devState.screenNo == PARAM) {
 8000d58:	e012      	b.n	8000d80 <HAL_GPIO_EXTI_Callback+0x64>
		}
///////////// SPEED SENSOR /////////////
	} else if(GPIO_Pin == D9_SPEED_SENS_Pin) {
 8000d5a:	88fb      	ldrh	r3, [r7, #6]
 8000d5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d60:	d10f      	bne.n	8000d82 <HAL_GPIO_EXTI_Callback+0x66>

		if(devState.switchActv) {
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <HAL_GPIO_EXTI_Callback+0x74>)
 8000d64:	785b      	ldrb	r3, [r3, #1]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d006      	beq.n	8000d78 <HAL_GPIO_EXTI_Callback+0x5c>
			vehicleVal.speedSensCnt++;
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <HAL_GPIO_EXTI_Callback+0x78>)
 8000d6c:	8b5b      	ldrh	r3, [r3, #26]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <HAL_GPIO_EXTI_Callback+0x78>)
 8000d74:	835a      	strh	r2, [r3, #26]

		} else {
			vehicleVal.speedSensCnt = 0;
		}
	}
}
 8000d76:	e004      	b.n	8000d82 <HAL_GPIO_EXTI_Callback+0x66>
			vehicleVal.speedSensCnt = 0;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_GPIO_EXTI_Callback+0x78>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	835a      	strh	r2, [r3, #26]
}
 8000d7e:	e000      	b.n	8000d82 <HAL_GPIO_EXTI_Callback+0x66>
		if(devState.screenNo == PARAM) {
 8000d80:	bf00      	nop
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20000284 	.word	0x20000284
 8000d94:	200000a8 	.word	0x200000a8

08000d98 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]

	vehicleVal.actSpeed = vehicleVal.speedSensCnt;
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000da2:	8b5a      	ldrh	r2, [r3, #26]
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000da6:	839a      	strh	r2, [r3, #28]
	vehicleVal.speedSensCnt = 0;
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	835a      	strh	r2, [r3, #26]
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	200000a8 	.word	0x200000a8

08000dc0 <logoScreenDisplay>:

void logoScreenDisplay() {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af02      	add	r7, sp, #8

	DISP_Clear(BLACK);
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	f003 fff6 	bl	8004db8 <DISP_Clear>
	DISP_DrawImage(gImage_samurai_logo_q1, 30, 30, 90, 90);
 8000dcc:	235a      	movs	r3, #90	; 0x5a
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	235a      	movs	r3, #90	; 0x5a
 8000dd2:	221e      	movs	r2, #30
 8000dd4:	211e      	movs	r1, #30
 8000dd6:	4810      	ldr	r0, [pc, #64]	; (8000e18 <logoScreenDisplay+0x58>)
 8000dd8:	f004 fc2e 	bl	8005638 <DISP_DrawImage>
	DISP_DrawImage(gImage_samurai_logo_q3, 30, 120, 90, 90);
 8000ddc:	235a      	movs	r3, #90	; 0x5a
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	235a      	movs	r3, #90	; 0x5a
 8000de2:	2278      	movs	r2, #120	; 0x78
 8000de4:	211e      	movs	r1, #30
 8000de6:	480d      	ldr	r0, [pc, #52]	; (8000e1c <logoScreenDisplay+0x5c>)
 8000de8:	f004 fc26 	bl	8005638 <DISP_DrawImage>
	DISP_DrawImage(gImage_samurai_logo_q2, 120, 30, 90, 90);
 8000dec:	235a      	movs	r3, #90	; 0x5a
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	235a      	movs	r3, #90	; 0x5a
 8000df2:	221e      	movs	r2, #30
 8000df4:	2178      	movs	r1, #120	; 0x78
 8000df6:	480a      	ldr	r0, [pc, #40]	; (8000e20 <logoScreenDisplay+0x60>)
 8000df8:	f004 fc1e 	bl	8005638 <DISP_DrawImage>
	DISP_DrawImage(gImage_samurai_logo_q4, 120, 120, 90, 90);
 8000dfc:	235a      	movs	r3, #90	; 0x5a
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	235a      	movs	r3, #90	; 0x5a
 8000e02:	2278      	movs	r2, #120	; 0x78
 8000e04:	2178      	movs	r1, #120	; 0x78
 8000e06:	4807      	ldr	r0, [pc, #28]	; (8000e24 <logoScreenDisplay+0x64>)
 8000e08:	f004 fc16 	bl	8005638 <DISP_DrawImage>

	devState.screenNo = LOGO;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <logoScreenDisplay+0x68>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	08008e08 	.word	0x08008e08
 8000e1c:	08010c98 	.word	0x08010c98
 8000e20:	0800cd50 	.word	0x0800cd50
 8000e24:	08014be0 	.word	0x08014be0
 8000e28:	20000284 	.word	0x20000284

08000e2c <paramScreenDisplay>:

void paramScreenDisplay() {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af04      	add	r7, sp, #16

	DISP_Clear(BLACK);
 8000e32:	2000      	movs	r0, #0
 8000e34:	f003 ffc0 	bl	8004db8 <DISP_Clear>
	DISP_DrawString(65, 40, "WATER oC", &Font20, BLACK, BRRED);
 8000e38:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000e3c:	9301      	str	r3, [sp, #4]
 8000e3e:	2300      	movs	r3, #0
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	4b43      	ldr	r3, [pc, #268]	; (8000f50 <paramScreenDisplay+0x124>)
 8000e44:	4a43      	ldr	r2, [pc, #268]	; (8000f54 <paramScreenDisplay+0x128>)
 8000e46:	2128      	movs	r1, #40	; 0x28
 8000e48:	2041      	movs	r0, #65	; 0x41
 8000e4a:	f004 faf3 	bl	8005434 <DISP_DrawString>
	DISP_DrawLine(20, 60, 220, 60, BRRED, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
 8000e4e:	2300      	movs	r3, #0
 8000e50:	9302      	str	r3, [sp, #8]
 8000e52:	2302      	movs	r3, #2
 8000e54:	9301      	str	r3, [sp, #4]
 8000e56:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	233c      	movs	r3, #60	; 0x3c
 8000e5e:	22dc      	movs	r2, #220	; 0xdc
 8000e60:	213c      	movs	r1, #60	; 0x3c
 8000e62:	2014      	movs	r0, #20
 8000e64:	f004 f988 	bl	8005178 <DISP_DrawLine>
	DISP_DrawLine(120, 60, 120, 120, BRRED, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
 8000e68:	2300      	movs	r3, #0
 8000e6a:	9302      	str	r3, [sp, #8]
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	9301      	str	r3, [sp, #4]
 8000e70:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	2378      	movs	r3, #120	; 0x78
 8000e78:	2278      	movs	r2, #120	; 0x78
 8000e7a:	213c      	movs	r1, #60	; 0x3c
 8000e7c:	2078      	movs	r0, #120	; 0x78
 8000e7e:	f004 f97b 	bl	8005178 <DISP_DrawLine>
	DISP_DrawString(25, 100, "OIL oC", &Font20, BLACK, BRRED);
 8000e82:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000e86:	9301      	str	r3, [sp, #4]
 8000e88:	2300      	movs	r3, #0
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	4b30      	ldr	r3, [pc, #192]	; (8000f50 <paramScreenDisplay+0x124>)
 8000e8e:	4a32      	ldr	r2, [pc, #200]	; (8000f58 <paramScreenDisplay+0x12c>)
 8000e90:	2164      	movs	r1, #100	; 0x64
 8000e92:	2019      	movs	r0, #25
 8000e94:	f004 face 	bl	8005434 <DISP_DrawString>
	DISP_DrawString(130, 100, "OIL bar", &Font20, BLACK, BRRED);
 8000e98:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000e9c:	9301      	str	r3, [sp, #4]
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	9300      	str	r3, [sp, #0]
 8000ea2:	4b2b      	ldr	r3, [pc, #172]	; (8000f50 <paramScreenDisplay+0x124>)
 8000ea4:	4a2d      	ldr	r2, [pc, #180]	; (8000f5c <paramScreenDisplay+0x130>)
 8000ea6:	2164      	movs	r1, #100	; 0x64
 8000ea8:	2082      	movs	r0, #130	; 0x82
 8000eaa:	f004 fac3 	bl	8005434 <DISP_DrawString>
	DISP_DrawLine(5, 120, 235, 120, BRRED, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
 8000eae:	2300      	movs	r3, #0
 8000eb0:	9302      	str	r3, [sp, #8]
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	9301      	str	r3, [sp, #4]
 8000eb6:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000eba:	9300      	str	r3, [sp, #0]
 8000ebc:	2378      	movs	r3, #120	; 0x78
 8000ebe:	22eb      	movs	r2, #235	; 0xeb
 8000ec0:	2178      	movs	r1, #120	; 0x78
 8000ec2:	2005      	movs	r0, #5
 8000ec4:	f004 f958 	bl	8005178 <DISP_DrawLine>
	DISP_DrawLine(120, 120, 120, 180, BRRED, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
 8000ec8:	2300      	movs	r3, #0
 8000eca:	9302      	str	r3, [sp, #8]
 8000ecc:	2302      	movs	r3, #2
 8000ece:	9301      	str	r3, [sp, #4]
 8000ed0:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000ed4:	9300      	str	r3, [sp, #0]
 8000ed6:	23b4      	movs	r3, #180	; 0xb4
 8000ed8:	2278      	movs	r2, #120	; 0x78
 8000eda:	2178      	movs	r1, #120	; 0x78
 8000edc:	2078      	movs	r0, #120	; 0x78
 8000ede:	f004 f94b 	bl	8005178 <DISP_DrawLine>
	DISP_DrawString(25, 160, "BATT V", &Font20, BLACK, BRRED);
 8000ee2:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000ee6:	9301      	str	r3, [sp, #4]
 8000ee8:	2300      	movs	r3, #0
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <paramScreenDisplay+0x124>)
 8000eee:	4a1c      	ldr	r2, [pc, #112]	; (8000f60 <paramScreenDisplay+0x134>)
 8000ef0:	21a0      	movs	r1, #160	; 0xa0
 8000ef2:	2019      	movs	r0, #25
 8000ef4:	f004 fa9e 	bl	8005434 <DISP_DrawString>
	DISP_DrawString(130, 160, "LAMBDA", &Font20, BLACK, BRRED);
 8000ef8:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000efc:	9301      	str	r3, [sp, #4]
 8000efe:	2300      	movs	r3, #0
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <paramScreenDisplay+0x124>)
 8000f04:	4a17      	ldr	r2, [pc, #92]	; (8000f64 <paramScreenDisplay+0x138>)
 8000f06:	21a0      	movs	r1, #160	; 0xa0
 8000f08:	2082      	movs	r0, #130	; 0x82
 8000f0a:	f004 fa93 	bl	8005434 <DISP_DrawString>
	DISP_DrawLine(20, 180, 220, 180, BRRED, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
 8000f0e:	2300      	movs	r3, #0
 8000f10:	9302      	str	r3, [sp, #8]
 8000f12:	2302      	movs	r3, #2
 8000f14:	9301      	str	r3, [sp, #4]
 8000f16:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000f1a:	9300      	str	r3, [sp, #0]
 8000f1c:	23b4      	movs	r3, #180	; 0xb4
 8000f1e:	22dc      	movs	r2, #220	; 0xdc
 8000f20:	21b4      	movs	r1, #180	; 0xb4
 8000f22:	2014      	movs	r0, #20
 8000f24:	f004 f928 	bl	8005178 <DISP_DrawLine>
	DISP_DrawString(75, 182, "IAT oC", &Font20, BLACK, BRRED);
 8000f28:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000f2c:	9301      	str	r3, [sp, #4]
 8000f2e:	2300      	movs	r3, #0
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <paramScreenDisplay+0x124>)
 8000f34:	4a0c      	ldr	r2, [pc, #48]	; (8000f68 <paramScreenDisplay+0x13c>)
 8000f36:	21b6      	movs	r1, #182	; 0xb6
 8000f38:	204b      	movs	r0, #75	; 0x4b
 8000f3a:	f004 fa7b 	bl	8005434 <DISP_DrawString>

	devState.screenNo = PARAM;
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <paramScreenDisplay+0x140>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	701a      	strb	r2, [r3, #0]
	devState.switchActv = 1;
 8000f44:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <paramScreenDisplay+0x140>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	705a      	strb	r2, [r3, #1]
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	2000000c 	.word	0x2000000c
 8000f54:	0800610c 	.word	0x0800610c
 8000f58:	08006118 	.word	0x08006118
 8000f5c:	08006120 	.word	0x08006120
 8000f60:	08006128 	.word	0x08006128
 8000f64:	08006130 	.word	0x08006130
 8000f68:	08006138 	.word	0x08006138
 8000f6c:	20000284 	.word	0x20000284

08000f70 <gearboxScreenDisplay>:

void gearboxScreenDisplay() {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af04      	add	r7, sp, #16

	DISP_Clear(BLACK);
 8000f76:	2000      	movs	r0, #0
 8000f78:	f003 ff1e 	bl	8004db8 <DISP_Clear>
	DISP_DrawString(120, 18, "km/h", &Font20, BLACK, BRRED);
 8000f7c:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000f80:	9301      	str	r3, [sp, #4]
 8000f82:	2300      	movs	r3, #0
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	4b40      	ldr	r3, [pc, #256]	; (8001088 <gearboxScreenDisplay+0x118>)
 8000f88:	4a40      	ldr	r2, [pc, #256]	; (800108c <gearboxScreenDisplay+0x11c>)
 8000f8a:	2112      	movs	r1, #18
 8000f8c:	2078      	movs	r0, #120	; 0x78
 8000f8e:	f004 fa51 	bl	8005434 <DISP_DrawString>
	DISP_DrawString(120, 43, "l/100km", &Font20, BLACK, BRRED);
 8000f92:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000f96:	9301      	str	r3, [sp, #4]
 8000f98:	2300      	movs	r3, #0
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	4b3a      	ldr	r3, [pc, #232]	; (8001088 <gearboxScreenDisplay+0x118>)
 8000f9e:	4a3c      	ldr	r2, [pc, #240]	; (8001090 <gearboxScreenDisplay+0x120>)
 8000fa0:	212b      	movs	r1, #43	; 0x2b
 8000fa2:	2078      	movs	r0, #120	; 0x78
 8000fa4:	f004 fa46 	bl	8005434 <DISP_DrawString>
	DISP_DrawLine(20, 68, 220, 68, BRRED, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
 8000fa8:	2300      	movs	r3, #0
 8000faa:	9302      	str	r3, [sp, #8]
 8000fac:	2302      	movs	r3, #2
 8000fae:	9301      	str	r3, [sp, #4]
 8000fb0:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	2344      	movs	r3, #68	; 0x44
 8000fb8:	22dc      	movs	r2, #220	; 0xdc
 8000fba:	2144      	movs	r1, #68	; 0x44
 8000fbc:	2014      	movs	r0, #20
 8000fbe:	f004 f8db 	bl	8005178 <DISP_DrawLine>
	DISP_DrawLine(105, 68, 105, 220, BRRED, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	9302      	str	r3, [sp, #8]
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	9301      	str	r3, [sp, #4]
 8000fca:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	23dc      	movs	r3, #220	; 0xdc
 8000fd2:	2269      	movs	r2, #105	; 0x69
 8000fd4:	2144      	movs	r1, #68	; 0x44
 8000fd6:	2069      	movs	r0, #105	; 0x69
 8000fd8:	f004 f8ce 	bl	8005178 <DISP_DrawLine>
	DISP_DrawString(40, 70, "GEAR", &Font20, BLACK, BRRED);
 8000fdc:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000fe0:	9301      	str	r3, [sp, #4]
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	4b28      	ldr	r3, [pc, #160]	; (8001088 <gearboxScreenDisplay+0x118>)
 8000fe8:	4a2a      	ldr	r2, [pc, #168]	; (8001094 <gearboxScreenDisplay+0x124>)
 8000fea:	2146      	movs	r1, #70	; 0x46
 8000fec:	2028      	movs	r0, #40	; 0x28
 8000fee:	f004 fa21 	bl	8005434 <DISP_DrawString>
	DISP_DrawString(130, 70, "RPM", &Font20, BLACK, BRRED);
 8000ff2:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000ff6:	9301      	str	r3, [sp, #4]
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	4b22      	ldr	r3, [pc, #136]	; (8001088 <gearboxScreenDisplay+0x118>)
 8000ffe:	4a26      	ldr	r2, [pc, #152]	; (8001098 <gearboxScreenDisplay+0x128>)
 8001000:	2146      	movs	r1, #70	; 0x46
 8001002:	2082      	movs	r0, #130	; 0x82
 8001004:	f004 fa16 	bl	8005434 <DISP_DrawString>
	DISP_DrawString(60, 90, "1", &Font20, BLACK, BRRED);
 8001008:	f64f 4307 	movw	r3, #64519	; 0xfc07
 800100c:	9301      	str	r3, [sp, #4]
 800100e:	2300      	movs	r3, #0
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	4b1d      	ldr	r3, [pc, #116]	; (8001088 <gearboxScreenDisplay+0x118>)
 8001014:	4a21      	ldr	r2, [pc, #132]	; (800109c <gearboxScreenDisplay+0x12c>)
 8001016:	215a      	movs	r1, #90	; 0x5a
 8001018:	203c      	movs	r0, #60	; 0x3c
 800101a:	f004 fa0b 	bl	8005434 <DISP_DrawString>
	DISP_DrawString(60, 115, "2", &Font20, BLACK, BRRED);
 800101e:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	2300      	movs	r3, #0
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	4b17      	ldr	r3, [pc, #92]	; (8001088 <gearboxScreenDisplay+0x118>)
 800102a:	4a1d      	ldr	r2, [pc, #116]	; (80010a0 <gearboxScreenDisplay+0x130>)
 800102c:	2173      	movs	r1, #115	; 0x73
 800102e:	203c      	movs	r0, #60	; 0x3c
 8001030:	f004 fa00 	bl	8005434 <DISP_DrawString>
	DISP_DrawString(60, 140, "3", &Font20, BLACK, BRRED);
 8001034:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	2300      	movs	r3, #0
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	4b12      	ldr	r3, [pc, #72]	; (8001088 <gearboxScreenDisplay+0x118>)
 8001040:	4a18      	ldr	r2, [pc, #96]	; (80010a4 <gearboxScreenDisplay+0x134>)
 8001042:	218c      	movs	r1, #140	; 0x8c
 8001044:	203c      	movs	r0, #60	; 0x3c
 8001046:	f004 f9f5 	bl	8005434 <DISP_DrawString>
	DISP_DrawString(60, 165, "4", &Font20, BLACK, BRRED);
 800104a:	f64f 4307 	movw	r3, #64519	; 0xfc07
 800104e:	9301      	str	r3, [sp, #4]
 8001050:	2300      	movs	r3, #0
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <gearboxScreenDisplay+0x118>)
 8001056:	4a14      	ldr	r2, [pc, #80]	; (80010a8 <gearboxScreenDisplay+0x138>)
 8001058:	21a5      	movs	r1, #165	; 0xa5
 800105a:	203c      	movs	r0, #60	; 0x3c
 800105c:	f004 f9ea 	bl	8005434 <DISP_DrawString>
	DISP_DrawString(60, 190, "5", &Font20, BLACK, BRRED);
 8001060:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8001064:	9301      	str	r3, [sp, #4]
 8001066:	2300      	movs	r3, #0
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	4b07      	ldr	r3, [pc, #28]	; (8001088 <gearboxScreenDisplay+0x118>)
 800106c:	4a0f      	ldr	r2, [pc, #60]	; (80010ac <gearboxScreenDisplay+0x13c>)
 800106e:	21be      	movs	r1, #190	; 0xbe
 8001070:	203c      	movs	r0, #60	; 0x3c
 8001072:	f004 f9df 	bl	8005434 <DISP_DrawString>

	devState.screenNo = GEARBOX;
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <gearboxScreenDisplay+0x140>)
 8001078:	2202      	movs	r2, #2
 800107a:	701a      	strb	r2, [r3, #0]
	devState.switchActv = 1;
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <gearboxScreenDisplay+0x140>)
 800107e:	2201      	movs	r2, #1
 8001080:	705a      	strb	r2, [r3, #1]
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	2000000c 	.word	0x2000000c
 800108c:	08006140 	.word	0x08006140
 8001090:	08006148 	.word	0x08006148
 8001094:	08006150 	.word	0x08006150
 8001098:	08006158 	.word	0x08006158
 800109c:	0800615c 	.word	0x0800615c
 80010a0:	08006160 	.word	0x08006160
 80010a4:	08006164 	.word	0x08006164
 80010a8:	08006168 	.word	0x08006168
 80010ac:	0800616c 	.word	0x0800616c
 80010b0:	20000284 	.word	0x20000284

080010b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ca:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <HAL_MspInit+0x44>)
 80010cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ce:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <HAL_MspInit+0x44>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6613      	str	r3, [r2, #96]	; 0x60
 80010d6:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <HAL_MspInit+0x44>)
 80010d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <HAL_MspInit+0x44>)
 80010e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e6:	4a08      	ldr	r2, [pc, #32]	; (8001108 <HAL_MspInit+0x44>)
 80010e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ec:	6593      	str	r3, [r2, #88]	; 0x58
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_MspInit+0x44>)
 80010f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f6:	603b      	str	r3, [r7, #0]
 80010f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40021000 	.word	0x40021000

0800110c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08a      	sub	sp, #40	; 0x28
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a17      	ldr	r2, [pc, #92]	; (8001188 <HAL_SPI_MspInit+0x7c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d127      	bne.n	800117e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800112e:	4b17      	ldr	r3, [pc, #92]	; (800118c <HAL_SPI_MspInit+0x80>)
 8001130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001132:	4a16      	ldr	r2, [pc, #88]	; (800118c <HAL_SPI_MspInit+0x80>)
 8001134:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001138:	6593      	str	r3, [r2, #88]	; 0x58
 800113a:	4b14      	ldr	r3, [pc, #80]	; (800118c <HAL_SPI_MspInit+0x80>)
 800113c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001146:	4b11      	ldr	r3, [pc, #68]	; (800118c <HAL_SPI_MspInit+0x80>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114a:	4a10      	ldr	r2, [pc, #64]	; (800118c <HAL_SPI_MspInit+0x80>)
 800114c:	f043 0302 	orr.w	r3, r3, #2
 8001150:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <HAL_SPI_MspInit+0x80>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = D13_DISP_CLK_Pin|D11_DISP_DIN_Pin;
 800115e:	2328      	movs	r3, #40	; 0x28
 8001160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001162:	2302      	movs	r3, #2
 8001164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116a:	2303      	movs	r3, #3
 800116c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800116e:	2306      	movs	r3, #6
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	4619      	mov	r1, r3
 8001178:	4805      	ldr	r0, [pc, #20]	; (8001190 <HAL_SPI_MspInit+0x84>)
 800117a:	f000 fb89 	bl	8001890 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800117e:	bf00      	nop
 8001180:	3728      	adds	r7, #40	; 0x28
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40003c00 	.word	0x40003c00
 800118c:	40021000 	.word	0x40021000
 8001190:	48000400 	.word	0x48000400

08001194 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011a4:	d113      	bne.n	80011ce <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <HAL_TIM_Base_MspInit+0x44>)
 80011a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011aa:	4a0b      	ldr	r2, [pc, #44]	; (80011d8 <HAL_TIM_Base_MspInit+0x44>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6593      	str	r3, [r2, #88]	; 0x58
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <HAL_TIM_Base_MspInit+0x44>)
 80011b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2101      	movs	r1, #1
 80011c2:	201c      	movs	r0, #28
 80011c4:	f000 fb2d 	bl	8001822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011c8:	201c      	movs	r0, #28
 80011ca:	f000 fb46 	bl	800185a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011ce:	bf00      	nop
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40021000 	.word	0x40021000

080011dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08c      	sub	sp, #48	; 0x30
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a2f      	ldr	r2, [pc, #188]	; (80012b8 <HAL_UART_MspInit+0xdc>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d12a      	bne.n	8001254 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011fe:	4b2f      	ldr	r3, [pc, #188]	; (80012bc <HAL_UART_MspInit+0xe0>)
 8001200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001202:	4a2e      	ldr	r2, [pc, #184]	; (80012bc <HAL_UART_MspInit+0xe0>)
 8001204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001208:	6613      	str	r3, [r2, #96]	; 0x60
 800120a:	4b2c      	ldr	r3, [pc, #176]	; (80012bc <HAL_UART_MspInit+0xe0>)
 800120c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800120e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001212:	61bb      	str	r3, [r7, #24]
 8001214:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001216:	4b29      	ldr	r3, [pc, #164]	; (80012bc <HAL_UART_MspInit+0xe0>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	4a28      	ldr	r2, [pc, #160]	; (80012bc <HAL_UART_MspInit+0xe0>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001222:	4b26      	ldr	r3, [pc, #152]	; (80012bc <HAL_UART_MspInit+0xe0>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	617b      	str	r3, [r7, #20]
 800122c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = D1_UART_ECU_TX_Pin|D0_UART_ECU_RX_Pin;
 800122e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123c:	2303      	movs	r3, #3
 800123e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001240:	2307      	movs	r3, #7
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001244:	f107 031c 	add.w	r3, r7, #28
 8001248:	4619      	mov	r1, r3
 800124a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800124e:	f000 fb1f 	bl	8001890 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001252:	e02d      	b.n	80012b0 <HAL_UART_MspInit+0xd4>
  else if(huart->Instance==USART2)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a19      	ldr	r2, [pc, #100]	; (80012c0 <HAL_UART_MspInit+0xe4>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d128      	bne.n	80012b0 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART2_CLK_ENABLE();
 800125e:	4b17      	ldr	r3, [pc, #92]	; (80012bc <HAL_UART_MspInit+0xe0>)
 8001260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001262:	4a16      	ldr	r2, [pc, #88]	; (80012bc <HAL_UART_MspInit+0xe0>)
 8001264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001268:	6593      	str	r3, [r2, #88]	; 0x58
 800126a:	4b14      	ldr	r3, [pc, #80]	; (80012bc <HAL_UART_MspInit+0xe0>)
 800126c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <HAL_UART_MspInit+0xe0>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	4a10      	ldr	r2, [pc, #64]	; (80012bc <HAL_UART_MspInit+0xe0>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001282:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <HAL_UART_MspInit+0xe0>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = A7_UART_PC_TX_Pin|A2_UART_PC_RX_Pin;
 800128e:	230c      	movs	r3, #12
 8001290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129a:	2303      	movs	r3, #3
 800129c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800129e:	2307      	movs	r3, #7
 80012a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a2:	f107 031c 	add.w	r3, r7, #28
 80012a6:	4619      	mov	r1, r3
 80012a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ac:	f000 faf0 	bl	8001890 <HAL_GPIO_Init>
}
 80012b0:	bf00      	nop
 80012b2:	3730      	adds	r7, #48	; 0x30
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40013800 	.word	0x40013800
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40004400 	.word	0x40004400

080012c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d6:	e7fe      	b.n	80012d6 <HardFault_Handler+0x4>

080012d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <MemManage_Handler+0x4>

080012de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e2:	e7fe      	b.n	80012e2 <BusFault_Handler+0x4>

080012e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <UsageFault_Handler+0x4>

080012ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001318:	f000 f968 	bl	80015ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}

08001320 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001324:	2002      	movs	r0, #2
 8001326:	f000 fc4d 	bl	8001bc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}

0800132e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001332:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001336:	f000 fc45 	bl	8001bc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001344:	4802      	ldr	r0, [pc, #8]	; (8001350 <TIM2_IRQHandler+0x10>)
 8001346:	f002 f941 	bl	80035cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200001c4 	.word	0x200001c4

08001354 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	e00a      	b.n	800137c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001366:	f3af 8000 	nop.w
 800136a:	4601      	mov	r1, r0
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	1c5a      	adds	r2, r3, #1
 8001370:	60ba      	str	r2, [r7, #8]
 8001372:	b2ca      	uxtb	r2, r1
 8001374:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	3301      	adds	r3, #1
 800137a:	617b      	str	r3, [r7, #20]
 800137c:	697a      	ldr	r2, [r7, #20]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	429a      	cmp	r2, r3
 8001382:	dbf0      	blt.n	8001366 <_read+0x12>
	}

return len;
 8001384:	687b      	ldr	r3, [r7, #4]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b086      	sub	sp, #24
 8001392:	af00      	add	r7, sp, #0
 8001394:	60f8      	str	r0, [r7, #12]
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	e009      	b.n	80013b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	1c5a      	adds	r2, r3, #1
 80013a4:	60ba      	str	r2, [r7, #8]
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	3301      	adds	r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	697a      	ldr	r2, [r7, #20]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	dbf1      	blt.n	80013a0 <_write+0x12>
	}
	return len;
 80013bc:	687b      	ldr	r3, [r7, #4]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <_close>:

int _close(int file)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b083      	sub	sp, #12
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
	return -1;
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ee:	605a      	str	r2, [r3, #4]
	return 0;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <_isatty>:

int _isatty(int file)
{
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
	return 1;
 8001406:	2301      	movs	r3, #1
}
 8001408:	4618      	mov	r0, r3
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
	return 0;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
	...

08001430 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <_sbrk+0x50>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d102      	bne.n	8001446 <_sbrk+0x16>
		heap_end = &end;
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <_sbrk+0x50>)
 8001442:	4a10      	ldr	r2, [pc, #64]	; (8001484 <_sbrk+0x54>)
 8001444:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <_sbrk+0x50>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <_sbrk+0x50>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4413      	add	r3, r2
 8001454:	466a      	mov	r2, sp
 8001456:	4293      	cmp	r3, r2
 8001458:	d907      	bls.n	800146a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800145a:	f004 f951 	bl	8005700 <__errno>
 800145e:	4602      	mov	r2, r0
 8001460:	230c      	movs	r3, #12
 8001462:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001464:	f04f 33ff 	mov.w	r3, #4294967295
 8001468:	e006      	b.n	8001478 <_sbrk+0x48>
	}

	heap_end += incr;
 800146a:	4b05      	ldr	r3, [pc, #20]	; (8001480 <_sbrk+0x50>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	4a03      	ldr	r2, [pc, #12]	; (8001480 <_sbrk+0x50>)
 8001474:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001476:	68fb      	ldr	r3, [r7, #12]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	2000009c 	.word	0x2000009c
 8001484:	200002b0 	.word	0x200002b0

08001488 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800148c:	4b17      	ldr	r3, [pc, #92]	; (80014ec <SystemInit+0x64>)
 800148e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001492:	4a16      	ldr	r2, [pc, #88]	; (80014ec <SystemInit+0x64>)
 8001494:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001498:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800149c:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <SystemInit+0x68>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a13      	ldr	r2, [pc, #76]	; (80014f0 <SystemInit+0x68>)
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80014a8:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <SystemInit+0x68>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80014ae:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <SystemInit+0x68>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a0f      	ldr	r2, [pc, #60]	; (80014f0 <SystemInit+0x68>)
 80014b4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80014b8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80014bc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80014be:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <SystemInit+0x68>)
 80014c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014c4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014c6:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <SystemInit+0x68>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a09      	ldr	r2, [pc, #36]	; (80014f0 <SystemInit+0x68>)
 80014cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80014d2:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <SystemInit+0x68>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014d8:	4b04      	ldr	r3, [pc, #16]	; (80014ec <SystemInit+0x64>)
 80014da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014de:	609a      	str	r2, [r3, #8]
#endif
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000ed00 	.word	0xe000ed00
 80014f0:	40021000 	.word	0x40021000

080014f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800152c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80014f8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80014fa:	e003      	b.n	8001504 <LoopCopyDataInit>

080014fc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80014fe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001500:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001502:	3104      	adds	r1, #4

08001504 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001504:	480b      	ldr	r0, [pc, #44]	; (8001534 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001506:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001508:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800150a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800150c:	d3f6      	bcc.n	80014fc <CopyDataInit>
	ldr	r2, =_sbss
 800150e:	4a0b      	ldr	r2, [pc, #44]	; (800153c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001510:	e002      	b.n	8001518 <LoopFillZerobss>

08001512 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001512:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001514:	f842 3b04 	str.w	r3, [r2], #4

08001518 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <LoopForever+0x16>)
	cmp	r2, r3
 800151a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800151c:	d3f9      	bcc.n	8001512 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800151e:	f7ff ffb3 	bl	8001488 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001522:	f004 f8f3 	bl	800570c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001526:	f7fe ffd1 	bl	80004cc <main>

0800152a <LoopForever>:

LoopForever:
    b LoopForever
 800152a:	e7fe      	b.n	800152a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800152c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001530:	08018bc4 	.word	0x08018bc4
	ldr	r0, =_sdata
 8001534:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001538:	20000080 	.word	0x20000080
	ldr	r2, =_sbss
 800153c:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 8001540:	200002b0 	.word	0x200002b0

08001544 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001544:	e7fe      	b.n	8001544 <ADC1_IRQHandler>

08001546 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800154c:	2300      	movs	r3, #0
 800154e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001550:	2003      	movs	r0, #3
 8001552:	f000 f95b 	bl	800180c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001556:	2000      	movs	r0, #0
 8001558:	f000 f80e 	bl	8001578 <HAL_InitTick>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d002      	beq.n	8001568 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	71fb      	strb	r3, [r7, #7]
 8001566:	e001      	b.n	800156c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001568:	f7ff fdac 	bl	80010c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800156c:	79fb      	ldrb	r3, [r7, #7]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001580:	2300      	movs	r3, #0
 8001582:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001584:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <HAL_InitTick+0x68>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d022      	beq.n	80015d2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800158c:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <HAL_InitTick+0x6c>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <HAL_InitTick+0x68>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001598:	fbb1 f3f3 	udiv	r3, r1, r3
 800159c:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a0:	4618      	mov	r0, r3
 80015a2:	f000 f968 	bl	8001876 <HAL_SYSTICK_Config>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d10f      	bne.n	80015cc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b0f      	cmp	r3, #15
 80015b0:	d809      	bhi.n	80015c6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b2:	2200      	movs	r2, #0
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	f04f 30ff 	mov.w	r0, #4294967295
 80015ba:	f000 f932 	bl	8001822 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015be:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <HAL_InitTick+0x70>)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	e007      	b.n	80015d6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	73fb      	strb	r3, [r7, #15]
 80015ca:	e004      	b.n	80015d6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	73fb      	strb	r3, [r7, #15]
 80015d0:	e001      	b.n	80015d6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000008 	.word	0x20000008
 80015e4:	20000000 	.word	0x20000000
 80015e8:	20000004 	.word	0x20000004

080015ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <HAL_IncTick+0x1c>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <HAL_IncTick+0x20>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4413      	add	r3, r2
 80015fa:	4a03      	ldr	r2, [pc, #12]	; (8001608 <HAL_IncTick+0x1c>)
 80015fc:	6013      	str	r3, [r2, #0]
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	20000288 	.word	0x20000288
 800160c:	20000008 	.word	0x20000008

08001610 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return uwTick;
 8001614:	4b03      	ldr	r3, [pc, #12]	; (8001624 <HAL_GetTick+0x14>)
 8001616:	681b      	ldr	r3, [r3, #0]
}
 8001618:	4618      	mov	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	20000288 	.word	0x20000288

08001628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001630:	f7ff ffee 	bl	8001610 <HAL_GetTick>
 8001634:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001640:	d004      	beq.n	800164c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <HAL_Delay+0x40>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	4413      	add	r3, r2
 800164a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800164c:	bf00      	nop
 800164e:	f7ff ffdf 	bl	8001610 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	68fa      	ldr	r2, [r7, #12]
 800165a:	429a      	cmp	r2, r3
 800165c:	d8f7      	bhi.n	800164e <HAL_Delay+0x26>
  {
  }
}
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000008 	.word	0x20000008

0800166c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <__NVIC_SetPriorityGrouping+0x44>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001688:	4013      	ands	r3, r2
 800168a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001694:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800169c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800169e:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <__NVIC_SetPriorityGrouping+0x44>)
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	60d3      	str	r3, [r2, #12]
}
 80016a4:	bf00      	nop
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b8:	4b04      	ldr	r3, [pc, #16]	; (80016cc <__NVIC_GetPriorityGrouping+0x18>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	0a1b      	lsrs	r3, r3, #8
 80016be:	f003 0307 	and.w	r3, r3, #7
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	db0b      	blt.n	80016fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	f003 021f 	and.w	r2, r3, #31
 80016e8:	4907      	ldr	r1, [pc, #28]	; (8001708 <__NVIC_EnableIRQ+0x38>)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	095b      	lsrs	r3, r3, #5
 80016f0:	2001      	movs	r0, #1
 80016f2:	fa00 f202 	lsl.w	r2, r0, r2
 80016f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000e100 	.word	0xe000e100

0800170c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	6039      	str	r1, [r7, #0]
 8001716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171c:	2b00      	cmp	r3, #0
 800171e:	db0a      	blt.n	8001736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	b2da      	uxtb	r2, r3
 8001724:	490c      	ldr	r1, [pc, #48]	; (8001758 <__NVIC_SetPriority+0x4c>)
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	0112      	lsls	r2, r2, #4
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	440b      	add	r3, r1
 8001730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001734:	e00a      	b.n	800174c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	b2da      	uxtb	r2, r3
 800173a:	4908      	ldr	r1, [pc, #32]	; (800175c <__NVIC_SetPriority+0x50>)
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	3b04      	subs	r3, #4
 8001744:	0112      	lsls	r2, r2, #4
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	440b      	add	r3, r1
 800174a:	761a      	strb	r2, [r3, #24]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	e000e100 	.word	0xe000e100
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001760:	b480      	push	{r7}
 8001762:	b089      	sub	sp, #36	; 0x24
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f1c3 0307 	rsb	r3, r3, #7
 800177a:	2b04      	cmp	r3, #4
 800177c:	bf28      	it	cs
 800177e:	2304      	movcs	r3, #4
 8001780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3304      	adds	r3, #4
 8001786:	2b06      	cmp	r3, #6
 8001788:	d902      	bls.n	8001790 <NVIC_EncodePriority+0x30>
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3b03      	subs	r3, #3
 800178e:	e000      	b.n	8001792 <NVIC_EncodePriority+0x32>
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001794:	f04f 32ff 	mov.w	r2, #4294967295
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43da      	mvns	r2, r3
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	401a      	ands	r2, r3
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	fa01 f303 	lsl.w	r3, r1, r3
 80017b2:	43d9      	mvns	r1, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b8:	4313      	orrs	r3, r2
         );
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3724      	adds	r7, #36	; 0x24
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
	...

080017c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017d8:	d301      	bcc.n	80017de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017da:	2301      	movs	r3, #1
 80017dc:	e00f      	b.n	80017fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017de:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <SysTick_Config+0x40>)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017e6:	210f      	movs	r1, #15
 80017e8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ec:	f7ff ff8e 	bl	800170c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f0:	4b05      	ldr	r3, [pc, #20]	; (8001808 <SysTick_Config+0x40>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017f6:	4b04      	ldr	r3, [pc, #16]	; (8001808 <SysTick_Config+0x40>)
 80017f8:	2207      	movs	r2, #7
 80017fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	e000e010 	.word	0xe000e010

0800180c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff ff29 	bl	800166c <__NVIC_SetPriorityGrouping>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b086      	sub	sp, #24
 8001826:	af00      	add	r7, sp, #0
 8001828:	4603      	mov	r3, r0
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	607a      	str	r2, [r7, #4]
 800182e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001834:	f7ff ff3e 	bl	80016b4 <__NVIC_GetPriorityGrouping>
 8001838:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	68b9      	ldr	r1, [r7, #8]
 800183e:	6978      	ldr	r0, [r7, #20]
 8001840:	f7ff ff8e 	bl	8001760 <NVIC_EncodePriority>
 8001844:	4602      	mov	r2, r0
 8001846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184a:	4611      	mov	r1, r2
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ff5d 	bl	800170c <__NVIC_SetPriority>
}
 8001852:	bf00      	nop
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	4603      	mov	r3, r0
 8001862:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ff31 	bl	80016d0 <__NVIC_EnableIRQ>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff ffa2 	bl	80017c8 <SysTick_Config>
 8001884:	4603      	mov	r3, r0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001890:	b480      	push	{r7}
 8001892:	b087      	sub	sp, #28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189e:	e148      	b.n	8001b32 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	2101      	movs	r1, #1
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	fa01 f303 	lsl.w	r3, r1, r3
 80018ac:	4013      	ands	r3, r2
 80018ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f000 813a 	beq.w	8001b2c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d00b      	beq.n	80018d8 <HAL_GPIO_Init+0x48>
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d007      	beq.n	80018d8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018cc:	2b11      	cmp	r3, #17
 80018ce:	d003      	beq.n	80018d8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b12      	cmp	r3, #18
 80018d6:	d130      	bne.n	800193a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	2203      	movs	r2, #3
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4013      	ands	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	68da      	ldr	r2, [r3, #12]
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	4313      	orrs	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800190e:	2201      	movs	r2, #1
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4013      	ands	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	091b      	lsrs	r3, r3, #4
 8001924:	f003 0201 	and.w	r2, r3, #1
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	2203      	movs	r2, #3
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43db      	mvns	r3, r3
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	4013      	ands	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4313      	orrs	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b02      	cmp	r3, #2
 8001970:	d003      	beq.n	800197a <HAL_GPIO_Init+0xea>
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2b12      	cmp	r3, #18
 8001978:	d123      	bne.n	80019c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	08da      	lsrs	r2, r3, #3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	3208      	adds	r2, #8
 8001982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001986:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	220f      	movs	r2, #15
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	4013      	ands	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	691a      	ldr	r2, [r3, #16]
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	08da      	lsrs	r2, r3, #3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3208      	adds	r2, #8
 80019bc:	6939      	ldr	r1, [r7, #16]
 80019be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	2203      	movs	r2, #3
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4013      	ands	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f003 0203 	and.w	r2, r3, #3
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 8094 	beq.w	8001b2c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a04:	4b52      	ldr	r3, [pc, #328]	; (8001b50 <HAL_GPIO_Init+0x2c0>)
 8001a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a08:	4a51      	ldr	r2, [pc, #324]	; (8001b50 <HAL_GPIO_Init+0x2c0>)
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	6613      	str	r3, [r2, #96]	; 0x60
 8001a10:	4b4f      	ldr	r3, [pc, #316]	; (8001b50 <HAL_GPIO_Init+0x2c0>)
 8001a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a1c:	4a4d      	ldr	r2, [pc, #308]	; (8001b54 <HAL_GPIO_Init+0x2c4>)
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	089b      	lsrs	r3, r3, #2
 8001a22:	3302      	adds	r3, #2
 8001a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	220f      	movs	r2, #15
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a46:	d00d      	beq.n	8001a64 <HAL_GPIO_Init+0x1d4>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a43      	ldr	r2, [pc, #268]	; (8001b58 <HAL_GPIO_Init+0x2c8>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d007      	beq.n	8001a60 <HAL_GPIO_Init+0x1d0>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a42      	ldr	r2, [pc, #264]	; (8001b5c <HAL_GPIO_Init+0x2cc>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d101      	bne.n	8001a5c <HAL_GPIO_Init+0x1cc>
 8001a58:	2302      	movs	r3, #2
 8001a5a:	e004      	b.n	8001a66 <HAL_GPIO_Init+0x1d6>
 8001a5c:	2307      	movs	r3, #7
 8001a5e:	e002      	b.n	8001a66 <HAL_GPIO_Init+0x1d6>
 8001a60:	2301      	movs	r3, #1
 8001a62:	e000      	b.n	8001a66 <HAL_GPIO_Init+0x1d6>
 8001a64:	2300      	movs	r3, #0
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	f002 0203 	and.w	r2, r2, #3
 8001a6c:	0092      	lsls	r2, r2, #2
 8001a6e:	4093      	lsls	r3, r2
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a76:	4937      	ldr	r1, [pc, #220]	; (8001b54 <HAL_GPIO_Init+0x2c4>)
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	089b      	lsrs	r3, r3, #2
 8001a7c:	3302      	adds	r3, #2
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a84:	4b36      	ldr	r3, [pc, #216]	; (8001b60 <HAL_GPIO_Init+0x2d0>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001aa8:	4a2d      	ldr	r2, [pc, #180]	; (8001b60 <HAL_GPIO_Init+0x2d0>)
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001aae:	4b2c      	ldr	r3, [pc, #176]	; (8001b60 <HAL_GPIO_Init+0x2d0>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	4013      	ands	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ad2:	4a23      	ldr	r2, [pc, #140]	; (8001b60 <HAL_GPIO_Init+0x2d0>)
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ad8:	4b21      	ldr	r3, [pc, #132]	; (8001b60 <HAL_GPIO_Init+0x2d0>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001afc:	4a18      	ldr	r2, [pc, #96]	; (8001b60 <HAL_GPIO_Init+0x2d0>)
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b02:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <HAL_GPIO_Init+0x2d0>)
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b26:	4a0e      	ldr	r2, [pc, #56]	; (8001b60 <HAL_GPIO_Init+0x2d0>)
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f47f aeaf 	bne.w	80018a0 <HAL_GPIO_Init+0x10>
  }
}
 8001b42:	bf00      	nop
 8001b44:	371c      	adds	r7, #28
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40010000 	.word	0x40010000
 8001b58:	48000400 	.word	0x48000400
 8001b5c:	48000800 	.word	0x48000800
 8001b60:	40010400 	.word	0x40010400

08001b64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	691a      	ldr	r2, [r3, #16]
 8001b74:	887b      	ldrh	r3, [r7, #2]
 8001b76:	4013      	ands	r3, r2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d002      	beq.n	8001b82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	73fb      	strb	r3, [r7, #15]
 8001b80:	e001      	b.n	8001b86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b82:	2300      	movs	r3, #0
 8001b84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	807b      	strh	r3, [r7, #2]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ba4:	787b      	ldrb	r3, [r7, #1]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001baa:	887a      	ldrh	r2, [r7, #2]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bb0:	e002      	b.n	8001bb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bb2:	887a      	ldrh	r2, [r7, #2]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bce:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bd0:	695a      	ldr	r2, [r3, #20]
 8001bd2:	88fb      	ldrh	r3, [r7, #6]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d006      	beq.n	8001be8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bda:	4a05      	ldr	r2, [pc, #20]	; (8001bf0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bdc:	88fb      	ldrh	r3, [r7, #6]
 8001bde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001be0:	88fb      	ldrh	r3, [r7, #6]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff f89a 	bl	8000d1c <HAL_GPIO_EXTI_Callback>
  }
}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40010400 	.word	0x40010400

08001bf4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a04      	ldr	r2, [pc, #16]	; (8001c10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c02:	6013      	str	r3, [r2, #0]
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40007000 	.word	0x40007000

08001c14 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c18:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <HAL_PWREx_GetVoltageRange+0x18>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	40007000 	.word	0x40007000

08001c30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c3e:	d130      	bne.n	8001ca2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c40:	4b23      	ldr	r3, [pc, #140]	; (8001cd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c4c:	d038      	beq.n	8001cc0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c4e:	4b20      	ldr	r3, [pc, #128]	; (8001cd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c56:	4a1e      	ldr	r2, [pc, #120]	; (8001cd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c5c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c5e:	4b1d      	ldr	r3, [pc, #116]	; (8001cd4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2232      	movs	r2, #50	; 0x32
 8001c64:	fb02 f303 	mul.w	r3, r2, r3
 8001c68:	4a1b      	ldr	r2, [pc, #108]	; (8001cd8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6e:	0c9b      	lsrs	r3, r3, #18
 8001c70:	3301      	adds	r3, #1
 8001c72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c74:	e002      	b.n	8001c7c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c7c:	4b14      	ldr	r3, [pc, #80]	; (8001cd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c7e:	695b      	ldr	r3, [r3, #20]
 8001c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c88:	d102      	bne.n	8001c90 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1f2      	bne.n	8001c76 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c90:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c9c:	d110      	bne.n	8001cc0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e00f      	b.n	8001cc2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ca2:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cae:	d007      	beq.n	8001cc0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cb0:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cb8:	4a05      	ldr	r2, [pc, #20]	; (8001cd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cbe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	40007000 	.word	0x40007000
 8001cd4:	20000000 	.word	0x20000000
 8001cd8:	431bde83 	.word	0x431bde83

08001cdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b088      	sub	sp, #32
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d102      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	f000 bc11 	b.w	8002512 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cf0:	4ba0      	ldr	r3, [pc, #640]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 030c 	and.w	r3, r3, #12
 8001cf8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cfa:	4b9e      	ldr	r3, [pc, #632]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0310 	and.w	r3, r3, #16
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 80e4 	beq.w	8001eda <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d007      	beq.n	8001d28 <HAL_RCC_OscConfig+0x4c>
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	2b0c      	cmp	r3, #12
 8001d1c:	f040 808b 	bne.w	8001e36 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	f040 8087 	bne.w	8001e36 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d28:	4b92      	ldr	r3, [pc, #584]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d005      	beq.n	8001d40 <HAL_RCC_OscConfig+0x64>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e3e8      	b.n	8002512 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a1a      	ldr	r2, [r3, #32]
 8001d44:	4b8b      	ldr	r3, [pc, #556]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0308 	and.w	r3, r3, #8
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d004      	beq.n	8001d5a <HAL_RCC_OscConfig+0x7e>
 8001d50:	4b88      	ldr	r3, [pc, #544]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d58:	e005      	b.n	8001d66 <HAL_RCC_OscConfig+0x8a>
 8001d5a:	4b86      	ldr	r3, [pc, #536]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001d5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d60:	091b      	lsrs	r3, r3, #4
 8001d62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d223      	bcs.n	8001db2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 fd78 	bl	8002864 <RCC_SetFlashLatencyFromMSIRange>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e3c9      	b.n	8002512 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d7e:	4b7d      	ldr	r3, [pc, #500]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a7c      	ldr	r2, [pc, #496]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001d84:	f043 0308 	orr.w	r3, r3, #8
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	4b7a      	ldr	r3, [pc, #488]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	4977      	ldr	r1, [pc, #476]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d9c:	4b75      	ldr	r3, [pc, #468]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	021b      	lsls	r3, r3, #8
 8001daa:	4972      	ldr	r1, [pc, #456]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	604b      	str	r3, [r1, #4]
 8001db0:	e025      	b.n	8001dfe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001db2:	4b70      	ldr	r3, [pc, #448]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a6f      	ldr	r2, [pc, #444]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001db8:	f043 0308 	orr.w	r3, r3, #8
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	4b6d      	ldr	r3, [pc, #436]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	496a      	ldr	r1, [pc, #424]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dd0:	4b68      	ldr	r3, [pc, #416]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	69db      	ldr	r3, [r3, #28]
 8001ddc:	021b      	lsls	r3, r3, #8
 8001dde:	4965      	ldr	r1, [pc, #404]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d109      	bne.n	8001dfe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f000 fd38 	bl	8002864 <RCC_SetFlashLatencyFromMSIRange>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e389      	b.n	8002512 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dfe:	f000 fc6f 	bl	80026e0 <HAL_RCC_GetSysClockFreq>
 8001e02:	4601      	mov	r1, r0
 8001e04:	4b5b      	ldr	r3, [pc, #364]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	091b      	lsrs	r3, r3, #4
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	4a5a      	ldr	r2, [pc, #360]	; (8001f78 <HAL_RCC_OscConfig+0x29c>)
 8001e10:	5cd3      	ldrb	r3, [r2, r3]
 8001e12:	f003 031f 	and.w	r3, r3, #31
 8001e16:	fa21 f303 	lsr.w	r3, r1, r3
 8001e1a:	4a58      	ldr	r2, [pc, #352]	; (8001f7c <HAL_RCC_OscConfig+0x2a0>)
 8001e1c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e1e:	4b58      	ldr	r3, [pc, #352]	; (8001f80 <HAL_RCC_OscConfig+0x2a4>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff fba8 	bl	8001578 <HAL_InitTick>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d052      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001e32:	7bfb      	ldrb	r3, [r7, #15]
 8001e34:	e36d      	b.n	8002512 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d032      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e3e:	4b4d      	ldr	r3, [pc, #308]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a4c      	ldr	r2, [pc, #304]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e4a:	f7ff fbe1 	bl	8001610 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e52:	f7ff fbdd 	bl	8001610 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e356      	b.n	8002512 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e64:	4b43      	ldr	r3, [pc, #268]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e70:	4b40      	ldr	r3, [pc, #256]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a3f      	ldr	r2, [pc, #252]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001e76:	f043 0308 	orr.w	r3, r3, #8
 8001e7a:	6013      	str	r3, [r2, #0]
 8001e7c:	4b3d      	ldr	r3, [pc, #244]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	493a      	ldr	r1, [pc, #232]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e8e:	4b39      	ldr	r3, [pc, #228]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	021b      	lsls	r3, r3, #8
 8001e9c:	4935      	ldr	r1, [pc, #212]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	604b      	str	r3, [r1, #4]
 8001ea2:	e01a      	b.n	8001eda <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ea4:	4b33      	ldr	r3, [pc, #204]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a32      	ldr	r2, [pc, #200]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001eaa:	f023 0301 	bic.w	r3, r3, #1
 8001eae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001eb0:	f7ff fbae 	bl	8001610 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001eb8:	f7ff fbaa 	bl	8001610 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e323      	b.n	8002512 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001eca:	4b2a      	ldr	r3, [pc, #168]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f0      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x1dc>
 8001ed6:	e000      	b.n	8001eda <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ed8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d073      	beq.n	8001fce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	2b08      	cmp	r3, #8
 8001eea:	d005      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x21c>
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	2b0c      	cmp	r3, #12
 8001ef0:	d10e      	bne.n	8001f10 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	d10b      	bne.n	8001f10 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef8:	4b1e      	ldr	r3, [pc, #120]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d063      	beq.n	8001fcc <HAL_RCC_OscConfig+0x2f0>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d15f      	bne.n	8001fcc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e300      	b.n	8002512 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f18:	d106      	bne.n	8001f28 <HAL_RCC_OscConfig+0x24c>
 8001f1a:	4b16      	ldr	r3, [pc, #88]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a15      	ldr	r2, [pc, #84]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	e01d      	b.n	8001f64 <HAL_RCC_OscConfig+0x288>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f30:	d10c      	bne.n	8001f4c <HAL_RCC_OscConfig+0x270>
 8001f32:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a0f      	ldr	r2, [pc, #60]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001f38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	4b0d      	ldr	r3, [pc, #52]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a0c      	ldr	r2, [pc, #48]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	e00b      	b.n	8001f64 <HAL_RCC_OscConfig+0x288>
 8001f4c:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a08      	ldr	r2, [pc, #32]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a05      	ldr	r2, [pc, #20]	; (8001f74 <HAL_RCC_OscConfig+0x298>)
 8001f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d01b      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6c:	f7ff fb50 	bl	8001610 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f72:	e010      	b.n	8001f96 <HAL_RCC_OscConfig+0x2ba>
 8001f74:	40021000 	.word	0x40021000
 8001f78:	08006430 	.word	0x08006430
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f84:	f7ff fb44 	bl	8001610 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b64      	cmp	r3, #100	; 0x64
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e2bd      	b.n	8002512 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f96:	4baf      	ldr	r3, [pc, #700]	; (8002254 <HAL_RCC_OscConfig+0x578>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0f0      	beq.n	8001f84 <HAL_RCC_OscConfig+0x2a8>
 8001fa2:	e014      	b.n	8001fce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa4:	f7ff fb34 	bl	8001610 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fac:	f7ff fb30 	bl	8001610 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b64      	cmp	r3, #100	; 0x64
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e2a9      	b.n	8002512 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fbe:	4ba5      	ldr	r3, [pc, #660]	; (8002254 <HAL_RCC_OscConfig+0x578>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1f0      	bne.n	8001fac <HAL_RCC_OscConfig+0x2d0>
 8001fca:	e000      	b.n	8001fce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d060      	beq.n	800209c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	2b04      	cmp	r3, #4
 8001fde:	d005      	beq.n	8001fec <HAL_RCC_OscConfig+0x310>
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	2b0c      	cmp	r3, #12
 8001fe4:	d119      	bne.n	800201a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d116      	bne.n	800201a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fec:	4b99      	ldr	r3, [pc, #612]	; (8002254 <HAL_RCC_OscConfig+0x578>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d005      	beq.n	8002004 <HAL_RCC_OscConfig+0x328>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e286      	b.n	8002512 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002004:	4b93      	ldr	r3, [pc, #588]	; (8002254 <HAL_RCC_OscConfig+0x578>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	061b      	lsls	r3, r3, #24
 8002012:	4990      	ldr	r1, [pc, #576]	; (8002254 <HAL_RCC_OscConfig+0x578>)
 8002014:	4313      	orrs	r3, r2
 8002016:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002018:	e040      	b.n	800209c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d023      	beq.n	800206a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002022:	4b8c      	ldr	r3, [pc, #560]	; (8002254 <HAL_RCC_OscConfig+0x578>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a8b      	ldr	r2, [pc, #556]	; (8002254 <HAL_RCC_OscConfig+0x578>)
 8002028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800202c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202e:	f7ff faef 	bl	8001610 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002036:	f7ff faeb 	bl	8001610 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e264      	b.n	8002512 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002048:	4b82      	ldr	r3, [pc, #520]	; (8002254 <HAL_RCC_OscConfig+0x578>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0f0      	beq.n	8002036 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002054:	4b7f      	ldr	r3, [pc, #508]	; (8002254 <HAL_RCC_OscConfig+0x578>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	061b      	lsls	r3, r3, #24
 8002062:	497c      	ldr	r1, [pc, #496]	; (8002254 <HAL_RCC_OscConfig+0x578>)
 8002064:	4313      	orrs	r3, r2
 8002066:	604b      	str	r3, [r1, #4]
 8002068:	e018      	b.n	800209c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800206a:	4b7a      	ldr	r3, [pc, #488]	; (8002254 <HAL_RCC_OscConfig+0x578>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a79      	ldr	r2, [pc, #484]	; (8002254 <HAL_RCC_OscConfig+0x578>)
 8002070:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002074:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002076:	f7ff facb 	bl	8001610 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800207e:	f7ff fac7 	bl	8001610 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e240      	b.n	8002512 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002090:	4b70      	ldr	r3, [pc, #448]	; (8002254 <HAL_RCC_OscConfig+0x578>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1f0      	bne.n	800207e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0308 	and.w	r3, r3, #8
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d03c      	beq.n	8002122 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d01c      	beq.n	80020ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020b0:	4b68      	ldr	r3, [pc, #416]	; (8002254 <HAL_RCC_OscConfig+0x578>)
 80020b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020b6:	4a67      	ldr	r2, [pc, #412]	; (8002254 <HAL_RCC_OscConfig+0x578>)
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c0:	f7ff faa6 	bl	8001610 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020c8:	f7ff faa2 	bl	8001610 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e21b      	b.n	8002512 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020da:	4b5e      	ldr	r3, [pc, #376]	; (8002254 <HAL_RCC_OscConfig+0x578>)
 80020dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0ef      	beq.n	80020c8 <HAL_RCC_OscConfig+0x3ec>
 80020e8:	e01b      	b.n	8002122 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ea:	4b5a      	ldr	r3, [pc, #360]	; (8002254 <HAL_RCC_OscConfig+0x578>)
 80020ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020f0:	4a58      	ldr	r2, [pc, #352]	; (8002254 <HAL_RCC_OscConfig+0x578>)
 80020f2:	f023 0301 	bic.w	r3, r3, #1
 80020f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fa:	f7ff fa89 	bl	8001610 <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002102:	f7ff fa85 	bl	8001610 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e1fe      	b.n	8002512 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002114:	4b4f      	ldr	r3, [pc, #316]	; (8002254 <HAL_RCC_OscConfig+0x578>)
 8002116:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1ef      	bne.n	8002102 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0304 	and.w	r3, r3, #4
 800212a:	2b00      	cmp	r3, #0
 800212c:	f000 80a6 	beq.w	800227c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002130:	2300      	movs	r3, #0
 8002132:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002134:	4b47      	ldr	r3, [pc, #284]	; (8002254 <HAL_RCC_OscConfig+0x578>)
 8002136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10d      	bne.n	800215c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002140:	4b44      	ldr	r3, [pc, #272]	; (8002254 <HAL_RCC_OscConfig+0x578>)
 8002142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002144:	4a43      	ldr	r2, [pc, #268]	; (8002254 <HAL_RCC_OscConfig+0x578>)
 8002146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800214a:	6593      	str	r3, [r2, #88]	; 0x58
 800214c:	4b41      	ldr	r3, [pc, #260]	; (8002254 <HAL_RCC_OscConfig+0x578>)
 800214e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002158:	2301      	movs	r3, #1
 800215a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800215c:	4b3e      	ldr	r3, [pc, #248]	; (8002258 <HAL_RCC_OscConfig+0x57c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002164:	2b00      	cmp	r3, #0
 8002166:	d118      	bne.n	800219a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002168:	4b3b      	ldr	r3, [pc, #236]	; (8002258 <HAL_RCC_OscConfig+0x57c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a3a      	ldr	r2, [pc, #232]	; (8002258 <HAL_RCC_OscConfig+0x57c>)
 800216e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002172:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002174:	f7ff fa4c 	bl	8001610 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800217c:	f7ff fa48 	bl	8001610 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e1c1      	b.n	8002512 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800218e:	4b32      	ldr	r3, [pc, #200]	; (8002258 <HAL_RCC_OscConfig+0x57c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0f0      	beq.n	800217c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d108      	bne.n	80021b4 <HAL_RCC_OscConfig+0x4d8>
 80021a2:	4b2c      	ldr	r3, [pc, #176]	; (8002254 <HAL_RCC_OscConfig+0x578>)
 80021a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a8:	4a2a      	ldr	r2, [pc, #168]	; (8002254 <HAL_RCC_OscConfig+0x578>)
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021b2:	e024      	b.n	80021fe <HAL_RCC_OscConfig+0x522>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	2b05      	cmp	r3, #5
 80021ba:	d110      	bne.n	80021de <HAL_RCC_OscConfig+0x502>
 80021bc:	4b25      	ldr	r3, [pc, #148]	; (8002254 <HAL_RCC_OscConfig+0x578>)
 80021be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c2:	4a24      	ldr	r2, [pc, #144]	; (8002254 <HAL_RCC_OscConfig+0x578>)
 80021c4:	f043 0304 	orr.w	r3, r3, #4
 80021c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021cc:	4b21      	ldr	r3, [pc, #132]	; (8002254 <HAL_RCC_OscConfig+0x578>)
 80021ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d2:	4a20      	ldr	r2, [pc, #128]	; (8002254 <HAL_RCC_OscConfig+0x578>)
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021dc:	e00f      	b.n	80021fe <HAL_RCC_OscConfig+0x522>
 80021de:	4b1d      	ldr	r3, [pc, #116]	; (8002254 <HAL_RCC_OscConfig+0x578>)
 80021e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e4:	4a1b      	ldr	r2, [pc, #108]	; (8002254 <HAL_RCC_OscConfig+0x578>)
 80021e6:	f023 0301 	bic.w	r3, r3, #1
 80021ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021ee:	4b19      	ldr	r3, [pc, #100]	; (8002254 <HAL_RCC_OscConfig+0x578>)
 80021f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f4:	4a17      	ldr	r2, [pc, #92]	; (8002254 <HAL_RCC_OscConfig+0x578>)
 80021f6:	f023 0304 	bic.w	r3, r3, #4
 80021fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d016      	beq.n	8002234 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002206:	f7ff fa03 	bl	8001610 <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800220c:	e00a      	b.n	8002224 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800220e:	f7ff f9ff 	bl	8001610 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	f241 3288 	movw	r2, #5000	; 0x1388
 800221c:	4293      	cmp	r3, r2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e176      	b.n	8002512 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002224:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <HAL_RCC_OscConfig+0x578>)
 8002226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0ed      	beq.n	800220e <HAL_RCC_OscConfig+0x532>
 8002232:	e01a      	b.n	800226a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002234:	f7ff f9ec 	bl	8001610 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800223a:	e00f      	b.n	800225c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223c:	f7ff f9e8 	bl	8001610 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	f241 3288 	movw	r2, #5000	; 0x1388
 800224a:	4293      	cmp	r3, r2
 800224c:	d906      	bls.n	800225c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e15f      	b.n	8002512 <HAL_RCC_OscConfig+0x836>
 8002252:	bf00      	nop
 8002254:	40021000 	.word	0x40021000
 8002258:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800225c:	4baa      	ldr	r3, [pc, #680]	; (8002508 <HAL_RCC_OscConfig+0x82c>)
 800225e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1e8      	bne.n	800223c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800226a:	7ffb      	ldrb	r3, [r7, #31]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d105      	bne.n	800227c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002270:	4ba5      	ldr	r3, [pc, #660]	; (8002508 <HAL_RCC_OscConfig+0x82c>)
 8002272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002274:	4aa4      	ldr	r2, [pc, #656]	; (8002508 <HAL_RCC_OscConfig+0x82c>)
 8002276:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800227a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0320 	and.w	r3, r3, #32
 8002284:	2b00      	cmp	r3, #0
 8002286:	d03c      	beq.n	8002302 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	2b00      	cmp	r3, #0
 800228e:	d01c      	beq.n	80022ca <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002290:	4b9d      	ldr	r3, [pc, #628]	; (8002508 <HAL_RCC_OscConfig+0x82c>)
 8002292:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002296:	4a9c      	ldr	r2, [pc, #624]	; (8002508 <HAL_RCC_OscConfig+0x82c>)
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a0:	f7ff f9b6 	bl	8001610 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022a8:	f7ff f9b2 	bl	8001610 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e12b      	b.n	8002512 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022ba:	4b93      	ldr	r3, [pc, #588]	; (8002508 <HAL_RCC_OscConfig+0x82c>)
 80022bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0ef      	beq.n	80022a8 <HAL_RCC_OscConfig+0x5cc>
 80022c8:	e01b      	b.n	8002302 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022ca:	4b8f      	ldr	r3, [pc, #572]	; (8002508 <HAL_RCC_OscConfig+0x82c>)
 80022cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022d0:	4a8d      	ldr	r2, [pc, #564]	; (8002508 <HAL_RCC_OscConfig+0x82c>)
 80022d2:	f023 0301 	bic.w	r3, r3, #1
 80022d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022da:	f7ff f999 	bl	8001610 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022e2:	f7ff f995 	bl	8001610 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e10e      	b.n	8002512 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022f4:	4b84      	ldr	r3, [pc, #528]	; (8002508 <HAL_RCC_OscConfig+0x82c>)
 80022f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1ef      	bne.n	80022e2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 8102 	beq.w	8002510 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002310:	2b02      	cmp	r3, #2
 8002312:	f040 80c5 	bne.w	80024a0 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002316:	4b7c      	ldr	r3, [pc, #496]	; (8002508 <HAL_RCC_OscConfig+0x82c>)
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	f003 0203 	and.w	r2, r3, #3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002326:	429a      	cmp	r2, r3
 8002328:	d12c      	bne.n	8002384 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002334:	3b01      	subs	r3, #1
 8002336:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002338:	429a      	cmp	r2, r3
 800233a:	d123      	bne.n	8002384 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002346:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002348:	429a      	cmp	r2, r3
 800234a:	d11b      	bne.n	8002384 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002356:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002358:	429a      	cmp	r2, r3
 800235a:	d113      	bne.n	8002384 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002366:	085b      	lsrs	r3, r3, #1
 8002368:	3b01      	subs	r3, #1
 800236a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800236c:	429a      	cmp	r2, r3
 800236e:	d109      	bne.n	8002384 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	085b      	lsrs	r3, r3, #1
 800237c:	3b01      	subs	r3, #1
 800237e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002380:	429a      	cmp	r2, r3
 8002382:	d067      	beq.n	8002454 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	2b0c      	cmp	r3, #12
 8002388:	d062      	beq.n	8002450 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800238a:	4b5f      	ldr	r3, [pc, #380]	; (8002508 <HAL_RCC_OscConfig+0x82c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e0bb      	b.n	8002512 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800239a:	4b5b      	ldr	r3, [pc, #364]	; (8002508 <HAL_RCC_OscConfig+0x82c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a5a      	ldr	r2, [pc, #360]	; (8002508 <HAL_RCC_OscConfig+0x82c>)
 80023a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023a4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023a6:	f7ff f933 	bl	8001610 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ae:	f7ff f92f 	bl	8001610 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e0a8      	b.n	8002512 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023c0:	4b51      	ldr	r3, [pc, #324]	; (8002508 <HAL_RCC_OscConfig+0x82c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1f0      	bne.n	80023ae <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023cc:	4b4e      	ldr	r3, [pc, #312]	; (8002508 <HAL_RCC_OscConfig+0x82c>)
 80023ce:	68da      	ldr	r2, [r3, #12]
 80023d0:	4b4e      	ldr	r3, [pc, #312]	; (800250c <HAL_RCC_OscConfig+0x830>)
 80023d2:	4013      	ands	r3, r2
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023dc:	3a01      	subs	r2, #1
 80023de:	0112      	lsls	r2, r2, #4
 80023e0:	4311      	orrs	r1, r2
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023e6:	0212      	lsls	r2, r2, #8
 80023e8:	4311      	orrs	r1, r2
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80023ee:	0852      	lsrs	r2, r2, #1
 80023f0:	3a01      	subs	r2, #1
 80023f2:	0552      	lsls	r2, r2, #21
 80023f4:	4311      	orrs	r1, r2
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023fa:	0852      	lsrs	r2, r2, #1
 80023fc:	3a01      	subs	r2, #1
 80023fe:	0652      	lsls	r2, r2, #25
 8002400:	4311      	orrs	r1, r2
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002406:	06d2      	lsls	r2, r2, #27
 8002408:	430a      	orrs	r2, r1
 800240a:	493f      	ldr	r1, [pc, #252]	; (8002508 <HAL_RCC_OscConfig+0x82c>)
 800240c:	4313      	orrs	r3, r2
 800240e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002410:	4b3d      	ldr	r3, [pc, #244]	; (8002508 <HAL_RCC_OscConfig+0x82c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a3c      	ldr	r2, [pc, #240]	; (8002508 <HAL_RCC_OscConfig+0x82c>)
 8002416:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800241a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800241c:	4b3a      	ldr	r3, [pc, #232]	; (8002508 <HAL_RCC_OscConfig+0x82c>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	4a39      	ldr	r2, [pc, #228]	; (8002508 <HAL_RCC_OscConfig+0x82c>)
 8002422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002426:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002428:	f7ff f8f2 	bl	8001610 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002430:	f7ff f8ee 	bl	8001610 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e067      	b.n	8002512 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002442:	4b31      	ldr	r3, [pc, #196]	; (8002508 <HAL_RCC_OscConfig+0x82c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0f0      	beq.n	8002430 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800244e:	e05f      	b.n	8002510 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e05e      	b.n	8002512 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002454:	4b2c      	ldr	r3, [pc, #176]	; (8002508 <HAL_RCC_OscConfig+0x82c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d157      	bne.n	8002510 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002460:	4b29      	ldr	r3, [pc, #164]	; (8002508 <HAL_RCC_OscConfig+0x82c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a28      	ldr	r2, [pc, #160]	; (8002508 <HAL_RCC_OscConfig+0x82c>)
 8002466:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800246a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800246c:	4b26      	ldr	r3, [pc, #152]	; (8002508 <HAL_RCC_OscConfig+0x82c>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	4a25      	ldr	r2, [pc, #148]	; (8002508 <HAL_RCC_OscConfig+0x82c>)
 8002472:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002476:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002478:	f7ff f8ca 	bl	8001610 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002480:	f7ff f8c6 	bl	8001610 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e03f      	b.n	8002512 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002492:	4b1d      	ldr	r3, [pc, #116]	; (8002508 <HAL_RCC_OscConfig+0x82c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0f0      	beq.n	8002480 <HAL_RCC_OscConfig+0x7a4>
 800249e:	e037      	b.n	8002510 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	2b0c      	cmp	r3, #12
 80024a4:	d02d      	beq.n	8002502 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a6:	4b18      	ldr	r3, [pc, #96]	; (8002508 <HAL_RCC_OscConfig+0x82c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a17      	ldr	r2, [pc, #92]	; (8002508 <HAL_RCC_OscConfig+0x82c>)
 80024ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024b0:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024b2:	4b15      	ldr	r3, [pc, #84]	; (8002508 <HAL_RCC_OscConfig+0x82c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d105      	bne.n	80024ca <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80024be:	4b12      	ldr	r3, [pc, #72]	; (8002508 <HAL_RCC_OscConfig+0x82c>)
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	4a11      	ldr	r2, [pc, #68]	; (8002508 <HAL_RCC_OscConfig+0x82c>)
 80024c4:	f023 0303 	bic.w	r3, r3, #3
 80024c8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80024ca:	4b0f      	ldr	r3, [pc, #60]	; (8002508 <HAL_RCC_OscConfig+0x82c>)
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	4a0e      	ldr	r2, [pc, #56]	; (8002508 <HAL_RCC_OscConfig+0x82c>)
 80024d0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80024d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024da:	f7ff f899 	bl	8001610 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e2:	f7ff f895 	bl	8001610 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e00e      	b.n	8002512 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024f4:	4b04      	ldr	r3, [pc, #16]	; (8002508 <HAL_RCC_OscConfig+0x82c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1f0      	bne.n	80024e2 <HAL_RCC_OscConfig+0x806>
 8002500:	e006      	b.n	8002510 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e005      	b.n	8002512 <HAL_RCC_OscConfig+0x836>
 8002506:	bf00      	nop
 8002508:	40021000 	.word	0x40021000
 800250c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3720      	adds	r7, #32
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop

0800251c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e0c8      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002530:	4b66      	ldr	r3, [pc, #408]	; (80026cc <HAL_RCC_ClockConfig+0x1b0>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d910      	bls.n	8002560 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253e:	4b63      	ldr	r3, [pc, #396]	; (80026cc <HAL_RCC_ClockConfig+0x1b0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f023 0207 	bic.w	r2, r3, #7
 8002546:	4961      	ldr	r1, [pc, #388]	; (80026cc <HAL_RCC_ClockConfig+0x1b0>)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	4313      	orrs	r3, r2
 800254c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800254e:	4b5f      	ldr	r3, [pc, #380]	; (80026cc <HAL_RCC_ClockConfig+0x1b0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	429a      	cmp	r2, r3
 800255a:	d001      	beq.n	8002560 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e0b0      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b00      	cmp	r3, #0
 800256a:	d04c      	beq.n	8002606 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b03      	cmp	r3, #3
 8002572:	d107      	bne.n	8002584 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002574:	4b56      	ldr	r3, [pc, #344]	; (80026d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d121      	bne.n	80025c4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e09e      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b02      	cmp	r3, #2
 800258a:	d107      	bne.n	800259c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800258c:	4b50      	ldr	r3, [pc, #320]	; (80026d0 <HAL_RCC_ClockConfig+0x1b4>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d115      	bne.n	80025c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e092      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d107      	bne.n	80025b4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025a4:	4b4a      	ldr	r3, [pc, #296]	; (80026d0 <HAL_RCC_ClockConfig+0x1b4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d109      	bne.n	80025c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e086      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025b4:	4b46      	ldr	r3, [pc, #280]	; (80026d0 <HAL_RCC_ClockConfig+0x1b4>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e07e      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025c4:	4b42      	ldr	r3, [pc, #264]	; (80026d0 <HAL_RCC_ClockConfig+0x1b4>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f023 0203 	bic.w	r2, r3, #3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	493f      	ldr	r1, [pc, #252]	; (80026d0 <HAL_RCC_ClockConfig+0x1b4>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025d6:	f7ff f81b 	bl	8001610 <HAL_GetTick>
 80025da:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025dc:	e00a      	b.n	80025f4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025de:	f7ff f817 	bl	8001610 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e066      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f4:	4b36      	ldr	r3, [pc, #216]	; (80026d0 <HAL_RCC_ClockConfig+0x1b4>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 020c 	and.w	r2, r3, #12
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	429a      	cmp	r2, r3
 8002604:	d1eb      	bne.n	80025de <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d008      	beq.n	8002624 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002612:	4b2f      	ldr	r3, [pc, #188]	; (80026d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	492c      	ldr	r1, [pc, #176]	; (80026d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002620:	4313      	orrs	r3, r2
 8002622:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002624:	4b29      	ldr	r3, [pc, #164]	; (80026cc <HAL_RCC_ClockConfig+0x1b0>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	429a      	cmp	r2, r3
 8002630:	d210      	bcs.n	8002654 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002632:	4b26      	ldr	r3, [pc, #152]	; (80026cc <HAL_RCC_ClockConfig+0x1b0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f023 0207 	bic.w	r2, r3, #7
 800263a:	4924      	ldr	r1, [pc, #144]	; (80026cc <HAL_RCC_ClockConfig+0x1b0>)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	4313      	orrs	r3, r2
 8002640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002642:	4b22      	ldr	r3, [pc, #136]	; (80026cc <HAL_RCC_ClockConfig+0x1b0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	429a      	cmp	r2, r3
 800264e:	d001      	beq.n	8002654 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e036      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	d008      	beq.n	8002672 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002660:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	4918      	ldr	r1, [pc, #96]	; (80026d0 <HAL_RCC_ClockConfig+0x1b4>)
 800266e:	4313      	orrs	r3, r2
 8002670:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	2b00      	cmp	r3, #0
 800267c:	d009      	beq.n	8002692 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800267e:	4b14      	ldr	r3, [pc, #80]	; (80026d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	4910      	ldr	r1, [pc, #64]	; (80026d0 <HAL_RCC_ClockConfig+0x1b4>)
 800268e:	4313      	orrs	r3, r2
 8002690:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002692:	f000 f825 	bl	80026e0 <HAL_RCC_GetSysClockFreq>
 8002696:	4601      	mov	r1, r0
 8002698:	4b0d      	ldr	r3, [pc, #52]	; (80026d0 <HAL_RCC_ClockConfig+0x1b4>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	091b      	lsrs	r3, r3, #4
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	4a0c      	ldr	r2, [pc, #48]	; (80026d4 <HAL_RCC_ClockConfig+0x1b8>)
 80026a4:	5cd3      	ldrb	r3, [r2, r3]
 80026a6:	f003 031f 	and.w	r3, r3, #31
 80026aa:	fa21 f303 	lsr.w	r3, r1, r3
 80026ae:	4a0a      	ldr	r2, [pc, #40]	; (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 80026b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026b2:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <HAL_RCC_ClockConfig+0x1c0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fe ff5e 	bl	8001578 <HAL_InitTick>
 80026bc:	4603      	mov	r3, r0
 80026be:	72fb      	strb	r3, [r7, #11]

  return status;
 80026c0:	7afb      	ldrb	r3, [r7, #11]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40022000 	.word	0x40022000
 80026d0:	40021000 	.word	0x40021000
 80026d4:	08006430 	.word	0x08006430
 80026d8:	20000000 	.word	0x20000000
 80026dc:	20000004 	.word	0x20000004

080026e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b089      	sub	sp, #36	; 0x24
 80026e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
 80026ea:	2300      	movs	r3, #0
 80026ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026ee:	4b3d      	ldr	r3, [pc, #244]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x104>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 030c 	and.w	r3, r3, #12
 80026f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026f8:	4b3a      	ldr	r3, [pc, #232]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x104>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	f003 0303 	and.w	r3, r3, #3
 8002700:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d005      	beq.n	8002714 <HAL_RCC_GetSysClockFreq+0x34>
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	2b0c      	cmp	r3, #12
 800270c:	d121      	bne.n	8002752 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d11e      	bne.n	8002752 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002714:	4b33      	ldr	r3, [pc, #204]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0308 	and.w	r3, r3, #8
 800271c:	2b00      	cmp	r3, #0
 800271e:	d107      	bne.n	8002730 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002720:	4b30      	ldr	r3, [pc, #192]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002722:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002726:	0a1b      	lsrs	r3, r3, #8
 8002728:	f003 030f 	and.w	r3, r3, #15
 800272c:	61fb      	str	r3, [r7, #28]
 800272e:	e005      	b.n	800273c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002730:	4b2c      	ldr	r3, [pc, #176]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	091b      	lsrs	r3, r3, #4
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800273c:	4a2a      	ldr	r2, [pc, #168]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002744:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10d      	bne.n	8002768 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002750:	e00a      	b.n	8002768 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	2b04      	cmp	r3, #4
 8002756:	d102      	bne.n	800275e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002758:	4b24      	ldr	r3, [pc, #144]	; (80027ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800275a:	61bb      	str	r3, [r7, #24]
 800275c:	e004      	b.n	8002768 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	2b08      	cmp	r3, #8
 8002762:	d101      	bne.n	8002768 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002764:	4b22      	ldr	r3, [pc, #136]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002766:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	2b0c      	cmp	r3, #12
 800276c:	d133      	bne.n	80027d6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800276e:	4b1d      	ldr	r3, [pc, #116]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	2b02      	cmp	r3, #2
 800277c:	d002      	beq.n	8002784 <HAL_RCC_GetSysClockFreq+0xa4>
 800277e:	2b03      	cmp	r3, #3
 8002780:	d003      	beq.n	800278a <HAL_RCC_GetSysClockFreq+0xaa>
 8002782:	e005      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002784:	4b19      	ldr	r3, [pc, #100]	; (80027ec <HAL_RCC_GetSysClockFreq+0x10c>)
 8002786:	617b      	str	r3, [r7, #20]
      break;
 8002788:	e005      	b.n	8002796 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800278a:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800278c:	617b      	str	r3, [r7, #20]
      break;
 800278e:	e002      	b.n	8002796 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	617b      	str	r3, [r7, #20]
      break;
 8002794:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002796:	4b13      	ldr	r3, [pc, #76]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	091b      	lsrs	r3, r3, #4
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	3301      	adds	r3, #1
 80027a2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80027a4:	4b0f      	ldr	r3, [pc, #60]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x104>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	0a1b      	lsrs	r3, r3, #8
 80027aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	fb02 f203 	mul.w	r2, r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ba:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027bc:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x104>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	0e5b      	lsrs	r3, r3, #25
 80027c2:	f003 0303 	and.w	r3, r3, #3
 80027c6:	3301      	adds	r3, #1
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80027d6:	69bb      	ldr	r3, [r7, #24]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3724      	adds	r7, #36	; 0x24
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	40021000 	.word	0x40021000
 80027e8:	08006448 	.word	0x08006448
 80027ec:	00f42400 	.word	0x00f42400
 80027f0:	007a1200 	.word	0x007a1200

080027f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027f8:	4b03      	ldr	r3, [pc, #12]	; (8002808 <HAL_RCC_GetHCLKFreq+0x14>)
 80027fa:	681b      	ldr	r3, [r3, #0]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	20000000 	.word	0x20000000

0800280c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002810:	f7ff fff0 	bl	80027f4 <HAL_RCC_GetHCLKFreq>
 8002814:	4601      	mov	r1, r0
 8002816:	4b06      	ldr	r3, [pc, #24]	; (8002830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	0a1b      	lsrs	r3, r3, #8
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	4a04      	ldr	r2, [pc, #16]	; (8002834 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002822:	5cd3      	ldrb	r3, [r2, r3]
 8002824:	f003 031f 	and.w	r3, r3, #31
 8002828:	fa21 f303 	lsr.w	r3, r1, r3
}
 800282c:	4618      	mov	r0, r3
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40021000 	.word	0x40021000
 8002834:	08006440 	.word	0x08006440

08002838 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800283c:	f7ff ffda 	bl	80027f4 <HAL_RCC_GetHCLKFreq>
 8002840:	4601      	mov	r1, r0
 8002842:	4b06      	ldr	r3, [pc, #24]	; (800285c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	0adb      	lsrs	r3, r3, #11
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	4a04      	ldr	r2, [pc, #16]	; (8002860 <HAL_RCC_GetPCLK2Freq+0x28>)
 800284e:	5cd3      	ldrb	r3, [r2, r3]
 8002850:	f003 031f 	and.w	r3, r3, #31
 8002854:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002858:	4618      	mov	r0, r3
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40021000 	.word	0x40021000
 8002860:	08006440 	.word	0x08006440

08002864 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800286c:	2300      	movs	r3, #0
 800286e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002870:	4b2a      	ldr	r3, [pc, #168]	; (800291c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800287c:	f7ff f9ca 	bl	8001c14 <HAL_PWREx_GetVoltageRange>
 8002880:	6178      	str	r0, [r7, #20]
 8002882:	e014      	b.n	80028ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002884:	4b25      	ldr	r3, [pc, #148]	; (800291c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002888:	4a24      	ldr	r2, [pc, #144]	; (800291c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800288a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800288e:	6593      	str	r3, [r2, #88]	; 0x58
 8002890:	4b22      	ldr	r3, [pc, #136]	; (800291c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800289c:	f7ff f9ba 	bl	8001c14 <HAL_PWREx_GetVoltageRange>
 80028a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80028a2:	4b1e      	ldr	r3, [pc, #120]	; (800291c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a6:	4a1d      	ldr	r2, [pc, #116]	; (800291c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028b4:	d10b      	bne.n	80028ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b80      	cmp	r3, #128	; 0x80
 80028ba:	d919      	bls.n	80028f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2ba0      	cmp	r3, #160	; 0xa0
 80028c0:	d902      	bls.n	80028c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028c2:	2302      	movs	r3, #2
 80028c4:	613b      	str	r3, [r7, #16]
 80028c6:	e013      	b.n	80028f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028c8:	2301      	movs	r3, #1
 80028ca:	613b      	str	r3, [r7, #16]
 80028cc:	e010      	b.n	80028f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b80      	cmp	r3, #128	; 0x80
 80028d2:	d902      	bls.n	80028da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80028d4:	2303      	movs	r3, #3
 80028d6:	613b      	str	r3, [r7, #16]
 80028d8:	e00a      	b.n	80028f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b80      	cmp	r3, #128	; 0x80
 80028de:	d102      	bne.n	80028e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028e0:	2302      	movs	r3, #2
 80028e2:	613b      	str	r3, [r7, #16]
 80028e4:	e004      	b.n	80028f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b70      	cmp	r3, #112	; 0x70
 80028ea:	d101      	bne.n	80028f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028ec:	2301      	movs	r3, #1
 80028ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80028f0:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f023 0207 	bic.w	r2, r3, #7
 80028f8:	4909      	ldr	r1, [pc, #36]	; (8002920 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002900:	4b07      	ldr	r3, [pc, #28]	; (8002920 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0307 	and.w	r3, r3, #7
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	429a      	cmp	r2, r3
 800290c:	d001      	beq.n	8002912 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e000      	b.n	8002914 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40021000 	.word	0x40021000
 8002920:	40022000 	.word	0x40022000

08002924 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800292c:	2300      	movs	r3, #0
 800292e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002930:	2300      	movs	r3, #0
 8002932:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800293c:	2b00      	cmp	r3, #0
 800293e:	d02f      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002944:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002948:	d005      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800294a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800294e:	d015      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002950:	2b00      	cmp	r3, #0
 8002952:	d007      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002954:	e00f      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002956:	4bac      	ldr	r3, [pc, #688]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	4aab      	ldr	r2, [pc, #684]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800295c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002960:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002962:	e00c      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3304      	adds	r3, #4
 8002968:	2100      	movs	r1, #0
 800296a:	4618      	mov	r0, r3
 800296c:	f000 f9dc 	bl	8002d28 <RCCEx_PLLSAI1_Config>
 8002970:	4603      	mov	r3, r0
 8002972:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002974:	e003      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	74fb      	strb	r3, [r7, #19]
      break;
 800297a:	e000      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 800297c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800297e:	7cfb      	ldrb	r3, [r7, #19]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10b      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002984:	4ba0      	ldr	r3, [pc, #640]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002992:	499d      	ldr	r1, [pc, #628]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002994:	4313      	orrs	r3, r2
 8002996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800299a:	e001      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800299c:	7cfb      	ldrb	r3, [r7, #19]
 800299e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 8099 	beq.w	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ae:	2300      	movs	r3, #0
 80029b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029b2:	4b95      	ldr	r3, [pc, #596]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80029c2:	2300      	movs	r3, #0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00d      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029c8:	4b8f      	ldr	r3, [pc, #572]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029cc:	4a8e      	ldr	r2, [pc, #568]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d2:	6593      	str	r3, [r2, #88]	; 0x58
 80029d4:	4b8c      	ldr	r3, [pc, #560]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029e0:	2301      	movs	r3, #1
 80029e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029e4:	4b89      	ldr	r3, [pc, #548]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a88      	ldr	r2, [pc, #544]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80029ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029f0:	f7fe fe0e 	bl	8001610 <HAL_GetTick>
 80029f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029f6:	e009      	b.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f8:	f7fe fe0a 	bl	8001610 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d902      	bls.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	74fb      	strb	r3, [r7, #19]
        break;
 8002a0a:	e005      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a0c:	4b7f      	ldr	r3, [pc, #508]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0ef      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8002a18:	7cfb      	ldrb	r3, [r7, #19]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d155      	bne.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a1e:	4b7a      	ldr	r3, [pc, #488]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a28:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d01e      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d019      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a3a:	4b73      	ldr	r3, [pc, #460]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a44:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a46:	4b70      	ldr	r3, [pc, #448]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4c:	4a6e      	ldr	r2, [pc, #440]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a56:	4b6c      	ldr	r3, [pc, #432]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5c:	4a6a      	ldr	r2, [pc, #424]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a66:	4a68      	ldr	r2, [pc, #416]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d016      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a78:	f7fe fdca 	bl	8001610 <HAL_GetTick>
 8002a7c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a7e:	e00b      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a80:	f7fe fdc6 	bl	8001610 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d902      	bls.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	74fb      	strb	r3, [r7, #19]
            break;
 8002a96:	e006      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a98:	4b5b      	ldr	r3, [pc, #364]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0ec      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8002aa6:	7cfb      	ldrb	r3, [r7, #19]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10b      	bne.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002aac:	4b56      	ldr	r3, [pc, #344]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aba:	4953      	ldr	r1, [pc, #332]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ac2:	e004      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ac4:	7cfb      	ldrb	r3, [r7, #19]
 8002ac6:	74bb      	strb	r3, [r7, #18]
 8002ac8:	e001      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aca:	7cfb      	ldrb	r3, [r7, #19]
 8002acc:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ace:	7c7b      	ldrb	r3, [r7, #17]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d105      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ad4:	4b4c      	ldr	r3, [pc, #304]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad8:	4a4b      	ldr	r2, [pc, #300]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ada:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ade:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00a      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002aec:	4b46      	ldr	r3, [pc, #280]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af2:	f023 0203 	bic.w	r2, r3, #3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	4943      	ldr	r1, [pc, #268]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b0e:	4b3e      	ldr	r3, [pc, #248]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b14:	f023 020c 	bic.w	r2, r3, #12
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	493a      	ldr	r1, [pc, #232]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0320 	and.w	r3, r3, #32
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00a      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b30:	4b35      	ldr	r3, [pc, #212]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3e:	4932      	ldr	r1, [pc, #200]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00a      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b52:	4b2d      	ldr	r3, [pc, #180]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b60:	4929      	ldr	r1, [pc, #164]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00a      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b74:	4b24      	ldr	r3, [pc, #144]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b82:	4921      	ldr	r1, [pc, #132]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00a      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b96:	4b1c      	ldr	r3, [pc, #112]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba4:	4918      	ldr	r1, [pc, #96]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00a      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bb8:	4b13      	ldr	r3, [pc, #76]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bbe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	4910      	ldr	r1, [pc, #64]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d02c      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bda:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	4907      	ldr	r1, [pc, #28]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bf8:	d10a      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bfa:	4b03      	ldr	r3, [pc, #12]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	4a02      	ldr	r2, [pc, #8]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c04:	60d3      	str	r3, [r2, #12]
 8002c06:	e015      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c18:	d10c      	bne.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	2101      	movs	r1, #1
 8002c20:	4618      	mov	r0, r3
 8002c22:	f000 f881 	bl	8002d28 <RCCEx_PLLSAI1_Config>
 8002c26:	4603      	mov	r3, r0
 8002c28:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c2a:	7cfb      	ldrb	r3, [r7, #19]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8002c30:	7cfb      	ldrb	r3, [r7, #19]
 8002c32:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d028      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c40:	4b30      	ldr	r3, [pc, #192]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4e:	492d      	ldr	r1, [pc, #180]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c5e:	d106      	bne.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c60:	4b28      	ldr	r3, [pc, #160]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	4a27      	ldr	r2, [pc, #156]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c6a:	60d3      	str	r3, [r2, #12]
 8002c6c:	e011      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c76:	d10c      	bne.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3304      	adds	r3, #4
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f000 f852 	bl	8002d28 <RCCEx_PLLSAI1_Config>
 8002c84:	4603      	mov	r3, r0
 8002c86:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c88:	7cfb      	ldrb	r3, [r7, #19]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8002c8e:	7cfb      	ldrb	r3, [r7, #19]
 8002c90:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d01c      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c9e:	4b19      	ldr	r3, [pc, #100]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cac:	4915      	ldr	r1, [pc, #84]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cbc:	d10c      	bne.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	2102      	movs	r1, #2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f000 f82f 	bl	8002d28 <RCCEx_PLLSAI1_Config>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cce:	7cfb      	ldrb	r3, [r7, #19]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8002cd4:	7cfb      	ldrb	r3, [r7, #19]
 8002cd6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00a      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002ce4:	4b07      	ldr	r3, [pc, #28]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf2:	4904      	ldr	r1, [pc, #16]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002cfa:	7cbb      	ldrb	r3, [r7, #18]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40021000 	.word	0x40021000

08002d08 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002d0c:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a04      	ldr	r2, [pc, #16]	; (8002d24 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002d12:	f043 0304 	orr.w	r3, r3, #4
 8002d16:	6013      	str	r3, [r2, #0]
}
 8002d18:	bf00      	nop
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	40021000 	.word	0x40021000

08002d28 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d36:	4b73      	ldr	r3, [pc, #460]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	f003 0303 	and.w	r3, r3, #3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d018      	beq.n	8002d74 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d42:	4b70      	ldr	r3, [pc, #448]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	f003 0203 	and.w	r2, r3, #3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d10d      	bne.n	8002d6e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
       ||
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d009      	beq.n	8002d6e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d5a:	4b6a      	ldr	r3, [pc, #424]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	091b      	lsrs	r3, r3, #4
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
       ||
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d044      	beq.n	8002df8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	73fb      	strb	r3, [r7, #15]
 8002d72:	e041      	b.n	8002df8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d00c      	beq.n	8002d96 <RCCEx_PLLSAI1_Config+0x6e>
 8002d7c:	2b03      	cmp	r3, #3
 8002d7e:	d013      	beq.n	8002da8 <RCCEx_PLLSAI1_Config+0x80>
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d120      	bne.n	8002dc6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d84:	4b5f      	ldr	r3, [pc, #380]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d11d      	bne.n	8002dcc <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d94:	e01a      	b.n	8002dcc <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d96:	4b5b      	ldr	r3, [pc, #364]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d116      	bne.n	8002dd0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002da6:	e013      	b.n	8002dd0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002da8:	4b56      	ldr	r3, [pc, #344]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10f      	bne.n	8002dd4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002db4:	4b53      	ldr	r3, [pc, #332]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d109      	bne.n	8002dd4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002dc4:	e006      	b.n	8002dd4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	73fb      	strb	r3, [r7, #15]
      break;
 8002dca:	e004      	b.n	8002dd6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002dcc:	bf00      	nop
 8002dce:	e002      	b.n	8002dd6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002dd0:	bf00      	nop
 8002dd2:	e000      	b.n	8002dd6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002dd4:	bf00      	nop
    }

    if(status == HAL_OK)
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10d      	bne.n	8002df8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ddc:	4b49      	ldr	r3, [pc, #292]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6819      	ldr	r1, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	3b01      	subs	r3, #1
 8002dee:	011b      	lsls	r3, r3, #4
 8002df0:	430b      	orrs	r3, r1
 8002df2:	4944      	ldr	r1, [pc, #272]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d17c      	bne.n	8002ef8 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002dfe:	4b41      	ldr	r3, [pc, #260]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a40      	ldr	r2, [pc, #256]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e04:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e0a:	f7fe fc01 	bl	8001610 <HAL_GetTick>
 8002e0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e10:	e009      	b.n	8002e26 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e12:	f7fe fbfd 	bl	8001610 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d902      	bls.n	8002e26 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	73fb      	strb	r3, [r7, #15]
        break;
 8002e24:	e005      	b.n	8002e32 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e26:	4b37      	ldr	r3, [pc, #220]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1ef      	bne.n	8002e12 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d15f      	bne.n	8002ef8 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d110      	bne.n	8002e60 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e3e:	4b31      	ldr	r3, [pc, #196]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002e46:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6892      	ldr	r2, [r2, #8]
 8002e4e:	0211      	lsls	r1, r2, #8
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	68d2      	ldr	r2, [r2, #12]
 8002e54:	06d2      	lsls	r2, r2, #27
 8002e56:	430a      	orrs	r2, r1
 8002e58:	492a      	ldr	r1, [pc, #168]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	610b      	str	r3, [r1, #16]
 8002e5e:	e027      	b.n	8002eb0 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d112      	bne.n	8002e8c <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e66:	4b27      	ldr	r3, [pc, #156]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002e6e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	6892      	ldr	r2, [r2, #8]
 8002e76:	0211      	lsls	r1, r2, #8
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6912      	ldr	r2, [r2, #16]
 8002e7c:	0852      	lsrs	r2, r2, #1
 8002e7e:	3a01      	subs	r2, #1
 8002e80:	0552      	lsls	r2, r2, #21
 8002e82:	430a      	orrs	r2, r1
 8002e84:	491f      	ldr	r1, [pc, #124]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	610b      	str	r3, [r1, #16]
 8002e8a:	e011      	b.n	8002eb0 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e8c:	4b1d      	ldr	r3, [pc, #116]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e94:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6892      	ldr	r2, [r2, #8]
 8002e9c:	0211      	lsls	r1, r2, #8
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6952      	ldr	r2, [r2, #20]
 8002ea2:	0852      	lsrs	r2, r2, #1
 8002ea4:	3a01      	subs	r2, #1
 8002ea6:	0652      	lsls	r2, r2, #25
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	4916      	ldr	r1, [pc, #88]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002eb0:	4b14      	ldr	r3, [pc, #80]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a13      	ldr	r2, [pc, #76]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002eb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002eba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ebc:	f7fe fba8 	bl	8001610 <HAL_GetTick>
 8002ec0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ec2:	e009      	b.n	8002ed8 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ec4:	f7fe fba4 	bl	8001610 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d902      	bls.n	8002ed8 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	73fb      	strb	r3, [r7, #15]
          break;
 8002ed6:	e005      	b.n	8002ee4 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ed8:	4b0a      	ldr	r3, [pc, #40]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0ef      	beq.n	8002ec4 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d106      	bne.n	8002ef8 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002eea:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002eec:	691a      	ldr	r2, [r3, #16]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	4904      	ldr	r1, [pc, #16]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40021000 	.word	0x40021000

08002f08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e07c      	b.n	8003014 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d106      	bne.n	8002f3a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7fe f8e9 	bl	800110c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f50:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f5a:	d902      	bls.n	8002f62 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	e002      	b.n	8002f68 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f66:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002f70:	d007      	beq.n	8002f82 <HAL_SPI_Init+0x7a>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f7a:	d002      	beq.n	8002f82 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10b      	bne.n	8002fa2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f92:	d903      	bls.n	8002f9c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	631a      	str	r2, [r3, #48]	; 0x30
 8002f9a:	e002      	b.n	8002fa2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	ea42 0103 	orr.w	r1, r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	0c1b      	lsrs	r3, r3, #16
 8002fe2:	f003 0204 	and.w	r2, r3, #4
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	ea42 0103 	orr.w	r1, r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	430a      	orrs	r2, r1
 8003002:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	603b      	str	r3, [r7, #0]
 8003028:	4613      	mov	r3, r2
 800302a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800302c:	2300      	movs	r3, #0
 800302e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003036:	2b01      	cmp	r3, #1
 8003038:	d101      	bne.n	800303e <HAL_SPI_Transmit+0x22>
 800303a:	2302      	movs	r3, #2
 800303c:	e150      	b.n	80032e0 <HAL_SPI_Transmit+0x2c4>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003046:	f7fe fae3 	bl	8001610 <HAL_GetTick>
 800304a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800304c:	88fb      	ldrh	r3, [r7, #6]
 800304e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b01      	cmp	r3, #1
 800305a:	d002      	beq.n	8003062 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800305c:	2302      	movs	r3, #2
 800305e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003060:	e135      	b.n	80032ce <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d002      	beq.n	800306e <HAL_SPI_Transmit+0x52>
 8003068:	88fb      	ldrh	r3, [r7, #6]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d102      	bne.n	8003074 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003072:	e12c      	b.n	80032ce <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2203      	movs	r2, #3
 8003078:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	88fa      	ldrh	r2, [r7, #6]
 800308c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	88fa      	ldrh	r2, [r7, #6]
 8003092:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030be:	d107      	bne.n	80030d0 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030ce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030da:	2b40      	cmp	r3, #64	; 0x40
 80030dc:	d007      	beq.n	80030ee <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030f6:	d94b      	bls.n	8003190 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d002      	beq.n	8003106 <HAL_SPI_Transmit+0xea>
 8003100:	8afb      	ldrh	r3, [r7, #22]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d13e      	bne.n	8003184 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310a:	881a      	ldrh	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003116:	1c9a      	adds	r2, r3, #2
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003120:	b29b      	uxth	r3, r3
 8003122:	3b01      	subs	r3, #1
 8003124:	b29a      	uxth	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800312a:	e02b      	b.n	8003184 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b02      	cmp	r3, #2
 8003138:	d112      	bne.n	8003160 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313e:	881a      	ldrh	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314a:	1c9a      	adds	r2, r3, #2
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003154:	b29b      	uxth	r3, r3
 8003156:	3b01      	subs	r3, #1
 8003158:	b29a      	uxth	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800315e:	e011      	b.n	8003184 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003160:	f7fe fa56 	bl	8001610 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d803      	bhi.n	8003178 <HAL_SPI_Transmit+0x15c>
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003176:	d102      	bne.n	800317e <HAL_SPI_Transmit+0x162>
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d102      	bne.n	8003184 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003182:	e0a4      	b.n	80032ce <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003188:	b29b      	uxth	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1ce      	bne.n	800312c <HAL_SPI_Transmit+0x110>
 800318e:	e07c      	b.n	800328a <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d002      	beq.n	800319e <HAL_SPI_Transmit+0x182>
 8003198:	8afb      	ldrh	r3, [r7, #22]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d170      	bne.n	8003280 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d912      	bls.n	80031ce <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ac:	881a      	ldrh	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b8:	1c9a      	adds	r2, r3, #2
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	3b02      	subs	r3, #2
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031cc:	e058      	b.n	8003280 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	330c      	adds	r3, #12
 80031d8:	7812      	ldrb	r2, [r2, #0]
 80031da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80031f4:	e044      	b.n	8003280 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b02      	cmp	r3, #2
 8003202:	d12b      	bne.n	800325c <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003208:	b29b      	uxth	r3, r3
 800320a:	2b01      	cmp	r3, #1
 800320c:	d912      	bls.n	8003234 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003212:	881a      	ldrh	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321e:	1c9a      	adds	r2, r3, #2
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003228:	b29b      	uxth	r3, r3
 800322a:	3b02      	subs	r3, #2
 800322c:	b29a      	uxth	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003232:	e025      	b.n	8003280 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	330c      	adds	r3, #12
 800323e:	7812      	ldrb	r2, [r2, #0]
 8003240:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003246:	1c5a      	adds	r2, r3, #1
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003250:	b29b      	uxth	r3, r3
 8003252:	3b01      	subs	r3, #1
 8003254:	b29a      	uxth	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	87da      	strh	r2, [r3, #62]	; 0x3e
 800325a:	e011      	b.n	8003280 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800325c:	f7fe f9d8 	bl	8001610 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	429a      	cmp	r2, r3
 800326a:	d803      	bhi.n	8003274 <HAL_SPI_Transmit+0x258>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003272:	d102      	bne.n	800327a <HAL_SPI_Transmit+0x25e>
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d102      	bne.n	8003280 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800327e:	e026      	b.n	80032ce <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003284:	b29b      	uxth	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1b5      	bne.n	80031f6 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	6839      	ldr	r1, [r7, #0]
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f901 	bl	8003496 <SPI_EndRxTxTransaction>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d002      	beq.n	80032a0 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2220      	movs	r2, #32
 800329e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10a      	bne.n	80032be <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032a8:	2300      	movs	r3, #0
 80032aa:	613b      	str	r3, [r7, #16]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	613b      	str	r3, [r7, #16]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	613b      	str	r3, [r7, #16]
 80032bc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d002      	beq.n	80032cc <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	77fb      	strb	r3, [r7, #31]
 80032ca:	e000      	b.n	80032ce <HAL_SPI_Transmit+0x2b2>
  }

error:
 80032cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80032de:	7ffb      	ldrb	r3, [r7, #31]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3720      	adds	r7, #32
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	603b      	str	r3, [r7, #0]
 80032f4:	4613      	mov	r3, r2
 80032f6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032f8:	e04c      	b.n	8003394 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003300:	d048      	beq.n	8003394 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003302:	f7fe f985 	bl	8001610 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	429a      	cmp	r2, r3
 8003310:	d902      	bls.n	8003318 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d13d      	bne.n	8003394 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003326:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003330:	d111      	bne.n	8003356 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800333a:	d004      	beq.n	8003346 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003344:	d107      	bne.n	8003356 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003354:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800335e:	d10f      	bne.n	8003380 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800337e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e00f      	b.n	80033b4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	4013      	ands	r3, r2
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	bf0c      	ite	eq
 80033a4:	2301      	moveq	r3, #1
 80033a6:	2300      	movne	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	461a      	mov	r2, r3
 80033ac:	79fb      	ldrb	r3, [r7, #7]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d1a3      	bne.n	80032fa <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
 80033c8:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80033ca:	e057      	b.n	800347c <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80033d2:	d106      	bne.n	80033e2 <SPI_WaitFifoStateUntilTimeout+0x26>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d103      	bne.n	80033e2 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	330c      	adds	r3, #12
 80033e0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e8:	d048      	beq.n	800347c <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80033ea:	f7fe f911 	bl	8001610 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d902      	bls.n	8003400 <SPI_WaitFifoStateUntilTimeout+0x44>
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d13d      	bne.n	800347c <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800340e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003418:	d111      	bne.n	800343e <SPI_WaitFifoStateUntilTimeout+0x82>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003422:	d004      	beq.n	800342e <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800342c:	d107      	bne.n	800343e <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800343c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003446:	d10f      	bne.n	8003468 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003466:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e008      	b.n	800348e <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	4013      	ands	r3, r2
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	429a      	cmp	r2, r3
 800348a:	d19f      	bne.n	80033cc <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b086      	sub	sp, #24
 800349a:	af02      	add	r7, sp, #8
 800349c:	60f8      	str	r0, [r7, #12]
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f7ff ff84 	bl	80033bc <SPI_WaitFifoStateUntilTimeout>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d007      	beq.n	80034ca <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034be:	f043 0220 	orr.w	r2, r3, #32
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e027      	b.n	800351a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2200      	movs	r2, #0
 80034d2:	2180      	movs	r1, #128	; 0x80
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f7ff ff07 	bl	80032e8 <SPI_WaitFlagStateUntilTimeout>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d007      	beq.n	80034f0 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034e4:	f043 0220 	orr.w	r2, r3, #32
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e014      	b.n	800351a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f7ff ff5d 	bl	80033bc <SPI_WaitFifoStateUntilTimeout>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d007      	beq.n	8003518 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800350c:	f043 0220 	orr.w	r2, r3, #32
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e000      	b.n	800351a <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b082      	sub	sp, #8
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e01d      	b.n	8003570 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d106      	bne.n	800354e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f7fd fe23 	bl	8001194 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2202      	movs	r2, #2
 8003552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	3304      	adds	r3, #4
 800355e:	4619      	mov	r1, r3
 8003560:	4610      	mov	r0, r2
 8003562:	f000 fa33 	bl	80039cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68da      	ldr	r2, [r3, #12]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0201 	orr.w	r2, r2, #1
 800358e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	4b0c      	ldr	r3, [pc, #48]	; (80035c8 <HAL_TIM_Base_Start_IT+0x50>)
 8003598:	4013      	ands	r3, r2
 800359a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2b06      	cmp	r3, #6
 80035a0:	d00b      	beq.n	80035ba <HAL_TIM_Base_Start_IT+0x42>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a8:	d007      	beq.n	80035ba <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f042 0201 	orr.w	r2, r2, #1
 80035b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3714      	adds	r7, #20
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	00010007 	.word	0x00010007

080035cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d122      	bne.n	8003628 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d11b      	bne.n	8003628 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f06f 0202 	mvn.w	r2, #2
 80035f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	f003 0303 	and.w	r3, r3, #3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f9be 	bl	8003990 <HAL_TIM_IC_CaptureCallback>
 8003614:	e005      	b.n	8003622 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f9b0 	bl	800397c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 f9c1 	bl	80039a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	f003 0304 	and.w	r3, r3, #4
 8003632:	2b04      	cmp	r3, #4
 8003634:	d122      	bne.n	800367c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b04      	cmp	r3, #4
 8003642:	d11b      	bne.n	800367c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f06f 0204 	mvn.w	r2, #4
 800364c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2202      	movs	r2, #2
 8003652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f994 	bl	8003990 <HAL_TIM_IC_CaptureCallback>
 8003668:	e005      	b.n	8003676 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f986 	bl	800397c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f997 	bl	80039a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	f003 0308 	and.w	r3, r3, #8
 8003686:	2b08      	cmp	r3, #8
 8003688:	d122      	bne.n	80036d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b08      	cmp	r3, #8
 8003696:	d11b      	bne.n	80036d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f06f 0208 	mvn.w	r2, #8
 80036a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2204      	movs	r2, #4
 80036a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f96a 	bl	8003990 <HAL_TIM_IC_CaptureCallback>
 80036bc:	e005      	b.n	80036ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f95c 	bl	800397c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 f96d 	bl	80039a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	f003 0310 	and.w	r3, r3, #16
 80036da:	2b10      	cmp	r3, #16
 80036dc:	d122      	bne.n	8003724 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f003 0310 	and.w	r3, r3, #16
 80036e8:	2b10      	cmp	r3, #16
 80036ea:	d11b      	bne.n	8003724 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f06f 0210 	mvn.w	r2, #16
 80036f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2208      	movs	r2, #8
 80036fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003706:	2b00      	cmp	r3, #0
 8003708:	d003      	beq.n	8003712 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f940 	bl	8003990 <HAL_TIM_IC_CaptureCallback>
 8003710:	e005      	b.n	800371e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f932 	bl	800397c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 f943 	bl	80039a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b01      	cmp	r3, #1
 8003730:	d10e      	bne.n	8003750 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b01      	cmp	r3, #1
 800373e:	d107      	bne.n	8003750 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f06f 0201 	mvn.w	r2, #1
 8003748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7fd fb24 	bl	8000d98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375a:	2b80      	cmp	r3, #128	; 0x80
 800375c:	d10e      	bne.n	800377c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003768:	2b80      	cmp	r3, #128	; 0x80
 800376a:	d107      	bne.n	800377c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 fa96 	bl	8003ca8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800378a:	d10e      	bne.n	80037aa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003796:	2b80      	cmp	r3, #128	; 0x80
 8003798:	d107      	bne.n	80037aa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80037a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 fa89 	bl	8003cbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b4:	2b40      	cmp	r3, #64	; 0x40
 80037b6:	d10e      	bne.n	80037d6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c2:	2b40      	cmp	r3, #64	; 0x40
 80037c4:	d107      	bne.n	80037d6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f8f1 	bl	80039b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	f003 0320 	and.w	r3, r3, #32
 80037e0:	2b20      	cmp	r3, #32
 80037e2:	d10e      	bne.n	8003802 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f003 0320 	and.w	r3, r3, #32
 80037ee:	2b20      	cmp	r3, #32
 80037f0:	d107      	bne.n	8003802 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f06f 0220 	mvn.w	r2, #32
 80037fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 fa49 	bl	8003c94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003802:	bf00      	nop
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b084      	sub	sp, #16
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
 8003812:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800381a:	2b01      	cmp	r3, #1
 800381c:	d101      	bne.n	8003822 <HAL_TIM_ConfigClockSource+0x18>
 800381e:	2302      	movs	r3, #2
 8003820:	e0a8      	b.n	8003974 <HAL_TIM_ConfigClockSource+0x16a>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2202      	movs	r2, #2
 800382e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003840:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003844:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800384c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b40      	cmp	r3, #64	; 0x40
 800385c:	d067      	beq.n	800392e <HAL_TIM_ConfigClockSource+0x124>
 800385e:	2b40      	cmp	r3, #64	; 0x40
 8003860:	d80b      	bhi.n	800387a <HAL_TIM_ConfigClockSource+0x70>
 8003862:	2b10      	cmp	r3, #16
 8003864:	d073      	beq.n	800394e <HAL_TIM_ConfigClockSource+0x144>
 8003866:	2b10      	cmp	r3, #16
 8003868:	d802      	bhi.n	8003870 <HAL_TIM_ConfigClockSource+0x66>
 800386a:	2b00      	cmp	r3, #0
 800386c:	d06f      	beq.n	800394e <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800386e:	e078      	b.n	8003962 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003870:	2b20      	cmp	r3, #32
 8003872:	d06c      	beq.n	800394e <HAL_TIM_ConfigClockSource+0x144>
 8003874:	2b30      	cmp	r3, #48	; 0x30
 8003876:	d06a      	beq.n	800394e <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003878:	e073      	b.n	8003962 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800387a:	2b70      	cmp	r3, #112	; 0x70
 800387c:	d00d      	beq.n	800389a <HAL_TIM_ConfigClockSource+0x90>
 800387e:	2b70      	cmp	r3, #112	; 0x70
 8003880:	d804      	bhi.n	800388c <HAL_TIM_ConfigClockSource+0x82>
 8003882:	2b50      	cmp	r3, #80	; 0x50
 8003884:	d033      	beq.n	80038ee <HAL_TIM_ConfigClockSource+0xe4>
 8003886:	2b60      	cmp	r3, #96	; 0x60
 8003888:	d041      	beq.n	800390e <HAL_TIM_ConfigClockSource+0x104>
      break;
 800388a:	e06a      	b.n	8003962 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800388c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003890:	d066      	beq.n	8003960 <HAL_TIM_ConfigClockSource+0x156>
 8003892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003896:	d017      	beq.n	80038c8 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003898:	e063      	b.n	8003962 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6818      	ldr	r0, [r3, #0]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	6899      	ldr	r1, [r3, #8]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f000 f96d 	bl	8003b88 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	609a      	str	r2, [r3, #8]
      break;
 80038c6:	e04c      	b.n	8003962 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6818      	ldr	r0, [r3, #0]
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	6899      	ldr	r1, [r3, #8]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	f000 f956 	bl	8003b88 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038ea:	609a      	str	r2, [r3, #8]
      break;
 80038ec:	e039      	b.n	8003962 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6818      	ldr	r0, [r3, #0]
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	6859      	ldr	r1, [r3, #4]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	461a      	mov	r2, r3
 80038fc:	f000 f8ca 	bl	8003a94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2150      	movs	r1, #80	; 0x50
 8003906:	4618      	mov	r0, r3
 8003908:	f000 f923 	bl	8003b52 <TIM_ITRx_SetConfig>
      break;
 800390c:	e029      	b.n	8003962 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6818      	ldr	r0, [r3, #0]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	6859      	ldr	r1, [r3, #4]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	461a      	mov	r2, r3
 800391c:	f000 f8e9 	bl	8003af2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2160      	movs	r1, #96	; 0x60
 8003926:	4618      	mov	r0, r3
 8003928:	f000 f913 	bl	8003b52 <TIM_ITRx_SetConfig>
      break;
 800392c:	e019      	b.n	8003962 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6818      	ldr	r0, [r3, #0]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	6859      	ldr	r1, [r3, #4]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	461a      	mov	r2, r3
 800393c:	f000 f8aa 	bl	8003a94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2140      	movs	r1, #64	; 0x40
 8003946:	4618      	mov	r0, r3
 8003948:	f000 f903 	bl	8003b52 <TIM_ITRx_SetConfig>
      break;
 800394c:	e009      	b.n	8003962 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4619      	mov	r1, r3
 8003958:	4610      	mov	r0, r2
 800395a:	f000 f8fa 	bl	8003b52 <TIM_ITRx_SetConfig>
      break;
 800395e:	e000      	b.n	8003962 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003960:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a2a      	ldr	r2, [pc, #168]	; (8003a88 <TIM_Base_SetConfig+0xbc>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d003      	beq.n	80039ec <TIM_Base_SetConfig+0x20>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ea:	d108      	bne.n	80039fe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a21      	ldr	r2, [pc, #132]	; (8003a88 <TIM_Base_SetConfig+0xbc>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d00b      	beq.n	8003a1e <TIM_Base_SetConfig+0x52>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a0c:	d007      	beq.n	8003a1e <TIM_Base_SetConfig+0x52>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a1e      	ldr	r2, [pc, #120]	; (8003a8c <TIM_Base_SetConfig+0xc0>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d003      	beq.n	8003a1e <TIM_Base_SetConfig+0x52>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a1d      	ldr	r2, [pc, #116]	; (8003a90 <TIM_Base_SetConfig+0xc4>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d108      	bne.n	8003a30 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	689a      	ldr	r2, [r3, #8]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a0c      	ldr	r2, [pc, #48]	; (8003a88 <TIM_Base_SetConfig+0xbc>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d007      	beq.n	8003a6c <TIM_Base_SetConfig+0xa0>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a0b      	ldr	r2, [pc, #44]	; (8003a8c <TIM_Base_SetConfig+0xc0>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d003      	beq.n	8003a6c <TIM_Base_SetConfig+0xa0>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a0a      	ldr	r2, [pc, #40]	; (8003a90 <TIM_Base_SetConfig+0xc4>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d103      	bne.n	8003a74 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	691a      	ldr	r2, [r3, #16]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	615a      	str	r2, [r3, #20]
}
 8003a7a:	bf00      	nop
 8003a7c:	3714      	adds	r7, #20
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40012c00 	.word	0x40012c00
 8003a8c:	40014000 	.word	0x40014000
 8003a90:	40014400 	.word	0x40014400

08003a94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	f023 0201 	bic.w	r2, r3, #1
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003abe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f023 030a 	bic.w	r3, r3, #10
 8003ad0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	621a      	str	r2, [r3, #32]
}
 8003ae6:	bf00      	nop
 8003ae8:	371c      	adds	r7, #28
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr

08003af2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b087      	sub	sp, #28
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	60f8      	str	r0, [r7, #12]
 8003afa:	60b9      	str	r1, [r7, #8]
 8003afc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	f023 0210 	bic.w	r2, r3, #16
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	031b      	lsls	r3, r3, #12
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	011b      	lsls	r3, r3, #4
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	621a      	str	r2, [r3, #32]
}
 8003b46:	bf00      	nop
 8003b48:	371c      	adds	r7, #28
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr

08003b52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b085      	sub	sp, #20
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
 8003b5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	f043 0307 	orr.w	r3, r3, #7
 8003b74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	609a      	str	r2, [r3, #8]
}
 8003b7c:	bf00      	nop
 8003b7e:	3714      	adds	r7, #20
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
 8003b94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ba2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	021a      	lsls	r2, r3, #8
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	431a      	orrs	r2, r3
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	609a      	str	r2, [r3, #8]
}
 8003bbc:	bf00      	nop
 8003bbe:	371c      	adds	r7, #28
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d101      	bne.n	8003be0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e04f      	b.n	8003c80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2202      	movs	r2, #2
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a21      	ldr	r2, [pc, #132]	; (8003c8c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d108      	bne.n	8003c1c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c10:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a14      	ldr	r2, [pc, #80]	; (8003c8c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d009      	beq.n	8003c54 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c48:	d004      	beq.n	8003c54 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a10      	ldr	r2, [pc, #64]	; (8003c90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d10c      	bne.n	8003c6e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3714      	adds	r7, #20
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	40012c00 	.word	0x40012c00
 8003c90:	40014000 	.word	0x40014000

08003c94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e040      	b.n	8003d64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d106      	bne.n	8003cf8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7fd fa72 	bl	80011dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2224      	movs	r2, #36	; 0x24
 8003cfc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 0201 	bic.w	r2, r2, #1
 8003d0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f8c0 	bl	8003e94 <UART_SetConfig>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d101      	bne.n	8003d1e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e022      	b.n	8003d64 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d002      	beq.n	8003d2c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 fb9a 	bl	8004460 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689a      	ldr	r2, [r3, #8]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f042 0201 	orr.w	r2, r2, #1
 8003d5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 fc21 	bl	80045a4 <UART_CheckIdleState>
 8003d62:	4603      	mov	r3, r0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b08a      	sub	sp, #40	; 0x28
 8003d70:	af02      	add	r7, sp, #8
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	603b      	str	r3, [r7, #0]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d80:	2b20      	cmp	r3, #32
 8003d82:	f040 8081 	bne.w	8003e88 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <HAL_UART_Transmit+0x26>
 8003d8c:	88fb      	ldrh	r3, [r7, #6]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e079      	b.n	8003e8a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d101      	bne.n	8003da4 <HAL_UART_Transmit+0x38>
 8003da0:	2302      	movs	r3, #2
 8003da2:	e072      	b.n	8003e8a <HAL_UART_Transmit+0x11e>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2221      	movs	r2, #33	; 0x21
 8003db6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003db8:	f7fd fc2a 	bl	8001610 <HAL_GetTick>
 8003dbc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	88fa      	ldrh	r2, [r7, #6]
 8003dc2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	88fa      	ldrh	r2, [r7, #6]
 8003dca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd6:	d108      	bne.n	8003dea <HAL_UART_Transmit+0x7e>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d104      	bne.n	8003dea <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003de0:	2300      	movs	r3, #0
 8003de2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	61bb      	str	r3, [r7, #24]
 8003de8:	e003      	b.n	8003df2 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dee:	2300      	movs	r3, #0
 8003df0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003dfa:	e02d      	b.n	8003e58 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	2200      	movs	r2, #0
 8003e04:	2180      	movs	r1, #128	; 0x80
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 fc11 	bl	800462e <UART_WaitOnFlagUntilTimeout>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e039      	b.n	8003e8a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10b      	bne.n	8003e34 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	881a      	ldrh	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e28:	b292      	uxth	r2, r2
 8003e2a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	3302      	adds	r3, #2
 8003e30:	61bb      	str	r3, [r7, #24]
 8003e32:	e008      	b.n	8003e46 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	781a      	ldrb	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	b292      	uxth	r2, r2
 8003e3e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	3301      	adds	r3, #1
 8003e44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1cb      	bne.n	8003dfc <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	2140      	movs	r1, #64	; 0x40
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 fbdd 	bl	800462e <UART_WaitOnFlagUntilTimeout>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e005      	b.n	8003e8a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2220      	movs	r2, #32
 8003e82:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003e84:	2300      	movs	r3, #0
 8003e86:	e000      	b.n	8003e8a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003e88:	2302      	movs	r3, #2
  }
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3720      	adds	r7, #32
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
	...

08003e94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e94:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003e98:	b08a      	sub	sp, #40	; 0x28
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689a      	ldr	r2, [r3, #8]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	4bb3      	ldr	r3, [pc, #716]	; (8004198 <UART_SetConfig+0x304>)
 8003eca:	4013      	ands	r3, r2
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	6812      	ldr	r2, [r2, #0]
 8003ed0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ed2:	430b      	orrs	r3, r1
 8003ed4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4aa9      	ldr	r2, [pc, #676]	; (800419c <UART_SetConfig+0x308>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d004      	beq.n	8003f06 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f02:	4313      	orrs	r3, r2
 8003f04:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f16:	430a      	orrs	r2, r1
 8003f18:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4aa0      	ldr	r2, [pc, #640]	; (80041a0 <UART_SetConfig+0x30c>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d126      	bne.n	8003f72 <UART_SetConfig+0xde>
 8003f24:	4b9f      	ldr	r3, [pc, #636]	; (80041a4 <UART_SetConfig+0x310>)
 8003f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	2b03      	cmp	r3, #3
 8003f30:	d81a      	bhi.n	8003f68 <UART_SetConfig+0xd4>
 8003f32:	a201      	add	r2, pc, #4	; (adr r2, 8003f38 <UART_SetConfig+0xa4>)
 8003f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f38:	08003f49 	.word	0x08003f49
 8003f3c:	08003f59 	.word	0x08003f59
 8003f40:	08003f51 	.word	0x08003f51
 8003f44:	08003f61 	.word	0x08003f61
 8003f48:	2301      	movs	r3, #1
 8003f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f4e:	e080      	b.n	8004052 <UART_SetConfig+0x1be>
 8003f50:	2302      	movs	r3, #2
 8003f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f56:	e07c      	b.n	8004052 <UART_SetConfig+0x1be>
 8003f58:	2304      	movs	r3, #4
 8003f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f5e:	e078      	b.n	8004052 <UART_SetConfig+0x1be>
 8003f60:	2308      	movs	r3, #8
 8003f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f66:	e074      	b.n	8004052 <UART_SetConfig+0x1be>
 8003f68:	2310      	movs	r3, #16
 8003f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f6e:	bf00      	nop
 8003f70:	e06f      	b.n	8004052 <UART_SetConfig+0x1be>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a8c      	ldr	r2, [pc, #560]	; (80041a8 <UART_SetConfig+0x314>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d138      	bne.n	8003fee <UART_SetConfig+0x15a>
 8003f7c:	4b89      	ldr	r3, [pc, #548]	; (80041a4 <UART_SetConfig+0x310>)
 8003f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f82:	f003 030c 	and.w	r3, r3, #12
 8003f86:	2b0c      	cmp	r3, #12
 8003f88:	d82c      	bhi.n	8003fe4 <UART_SetConfig+0x150>
 8003f8a:	a201      	add	r2, pc, #4	; (adr r2, 8003f90 <UART_SetConfig+0xfc>)
 8003f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f90:	08003fc5 	.word	0x08003fc5
 8003f94:	08003fe5 	.word	0x08003fe5
 8003f98:	08003fe5 	.word	0x08003fe5
 8003f9c:	08003fe5 	.word	0x08003fe5
 8003fa0:	08003fd5 	.word	0x08003fd5
 8003fa4:	08003fe5 	.word	0x08003fe5
 8003fa8:	08003fe5 	.word	0x08003fe5
 8003fac:	08003fe5 	.word	0x08003fe5
 8003fb0:	08003fcd 	.word	0x08003fcd
 8003fb4:	08003fe5 	.word	0x08003fe5
 8003fb8:	08003fe5 	.word	0x08003fe5
 8003fbc:	08003fe5 	.word	0x08003fe5
 8003fc0:	08003fdd 	.word	0x08003fdd
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fca:	e042      	b.n	8004052 <UART_SetConfig+0x1be>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fd2:	e03e      	b.n	8004052 <UART_SetConfig+0x1be>
 8003fd4:	2304      	movs	r3, #4
 8003fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fda:	e03a      	b.n	8004052 <UART_SetConfig+0x1be>
 8003fdc:	2308      	movs	r3, #8
 8003fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fe2:	e036      	b.n	8004052 <UART_SetConfig+0x1be>
 8003fe4:	2310      	movs	r3, #16
 8003fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fea:	bf00      	nop
 8003fec:	e031      	b.n	8004052 <UART_SetConfig+0x1be>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a6a      	ldr	r2, [pc, #424]	; (800419c <UART_SetConfig+0x308>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d129      	bne.n	800404c <UART_SetConfig+0x1b8>
 8003ff8:	4b6a      	ldr	r3, [pc, #424]	; (80041a4 <UART_SetConfig+0x310>)
 8003ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004006:	d014      	beq.n	8004032 <UART_SetConfig+0x19e>
 8004008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800400c:	d802      	bhi.n	8004014 <UART_SetConfig+0x180>
 800400e:	2b00      	cmp	r3, #0
 8004010:	d007      	beq.n	8004022 <UART_SetConfig+0x18e>
 8004012:	e016      	b.n	8004042 <UART_SetConfig+0x1ae>
 8004014:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004018:	d007      	beq.n	800402a <UART_SetConfig+0x196>
 800401a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800401e:	d00c      	beq.n	800403a <UART_SetConfig+0x1a6>
 8004020:	e00f      	b.n	8004042 <UART_SetConfig+0x1ae>
 8004022:	2300      	movs	r3, #0
 8004024:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004028:	e013      	b.n	8004052 <UART_SetConfig+0x1be>
 800402a:	2302      	movs	r3, #2
 800402c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004030:	e00f      	b.n	8004052 <UART_SetConfig+0x1be>
 8004032:	2304      	movs	r3, #4
 8004034:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004038:	e00b      	b.n	8004052 <UART_SetConfig+0x1be>
 800403a:	2308      	movs	r3, #8
 800403c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004040:	e007      	b.n	8004052 <UART_SetConfig+0x1be>
 8004042:	2310      	movs	r3, #16
 8004044:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004048:	bf00      	nop
 800404a:	e002      	b.n	8004052 <UART_SetConfig+0x1be>
 800404c:	2310      	movs	r3, #16
 800404e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a51      	ldr	r2, [pc, #324]	; (800419c <UART_SetConfig+0x308>)
 8004058:	4293      	cmp	r3, r2
 800405a:	f040 80fa 	bne.w	8004252 <UART_SetConfig+0x3be>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800405e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004062:	2b08      	cmp	r3, #8
 8004064:	d823      	bhi.n	80040ae <UART_SetConfig+0x21a>
 8004066:	a201      	add	r2, pc, #4	; (adr r2, 800406c <UART_SetConfig+0x1d8>)
 8004068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406c:	08004091 	.word	0x08004091
 8004070:	080040af 	.word	0x080040af
 8004074:	08004099 	.word	0x08004099
 8004078:	080040af 	.word	0x080040af
 800407c:	0800409f 	.word	0x0800409f
 8004080:	080040af 	.word	0x080040af
 8004084:	080040af 	.word	0x080040af
 8004088:	080040af 	.word	0x080040af
 800408c:	080040a7 	.word	0x080040a7
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004090:	f7fe fbbc 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 8004094:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004096:	e00d      	b.n	80040b4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004098:	4b44      	ldr	r3, [pc, #272]	; (80041ac <UART_SetConfig+0x318>)
 800409a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800409c:	e00a      	b.n	80040b4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800409e:	f7fe fb1f 	bl	80026e0 <HAL_RCC_GetSysClockFreq>
 80040a2:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80040a4:	e006      	b.n	80040b4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80040a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040aa:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80040ac:	e002      	b.n	80040b4 <UART_SetConfig+0x220>
      default:
        ret = HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	76fb      	strb	r3, [r7, #27]
        break;
 80040b2:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 81c6 	beq.w	8004448 <UART_SetConfig+0x5b4>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	4613      	mov	r3, r2
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	4413      	add	r3, r2
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d305      	bcc.n	80040d8 <UART_SetConfig+0x244>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d902      	bls.n	80040de <UART_SetConfig+0x24a>
      {
        ret = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	76fb      	strb	r3, [r7, #27]
 80040dc:	e1b4      	b.n	8004448 <UART_SetConfig+0x5b4>
      }
      else
      {
        switch (clocksource)
 80040de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040e2:	2b08      	cmp	r3, #8
 80040e4:	f200 80a2 	bhi.w	800422c <UART_SetConfig+0x398>
 80040e8:	a201      	add	r2, pc, #4	; (adr r2, 80040f0 <UART_SetConfig+0x25c>)
 80040ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ee:	bf00      	nop
 80040f0:	08004115 	.word	0x08004115
 80040f4:	0800422d 	.word	0x0800422d
 80040f8:	08004163 	.word	0x08004163
 80040fc:	0800422d 	.word	0x0800422d
 8004100:	080041b5 	.word	0x080041b5
 8004104:	0800422d 	.word	0x0800422d
 8004108:	0800422d 	.word	0x0800422d
 800410c:	0800422d 	.word	0x0800422d
 8004110:	08004203 	.word	0x08004203
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004114:	f7fe fb7a 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 8004118:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	4619      	mov	r1, r3
 800411e:	f04f 0200 	mov.w	r2, #0
 8004122:	f04f 0300 	mov.w	r3, #0
 8004126:	f04f 0400 	mov.w	r4, #0
 800412a:	0214      	lsls	r4, r2, #8
 800412c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004130:	020b      	lsls	r3, r1, #8
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6852      	ldr	r2, [r2, #4]
 8004136:	0852      	lsrs	r2, r2, #1
 8004138:	4611      	mov	r1, r2
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	eb13 0b01 	adds.w	fp, r3, r1
 8004142:	eb44 0c02 	adc.w	ip, r4, r2
 8004146:	4658      	mov	r0, fp
 8004148:	4661      	mov	r1, ip
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f04f 0400 	mov.w	r4, #0
 8004152:	461a      	mov	r2, r3
 8004154:	4623      	mov	r3, r4
 8004156:	f7fc f839 	bl	80001cc <__aeabi_uldivmod>
 800415a:	4603      	mov	r3, r0
 800415c:	460c      	mov	r4, r1
 800415e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004160:	e067      	b.n	8004232 <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	085b      	lsrs	r3, r3, #1
 8004168:	f04f 0400 	mov.w	r4, #0
 800416c:	4910      	ldr	r1, [pc, #64]	; (80041b0 <UART_SetConfig+0x31c>)
 800416e:	f04f 0200 	mov.w	r2, #0
 8004172:	eb13 0b01 	adds.w	fp, r3, r1
 8004176:	eb44 0c02 	adc.w	ip, r4, r2
 800417a:	4658      	mov	r0, fp
 800417c:	4661      	mov	r1, ip
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f04f 0400 	mov.w	r4, #0
 8004186:	461a      	mov	r2, r3
 8004188:	4623      	mov	r3, r4
 800418a:	f7fc f81f 	bl	80001cc <__aeabi_uldivmod>
 800418e:	4603      	mov	r3, r0
 8004190:	460c      	mov	r4, r1
 8004192:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004194:	e04d      	b.n	8004232 <UART_SetConfig+0x39e>
 8004196:	bf00      	nop
 8004198:	efff69f3 	.word	0xefff69f3
 800419c:	40008000 	.word	0x40008000
 80041a0:	40013800 	.word	0x40013800
 80041a4:	40021000 	.word	0x40021000
 80041a8:	40004400 	.word	0x40004400
 80041ac:	00f42400 	.word	0x00f42400
 80041b0:	f4240000 	.word	0xf4240000
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80041b4:	f7fe fa94 	bl	80026e0 <HAL_RCC_GetSysClockFreq>
 80041b8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	4619      	mov	r1, r3
 80041be:	f04f 0200 	mov.w	r2, #0
 80041c2:	f04f 0300 	mov.w	r3, #0
 80041c6:	f04f 0400 	mov.w	r4, #0
 80041ca:	0214      	lsls	r4, r2, #8
 80041cc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80041d0:	020b      	lsls	r3, r1, #8
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6852      	ldr	r2, [r2, #4]
 80041d6:	0852      	lsrs	r2, r2, #1
 80041d8:	4611      	mov	r1, r2
 80041da:	f04f 0200 	mov.w	r2, #0
 80041de:	eb13 0b01 	adds.w	fp, r3, r1
 80041e2:	eb44 0c02 	adc.w	ip, r4, r2
 80041e6:	4658      	mov	r0, fp
 80041e8:	4661      	mov	r1, ip
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f04f 0400 	mov.w	r4, #0
 80041f2:	461a      	mov	r2, r3
 80041f4:	4623      	mov	r3, r4
 80041f6:	f7fb ffe9 	bl	80001cc <__aeabi_uldivmod>
 80041fa:	4603      	mov	r3, r0
 80041fc:	460c      	mov	r4, r1
 80041fe:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004200:	e017      	b.n	8004232 <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	085b      	lsrs	r3, r3, #1
 8004208:	f04f 0400 	mov.w	r4, #0
 800420c:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004210:	f144 0100 	adc.w	r1, r4, #0
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f04f 0400 	mov.w	r4, #0
 800421c:	461a      	mov	r2, r3
 800421e:	4623      	mov	r3, r4
 8004220:	f7fb ffd4 	bl	80001cc <__aeabi_uldivmod>
 8004224:	4603      	mov	r3, r0
 8004226:	460c      	mov	r4, r1
 8004228:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800422a:	e002      	b.n	8004232 <UART_SetConfig+0x39e>
          default:
            ret = HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	76fb      	strb	r3, [r7, #27]
            break;
 8004230:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004238:	d308      	bcc.n	800424c <UART_SetConfig+0x3b8>
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004240:	d204      	bcs.n	800424c <UART_SetConfig+0x3b8>
        {
          huart->Instance->BRR = usartdiv;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	69fa      	ldr	r2, [r7, #28]
 8004248:	60da      	str	r2, [r3, #12]
 800424a:	e0fd      	b.n	8004448 <UART_SetConfig+0x5b4>
        }
        else
        {
          ret = HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	76fb      	strb	r3, [r7, #27]
 8004250:	e0fa      	b.n	8004448 <UART_SetConfig+0x5b4>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800425a:	f040 8083 	bne.w	8004364 <UART_SetConfig+0x4d0>
  {
    switch (clocksource)
 800425e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004262:	2b08      	cmp	r3, #8
 8004264:	d85e      	bhi.n	8004324 <UART_SetConfig+0x490>
 8004266:	a201      	add	r2, pc, #4	; (adr r2, 800426c <UART_SetConfig+0x3d8>)
 8004268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426c:	08004291 	.word	0x08004291
 8004270:	080042b1 	.word	0x080042b1
 8004274:	080042d1 	.word	0x080042d1
 8004278:	08004325 	.word	0x08004325
 800427c:	080042ed 	.word	0x080042ed
 8004280:	08004325 	.word	0x08004325
 8004284:	08004325 	.word	0x08004325
 8004288:	08004325 	.word	0x08004325
 800428c:	0800430d 	.word	0x0800430d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004290:	f7fe fabc 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 8004294:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	005a      	lsls	r2, r3, #1
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	085b      	lsrs	r3, r3, #1
 80042a0:	441a      	add	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80042ae:	e03c      	b.n	800432a <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042b0:	f7fe fac2 	bl	8002838 <HAL_RCC_GetPCLK2Freq>
 80042b4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	005a      	lsls	r2, r3, #1
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	085b      	lsrs	r3, r3, #1
 80042c0:	441a      	add	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80042ce:	e02c      	b.n	800432a <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	085b      	lsrs	r3, r3, #1
 80042d6:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80042da:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	6852      	ldr	r2, [r2, #4]
 80042e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80042ea:	e01e      	b.n	800432a <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042ec:	f7fe f9f8 	bl	80026e0 <HAL_RCC_GetSysClockFreq>
 80042f0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	005a      	lsls	r2, r3, #1
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	085b      	lsrs	r3, r3, #1
 80042fc:	441a      	add	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	fbb2 f3f3 	udiv	r3, r2, r3
 8004306:	b29b      	uxth	r3, r3
 8004308:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800430a:	e00e      	b.n	800432a <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	085b      	lsrs	r3, r3, #1
 8004312:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	fbb2 f3f3 	udiv	r3, r2, r3
 800431e:	b29b      	uxth	r3, r3
 8004320:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004322:	e002      	b.n	800432a <UART_SetConfig+0x496>
      default:
        ret = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	76fb      	strb	r3, [r7, #27]
        break;
 8004328:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	2b0f      	cmp	r3, #15
 800432e:	d916      	bls.n	800435e <UART_SetConfig+0x4ca>
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004336:	d212      	bcs.n	800435e <UART_SetConfig+0x4ca>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	b29b      	uxth	r3, r3
 800433c:	f023 030f 	bic.w	r3, r3, #15
 8004340:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	085b      	lsrs	r3, r3, #1
 8004346:	b29b      	uxth	r3, r3
 8004348:	f003 0307 	and.w	r3, r3, #7
 800434c:	b29a      	uxth	r2, r3
 800434e:	89fb      	ldrh	r3, [r7, #14]
 8004350:	4313      	orrs	r3, r2
 8004352:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	89fa      	ldrh	r2, [r7, #14]
 800435a:	60da      	str	r2, [r3, #12]
 800435c:	e074      	b.n	8004448 <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	76fb      	strb	r3, [r7, #27]
 8004362:	e071      	b.n	8004448 <UART_SetConfig+0x5b4>
    }
  }
  else
  {
    switch (clocksource)
 8004364:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004368:	2b08      	cmp	r3, #8
 800436a:	d85c      	bhi.n	8004426 <UART_SetConfig+0x592>
 800436c:	a201      	add	r2, pc, #4	; (adr r2, 8004374 <UART_SetConfig+0x4e0>)
 800436e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004372:	bf00      	nop
 8004374:	08004399 	.word	0x08004399
 8004378:	080043b7 	.word	0x080043b7
 800437c:	080043d5 	.word	0x080043d5
 8004380:	08004427 	.word	0x08004427
 8004384:	080043f1 	.word	0x080043f1
 8004388:	08004427 	.word	0x08004427
 800438c:	08004427 	.word	0x08004427
 8004390:	08004427 	.word	0x08004427
 8004394:	0800440f 	.word	0x0800440f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004398:	f7fe fa38 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 800439c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	085a      	lsrs	r2, r3, #1
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	441a      	add	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80043b4:	e03a      	b.n	800442c <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043b6:	f7fe fa3f 	bl	8002838 <HAL_RCC_GetPCLK2Freq>
 80043ba:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	085a      	lsrs	r2, r3, #1
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	441a      	add	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80043d2:	e02b      	b.n	800442c <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	085b      	lsrs	r3, r3, #1
 80043da:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80043de:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	6852      	ldr	r2, [r2, #4]
 80043e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80043ee:	e01d      	b.n	800442c <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043f0:	f7fe f976 	bl	80026e0 <HAL_RCC_GetSysClockFreq>
 80043f4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	085a      	lsrs	r2, r3, #1
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	441a      	add	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	fbb2 f3f3 	udiv	r3, r2, r3
 8004408:	b29b      	uxth	r3, r3
 800440a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800440c:	e00e      	b.n	800442c <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	085b      	lsrs	r3, r3, #1
 8004414:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004420:	b29b      	uxth	r3, r3
 8004422:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004424:	e002      	b.n	800442c <UART_SetConfig+0x598>
      default:
        ret = HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	76fb      	strb	r3, [r7, #27]
        break;
 800442a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	2b0f      	cmp	r3, #15
 8004430:	d908      	bls.n	8004444 <UART_SetConfig+0x5b0>
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004438:	d204      	bcs.n	8004444 <UART_SetConfig+0x5b0>
    {
      huart->Instance->BRR = usartdiv;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	69fa      	ldr	r2, [r7, #28]
 8004440:	60da      	str	r2, [r3, #12]
 8004442:	e001      	b.n	8004448 <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004454:	7efb      	ldrb	r3, [r7, #27]
}
 8004456:	4618      	mov	r0, r3
 8004458:	3728      	adds	r7, #40	; 0x28
 800445a:	46bd      	mov	sp, r7
 800445c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08004460 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00a      	beq.n	800448a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00a      	beq.n	80044ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	430a      	orrs	r2, r1
 80044aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00a      	beq.n	80044ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d2:	f003 0308 	and.w	r3, r3, #8
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00a      	beq.n	80044f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	f003 0310 	and.w	r3, r3, #16
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00a      	beq.n	8004512 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	f003 0320 	and.w	r3, r3, #32
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00a      	beq.n	8004534 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	430a      	orrs	r2, r1
 8004532:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453c:	2b00      	cmp	r3, #0
 800453e:	d01a      	beq.n	8004576 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	430a      	orrs	r2, r1
 8004554:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800455e:	d10a      	bne.n	8004576 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00a      	beq.n	8004598 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	605a      	str	r2, [r3, #4]
  }
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af02      	add	r7, sp, #8
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80045b2:	f7fd f82d 	bl	8001610 <HAL_GetTick>
 80045b6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	2b08      	cmp	r3, #8
 80045c4:	d10e      	bne.n	80045e4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 f82a 	bl	800462e <UART_WaitOnFlagUntilTimeout>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e020      	b.n	8004626 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0304 	and.w	r3, r3, #4
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d10e      	bne.n	8004610 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f814 	bl	800462e <UART_WaitOnFlagUntilTimeout>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e00a      	b.n	8004626 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2220      	movs	r2, #32
 8004614:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2220      	movs	r2, #32
 800461a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b084      	sub	sp, #16
 8004632:	af00      	add	r7, sp, #0
 8004634:	60f8      	str	r0, [r7, #12]
 8004636:	60b9      	str	r1, [r7, #8]
 8004638:	603b      	str	r3, [r7, #0]
 800463a:	4613      	mov	r3, r2
 800463c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800463e:	e05d      	b.n	80046fc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004646:	d059      	beq.n	80046fc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004648:	f7fc ffe2 	bl	8001610 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	429a      	cmp	r2, r3
 8004656:	d302      	bcc.n	800465e <UART_WaitOnFlagUntilTimeout+0x30>
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d11b      	bne.n	8004696 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800466c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 0201 	bic.w	r2, r2, #1
 800467c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2220      	movs	r2, #32
 8004682:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2220      	movs	r2, #32
 8004688:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e042      	b.n	800471c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d02b      	beq.n	80046fc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	69db      	ldr	r3, [r3, #28]
 80046aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046b2:	d123      	bne.n	80046fc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046bc:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80046cc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0201 	bic.w	r2, r2, #1
 80046dc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2220      	movs	r2, #32
 80046e2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2220      	movs	r2, #32
 80046e8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2220      	movs	r2, #32
 80046ee:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e00f      	b.n	800471c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	69da      	ldr	r2, [r3, #28]
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	4013      	ands	r3, r2
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	429a      	cmp	r2, r3
 800470a:	bf0c      	ite	eq
 800470c:	2301      	moveq	r3, #1
 800470e:	2300      	movne	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	461a      	mov	r2, r3
 8004714:	79fb      	ldrb	r3, [r7, #7]
 8004716:	429a      	cmp	r2, r3
 8004718:	d092      	beq.n	8004640 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <DISP_Reset>:
#include "disp_conf.h"

static void DISP_Reset(void) {
 8004724:	b580      	push	{r7, lr}
 8004726:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(DISP_RST_PIN, GPIO_PIN_SET);
 8004728:	2201      	movs	r2, #1
 800472a:	2101      	movs	r1, #1
 800472c:	480b      	ldr	r0, [pc, #44]	; (800475c <DISP_Reset+0x38>)
 800472e:	f7fd fa31 	bl	8001b94 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8004732:	2064      	movs	r0, #100	; 0x64
 8004734:	f7fc ff78 	bl	8001628 <HAL_Delay>
    HAL_GPIO_WritePin(DISP_RST_PIN, GPIO_PIN_RESET);
 8004738:	2200      	movs	r2, #0
 800473a:	2101      	movs	r1, #1
 800473c:	4807      	ldr	r0, [pc, #28]	; (800475c <DISP_Reset+0x38>)
 800473e:	f7fd fa29 	bl	8001b94 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8004742:	2064      	movs	r0, #100	; 0x64
 8004744:	f7fc ff70 	bl	8001628 <HAL_Delay>
    HAL_GPIO_WritePin(DISP_RST_PIN, GPIO_PIN_SET);
 8004748:	2201      	movs	r2, #1
 800474a:	2101      	movs	r1, #1
 800474c:	4803      	ldr	r0, [pc, #12]	; (800475c <DISP_Reset+0x38>)
 800474e:	f7fd fa21 	bl	8001b94 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8004752:	2064      	movs	r0, #100	; 0x64
 8004754:	f7fc ff68 	bl	8001628 <HAL_Delay>
}
 8004758:	bf00      	nop
 800475a:	bd80      	pop	{r7, pc}
 800475c:	48000400 	.word	0x48000400

08004760 <DISP_SPI_send>:

static void DISP_SPI_send(uint8_t data) {
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	4603      	mov	r3, r0
 8004768:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 800476a:	1df9      	adds	r1, r7, #7
 800476c:	2364      	movs	r3, #100	; 0x64
 800476e:	2201      	movs	r2, #1
 8004770:	4803      	ldr	r0, [pc, #12]	; (8004780 <DISP_SPI_send+0x20>)
 8004772:	f7fe fc53 	bl	800301c <HAL_SPI_Transmit>
}
 8004776:	bf00      	nop
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	200000cc 	.word	0x200000cc

08004784 <DISP_SendCommand>:

void DISP_SendCommand(uint8_t reg) {
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	4603      	mov	r3, r0
 800478c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(DISP_CS_PIN, GPIO_PIN_RESET);
 800478e:	2200      	movs	r2, #0
 8004790:	2110      	movs	r1, #16
 8004792:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004796:	f7fd f9fd 	bl	8001b94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_PIN, GPIO_PIN_RESET);
 800479a:	2200      	movs	r2, #0
 800479c:	2180      	movs	r1, #128	; 0x80
 800479e:	4805      	ldr	r0, [pc, #20]	; (80047b4 <DISP_SendCommand+0x30>)
 80047a0:	f7fd f9f8 	bl	8001b94 <HAL_GPIO_WritePin>
	DISP_SPI_send(reg);
 80047a4:	79fb      	ldrb	r3, [r7, #7]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7ff ffda 	bl	8004760 <DISP_SPI_send>
}
 80047ac:	bf00      	nop
 80047ae:	3708      	adds	r7, #8
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	48000400 	.word	0x48000400

080047b8 <DISP_SendData_8Bit>:

void DISP_SendData_8Bit(uint8_t data) {
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	4603      	mov	r3, r0
 80047c0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISP_CS_PIN, GPIO_PIN_RESET);
 80047c2:	2200      	movs	r2, #0
 80047c4:	2110      	movs	r1, #16
 80047c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80047ca:	f7fd f9e3 	bl	8001b94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_PIN, GPIO_PIN_SET);
 80047ce:	2201      	movs	r2, #1
 80047d0:	2180      	movs	r1, #128	; 0x80
 80047d2:	4808      	ldr	r0, [pc, #32]	; (80047f4 <DISP_SendData_8Bit+0x3c>)
 80047d4:	f7fd f9de 	bl	8001b94 <HAL_GPIO_WritePin>
	DISP_SPI_send(data);
 80047d8:	79fb      	ldrb	r3, [r7, #7]
 80047da:	4618      	mov	r0, r3
 80047dc:	f7ff ffc0 	bl	8004760 <DISP_SPI_send>
    HAL_GPIO_WritePin(DISP_CS_PIN, GPIO_PIN_SET);
 80047e0:	2201      	movs	r2, #1
 80047e2:	2110      	movs	r1, #16
 80047e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80047e8:	f7fd f9d4 	bl	8001b94 <HAL_GPIO_WritePin>
}
 80047ec:	bf00      	nop
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	48000400 	.word	0x48000400

080047f8 <DISP_SendData_16Bit>:

void DISP_SendData_16Bit(uint16_t data) {
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	4603      	mov	r3, r0
 8004800:	80fb      	strh	r3, [r7, #6]

	uint8_t data_h = (uint8_t)(data >> 8);
 8004802:	88fb      	ldrh	r3, [r7, #6]
 8004804:	0a1b      	lsrs	r3, r3, #8
 8004806:	b29b      	uxth	r3, r3
 8004808:	73fb      	strb	r3, [r7, #15]
	uint8_t data_l = (uint8_t) data;
 800480a:	88fb      	ldrh	r3, [r7, #6]
 800480c:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(DISP_CS_PIN, GPIO_PIN_RESET);
 800480e:	2200      	movs	r2, #0
 8004810:	2110      	movs	r1, #16
 8004812:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004816:	f7fd f9bd 	bl	8001b94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_PIN, GPIO_PIN_SET);
 800481a:	2201      	movs	r2, #1
 800481c:	2180      	movs	r1, #128	; 0x80
 800481e:	480a      	ldr	r0, [pc, #40]	; (8004848 <DISP_SendData_16Bit+0x50>)
 8004820:	f7fd f9b8 	bl	8001b94 <HAL_GPIO_WritePin>
	DISP_SPI_send(data_h);
 8004824:	7bfb      	ldrb	r3, [r7, #15]
 8004826:	4618      	mov	r0, r3
 8004828:	f7ff ff9a 	bl	8004760 <DISP_SPI_send>
	DISP_SPI_send(data_l);
 800482c:	7bbb      	ldrb	r3, [r7, #14]
 800482e:	4618      	mov	r0, r3
 8004830:	f7ff ff96 	bl	8004760 <DISP_SPI_send>
    HAL_GPIO_WritePin(DISP_CS_PIN, GPIO_PIN_SET);
 8004834:	2201      	movs	r2, #1
 8004836:	2110      	movs	r1, #16
 8004838:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800483c:	f7fd f9aa 	bl	8001b94 <HAL_GPIO_WritePin>
}
 8004840:	bf00      	nop
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	48000400 	.word	0x48000400

0800484c <DISP_SetAttributes>:

static void DISP_SetAttributes(uint8_t Scan_dir) {
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	4603      	mov	r3, r0
 8004854:	71fb      	strb	r3, [r7, #7]

    //Get the screen scan direction
    uint8_t MemoryAccessReg = 0x08;
 8004856:	2308      	movs	r3, #8
 8004858:	73fb      	strb	r3, [r7, #15]

    //Get GRAM and LCD width and height
    if(Scan_dir == HORIZONTAL) {
 800485a:	79fb      	ldrb	r3, [r7, #7]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d102      	bne.n	8004866 <DISP_SetAttributes+0x1a>
        MemoryAccessReg = 0XC8;
 8004860:	23c8      	movs	r3, #200	; 0xc8
 8004862:	73fb      	strb	r3, [r7, #15]
 8004864:	e001      	b.n	800486a <DISP_SetAttributes+0x1e>
    } else {
        MemoryAccessReg = 0X68;
 8004866:	2368      	movs	r3, #104	; 0x68
 8004868:	73fb      	strb	r3, [r7, #15]
    }

    // Set the read / write scan direction of the frame memory
    DISP_SendCommand(0x36); //MX, MY, RGB mode
 800486a:	2036      	movs	r0, #54	; 0x36
 800486c:	f7ff ff8a 	bl	8004784 <DISP_SendCommand>
    DISP_SendData_8Bit(MemoryAccessReg);	//0x08 set RGB
 8004870:	7bfb      	ldrb	r3, [r7, #15]
 8004872:	4618      	mov	r0, r3
 8004874:	f7ff ffa0 	bl	80047b8 <DISP_SendData_8Bit>
}
 8004878:	bf00      	nop
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <DISP_InitReg>:

static void DISP_InitReg(void) {
 8004880:	b580      	push	{r7, lr}
 8004882:	af00      	add	r7, sp, #0

	DISP_SendCommand(0xEF);
 8004884:	20ef      	movs	r0, #239	; 0xef
 8004886:	f7ff ff7d 	bl	8004784 <DISP_SendCommand>
	DISP_SendCommand(0xEB);
 800488a:	20eb      	movs	r0, #235	; 0xeb
 800488c:	f7ff ff7a 	bl	8004784 <DISP_SendCommand>
	DISP_SendData_8Bit(0x14);
 8004890:	2014      	movs	r0, #20
 8004892:	f7ff ff91 	bl	80047b8 <DISP_SendData_8Bit>

	DISP_SendCommand(0xFE);
 8004896:	20fe      	movs	r0, #254	; 0xfe
 8004898:	f7ff ff74 	bl	8004784 <DISP_SendCommand>
	DISP_SendCommand(0xEF);
 800489c:	20ef      	movs	r0, #239	; 0xef
 800489e:	f7ff ff71 	bl	8004784 <DISP_SendCommand>

	DISP_SendCommand(0xEB);
 80048a2:	20eb      	movs	r0, #235	; 0xeb
 80048a4:	f7ff ff6e 	bl	8004784 <DISP_SendCommand>
	DISP_SendData_8Bit(0x14);
 80048a8:	2014      	movs	r0, #20
 80048aa:	f7ff ff85 	bl	80047b8 <DISP_SendData_8Bit>

	DISP_SendCommand(0x84);
 80048ae:	2084      	movs	r0, #132	; 0x84
 80048b0:	f7ff ff68 	bl	8004784 <DISP_SendCommand>
	DISP_SendData_8Bit(0x40);
 80048b4:	2040      	movs	r0, #64	; 0x40
 80048b6:	f7ff ff7f 	bl	80047b8 <DISP_SendData_8Bit>

	DISP_SendCommand(0x85);
 80048ba:	2085      	movs	r0, #133	; 0x85
 80048bc:	f7ff ff62 	bl	8004784 <DISP_SendCommand>
	DISP_SendData_8Bit(0xFF);
 80048c0:	20ff      	movs	r0, #255	; 0xff
 80048c2:	f7ff ff79 	bl	80047b8 <DISP_SendData_8Bit>

	DISP_SendCommand(0x86);
 80048c6:	2086      	movs	r0, #134	; 0x86
 80048c8:	f7ff ff5c 	bl	8004784 <DISP_SendCommand>
	DISP_SendData_8Bit(0xFF);
 80048cc:	20ff      	movs	r0, #255	; 0xff
 80048ce:	f7ff ff73 	bl	80047b8 <DISP_SendData_8Bit>

	DISP_SendCommand(0x87);
 80048d2:	2087      	movs	r0, #135	; 0x87
 80048d4:	f7ff ff56 	bl	8004784 <DISP_SendCommand>
	DISP_SendData_8Bit(0xFF);
 80048d8:	20ff      	movs	r0, #255	; 0xff
 80048da:	f7ff ff6d 	bl	80047b8 <DISP_SendData_8Bit>

	DISP_SendCommand(0x88);
 80048de:	2088      	movs	r0, #136	; 0x88
 80048e0:	f7ff ff50 	bl	8004784 <DISP_SendCommand>
	DISP_SendData_8Bit(0x0A);
 80048e4:	200a      	movs	r0, #10
 80048e6:	f7ff ff67 	bl	80047b8 <DISP_SendData_8Bit>

	DISP_SendCommand(0x89);
 80048ea:	2089      	movs	r0, #137	; 0x89
 80048ec:	f7ff ff4a 	bl	8004784 <DISP_SendCommand>
	DISP_SendData_8Bit(0x21);
 80048f0:	2021      	movs	r0, #33	; 0x21
 80048f2:	f7ff ff61 	bl	80047b8 <DISP_SendData_8Bit>

	DISP_SendCommand(0x8A);
 80048f6:	208a      	movs	r0, #138	; 0x8a
 80048f8:	f7ff ff44 	bl	8004784 <DISP_SendCommand>
	DISP_SendData_8Bit(0x00);
 80048fc:	2000      	movs	r0, #0
 80048fe:	f7ff ff5b 	bl	80047b8 <DISP_SendData_8Bit>

	DISP_SendCommand(0x8B);
 8004902:	208b      	movs	r0, #139	; 0x8b
 8004904:	f7ff ff3e 	bl	8004784 <DISP_SendCommand>
	DISP_SendData_8Bit(0x80);
 8004908:	2080      	movs	r0, #128	; 0x80
 800490a:	f7ff ff55 	bl	80047b8 <DISP_SendData_8Bit>

	DISP_SendCommand(0x8C);
 800490e:	208c      	movs	r0, #140	; 0x8c
 8004910:	f7ff ff38 	bl	8004784 <DISP_SendCommand>
	DISP_SendData_8Bit(0x01);
 8004914:	2001      	movs	r0, #1
 8004916:	f7ff ff4f 	bl	80047b8 <DISP_SendData_8Bit>

	DISP_SendCommand(0x8D);
 800491a:	208d      	movs	r0, #141	; 0x8d
 800491c:	f7ff ff32 	bl	8004784 <DISP_SendCommand>
	DISP_SendData_8Bit(0x01);
 8004920:	2001      	movs	r0, #1
 8004922:	f7ff ff49 	bl	80047b8 <DISP_SendData_8Bit>

	DISP_SendCommand(0x8E);
 8004926:	208e      	movs	r0, #142	; 0x8e
 8004928:	f7ff ff2c 	bl	8004784 <DISP_SendCommand>
	DISP_SendData_8Bit(0xFF);
 800492c:	20ff      	movs	r0, #255	; 0xff
 800492e:	f7ff ff43 	bl	80047b8 <DISP_SendData_8Bit>

	DISP_SendCommand(0x8F);
 8004932:	208f      	movs	r0, #143	; 0x8f
 8004934:	f7ff ff26 	bl	8004784 <DISP_SendCommand>
	DISP_SendData_8Bit(0xFF);
 8004938:	20ff      	movs	r0, #255	; 0xff
 800493a:	f7ff ff3d 	bl	80047b8 <DISP_SendData_8Bit>


	DISP_SendCommand(0xB6);
 800493e:	20b6      	movs	r0, #182	; 0xb6
 8004940:	f7ff ff20 	bl	8004784 <DISP_SendCommand>
	DISP_SendData_8Bit(0x00);
 8004944:	2000      	movs	r0, #0
 8004946:	f7ff ff37 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x20);
 800494a:	2020      	movs	r0, #32
 800494c:	f7ff ff34 	bl	80047b8 <DISP_SendData_8Bit>

	DISP_SendCommand(0x36);
 8004950:	2036      	movs	r0, #54	; 0x36
 8004952:	f7ff ff17 	bl	8004784 <DISP_SendCommand>
	DISP_SendData_8Bit(0x08);//Set as vertical screen
 8004956:	2008      	movs	r0, #8
 8004958:	f7ff ff2e 	bl	80047b8 <DISP_SendData_8Bit>

	DISP_SendCommand(0x3A);
 800495c:	203a      	movs	r0, #58	; 0x3a
 800495e:	f7ff ff11 	bl	8004784 <DISP_SendCommand>
	DISP_SendData_8Bit(0x05);
 8004962:	2005      	movs	r0, #5
 8004964:	f7ff ff28 	bl	80047b8 <DISP_SendData_8Bit>


	DISP_SendCommand(0x90);
 8004968:	2090      	movs	r0, #144	; 0x90
 800496a:	f7ff ff0b 	bl	8004784 <DISP_SendCommand>
	DISP_SendData_8Bit(0x08);
 800496e:	2008      	movs	r0, #8
 8004970:	f7ff ff22 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x08);
 8004974:	2008      	movs	r0, #8
 8004976:	f7ff ff1f 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x08);
 800497a:	2008      	movs	r0, #8
 800497c:	f7ff ff1c 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x08);
 8004980:	2008      	movs	r0, #8
 8004982:	f7ff ff19 	bl	80047b8 <DISP_SendData_8Bit>

	DISP_SendCommand(0xBD);
 8004986:	20bd      	movs	r0, #189	; 0xbd
 8004988:	f7ff fefc 	bl	8004784 <DISP_SendCommand>
	DISP_SendData_8Bit(0x06);
 800498c:	2006      	movs	r0, #6
 800498e:	f7ff ff13 	bl	80047b8 <DISP_SendData_8Bit>

	DISP_SendCommand(0xBC);
 8004992:	20bc      	movs	r0, #188	; 0xbc
 8004994:	f7ff fef6 	bl	8004784 <DISP_SendCommand>
	DISP_SendData_8Bit(0x00);
 8004998:	2000      	movs	r0, #0
 800499a:	f7ff ff0d 	bl	80047b8 <DISP_SendData_8Bit>

	DISP_SendCommand(0xFF);
 800499e:	20ff      	movs	r0, #255	; 0xff
 80049a0:	f7ff fef0 	bl	8004784 <DISP_SendCommand>
	DISP_SendData_8Bit(0x60);
 80049a4:	2060      	movs	r0, #96	; 0x60
 80049a6:	f7ff ff07 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x01);
 80049aa:	2001      	movs	r0, #1
 80049ac:	f7ff ff04 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x04);
 80049b0:	2004      	movs	r0, #4
 80049b2:	f7ff ff01 	bl	80047b8 <DISP_SendData_8Bit>

	DISP_SendCommand(0xC3);
 80049b6:	20c3      	movs	r0, #195	; 0xc3
 80049b8:	f7ff fee4 	bl	8004784 <DISP_SendCommand>
	DISP_SendData_8Bit(0x13);
 80049bc:	2013      	movs	r0, #19
 80049be:	f7ff fefb 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendCommand(0xC4);
 80049c2:	20c4      	movs	r0, #196	; 0xc4
 80049c4:	f7ff fede 	bl	8004784 <DISP_SendCommand>
	DISP_SendData_8Bit(0x13);
 80049c8:	2013      	movs	r0, #19
 80049ca:	f7ff fef5 	bl	80047b8 <DISP_SendData_8Bit>

	DISP_SendCommand(0xC9);
 80049ce:	20c9      	movs	r0, #201	; 0xc9
 80049d0:	f7ff fed8 	bl	8004784 <DISP_SendCommand>
	DISP_SendData_8Bit(0x22);
 80049d4:	2022      	movs	r0, #34	; 0x22
 80049d6:	f7ff feef 	bl	80047b8 <DISP_SendData_8Bit>

	DISP_SendCommand(0xBE);
 80049da:	20be      	movs	r0, #190	; 0xbe
 80049dc:	f7ff fed2 	bl	8004784 <DISP_SendCommand>
	DISP_SendData_8Bit(0x11);
 80049e0:	2011      	movs	r0, #17
 80049e2:	f7ff fee9 	bl	80047b8 <DISP_SendData_8Bit>

	DISP_SendCommand(0xE1);
 80049e6:	20e1      	movs	r0, #225	; 0xe1
 80049e8:	f7ff fecc 	bl	8004784 <DISP_SendCommand>
	DISP_SendData_8Bit(0x10);
 80049ec:	2010      	movs	r0, #16
 80049ee:	f7ff fee3 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x0E);
 80049f2:	200e      	movs	r0, #14
 80049f4:	f7ff fee0 	bl	80047b8 <DISP_SendData_8Bit>

	DISP_SendCommand(0xDF);
 80049f8:	20df      	movs	r0, #223	; 0xdf
 80049fa:	f7ff fec3 	bl	8004784 <DISP_SendCommand>
	DISP_SendData_8Bit(0x21);
 80049fe:	2021      	movs	r0, #33	; 0x21
 8004a00:	f7ff feda 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x0c);
 8004a04:	200c      	movs	r0, #12
 8004a06:	f7ff fed7 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x02);
 8004a0a:	2002      	movs	r0, #2
 8004a0c:	f7ff fed4 	bl	80047b8 <DISP_SendData_8Bit>

	DISP_SendCommand(0xF0);
 8004a10:	20f0      	movs	r0, #240	; 0xf0
 8004a12:	f7ff feb7 	bl	8004784 <DISP_SendCommand>
	DISP_SendData_8Bit(0x45);
 8004a16:	2045      	movs	r0, #69	; 0x45
 8004a18:	f7ff fece 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x09);
 8004a1c:	2009      	movs	r0, #9
 8004a1e:	f7ff fecb 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x08);
 8004a22:	2008      	movs	r0, #8
 8004a24:	f7ff fec8 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x08);
 8004a28:	2008      	movs	r0, #8
 8004a2a:	f7ff fec5 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x26);
 8004a2e:	2026      	movs	r0, #38	; 0x26
 8004a30:	f7ff fec2 	bl	80047b8 <DISP_SendData_8Bit>
 	DISP_SendData_8Bit(0x2A);
 8004a34:	202a      	movs	r0, #42	; 0x2a
 8004a36:	f7ff febf 	bl	80047b8 <DISP_SendData_8Bit>

 	DISP_SendCommand(0xF1);
 8004a3a:	20f1      	movs	r0, #241	; 0xf1
 8004a3c:	f7ff fea2 	bl	8004784 <DISP_SendCommand>
 	DISP_SendData_8Bit(0x43);
 8004a40:	2043      	movs	r0, #67	; 0x43
 8004a42:	f7ff feb9 	bl	80047b8 <DISP_SendData_8Bit>
 	DISP_SendData_8Bit(0x70);
 8004a46:	2070      	movs	r0, #112	; 0x70
 8004a48:	f7ff feb6 	bl	80047b8 <DISP_SendData_8Bit>
 	DISP_SendData_8Bit(0x72);
 8004a4c:	2072      	movs	r0, #114	; 0x72
 8004a4e:	f7ff feb3 	bl	80047b8 <DISP_SendData_8Bit>
 	DISP_SendData_8Bit(0x36);
 8004a52:	2036      	movs	r0, #54	; 0x36
 8004a54:	f7ff feb0 	bl	80047b8 <DISP_SendData_8Bit>
 	DISP_SendData_8Bit(0x37);
 8004a58:	2037      	movs	r0, #55	; 0x37
 8004a5a:	f7ff fead 	bl	80047b8 <DISP_SendData_8Bit>
 	DISP_SendData_8Bit(0x6F);
 8004a5e:	206f      	movs	r0, #111	; 0x6f
 8004a60:	f7ff feaa 	bl	80047b8 <DISP_SendData_8Bit>


 	DISP_SendCommand(0xF2);
 8004a64:	20f2      	movs	r0, #242	; 0xf2
 8004a66:	f7ff fe8d 	bl	8004784 <DISP_SendCommand>
 	DISP_SendData_8Bit(0x45);
 8004a6a:	2045      	movs	r0, #69	; 0x45
 8004a6c:	f7ff fea4 	bl	80047b8 <DISP_SendData_8Bit>
 	DISP_SendData_8Bit(0x09);
 8004a70:	2009      	movs	r0, #9
 8004a72:	f7ff fea1 	bl	80047b8 <DISP_SendData_8Bit>
 	DISP_SendData_8Bit(0x08);
 8004a76:	2008      	movs	r0, #8
 8004a78:	f7ff fe9e 	bl	80047b8 <DISP_SendData_8Bit>
 	DISP_SendData_8Bit(0x08);
 8004a7c:	2008      	movs	r0, #8
 8004a7e:	f7ff fe9b 	bl	80047b8 <DISP_SendData_8Bit>
 	DISP_SendData_8Bit(0x26);
 8004a82:	2026      	movs	r0, #38	; 0x26
 8004a84:	f7ff fe98 	bl	80047b8 <DISP_SendData_8Bit>
 	DISP_SendData_8Bit(0x2A);
 8004a88:	202a      	movs	r0, #42	; 0x2a
 8004a8a:	f7ff fe95 	bl	80047b8 <DISP_SendData_8Bit>

 	DISP_SendCommand(0xF3);
 8004a8e:	20f3      	movs	r0, #243	; 0xf3
 8004a90:	f7ff fe78 	bl	8004784 <DISP_SendCommand>
 	DISP_SendData_8Bit(0x43);
 8004a94:	2043      	movs	r0, #67	; 0x43
 8004a96:	f7ff fe8f 	bl	80047b8 <DISP_SendData_8Bit>
 	DISP_SendData_8Bit(0x70);
 8004a9a:	2070      	movs	r0, #112	; 0x70
 8004a9c:	f7ff fe8c 	bl	80047b8 <DISP_SendData_8Bit>
 	DISP_SendData_8Bit(0x72);
 8004aa0:	2072      	movs	r0, #114	; 0x72
 8004aa2:	f7ff fe89 	bl	80047b8 <DISP_SendData_8Bit>
 	DISP_SendData_8Bit(0x36);
 8004aa6:	2036      	movs	r0, #54	; 0x36
 8004aa8:	f7ff fe86 	bl	80047b8 <DISP_SendData_8Bit>
 	DISP_SendData_8Bit(0x37);
 8004aac:	2037      	movs	r0, #55	; 0x37
 8004aae:	f7ff fe83 	bl	80047b8 <DISP_SendData_8Bit>
 	DISP_SendData_8Bit(0x6F);
 8004ab2:	206f      	movs	r0, #111	; 0x6f
 8004ab4:	f7ff fe80 	bl	80047b8 <DISP_SendData_8Bit>

	DISP_SendCommand(0xED);
 8004ab8:	20ed      	movs	r0, #237	; 0xed
 8004aba:	f7ff fe63 	bl	8004784 <DISP_SendCommand>
	DISP_SendData_8Bit(0x1B);
 8004abe:	201b      	movs	r0, #27
 8004ac0:	f7ff fe7a 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x0B);
 8004ac4:	200b      	movs	r0, #11
 8004ac6:	f7ff fe77 	bl	80047b8 <DISP_SendData_8Bit>

	DISP_SendCommand(0xAE);
 8004aca:	20ae      	movs	r0, #174	; 0xae
 8004acc:	f7ff fe5a 	bl	8004784 <DISP_SendCommand>
	DISP_SendData_8Bit(0x77);
 8004ad0:	2077      	movs	r0, #119	; 0x77
 8004ad2:	f7ff fe71 	bl	80047b8 <DISP_SendData_8Bit>

	DISP_SendCommand(0xCD);
 8004ad6:	20cd      	movs	r0, #205	; 0xcd
 8004ad8:	f7ff fe54 	bl	8004784 <DISP_SendCommand>
	DISP_SendData_8Bit(0x63);
 8004adc:	2063      	movs	r0, #99	; 0x63
 8004ade:	f7ff fe6b 	bl	80047b8 <DISP_SendData_8Bit>


	DISP_SendCommand(0x70);
 8004ae2:	2070      	movs	r0, #112	; 0x70
 8004ae4:	f7ff fe4e 	bl	8004784 <DISP_SendCommand>
	DISP_SendData_8Bit(0x07);
 8004ae8:	2007      	movs	r0, #7
 8004aea:	f7ff fe65 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x07);
 8004aee:	2007      	movs	r0, #7
 8004af0:	f7ff fe62 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x04);
 8004af4:	2004      	movs	r0, #4
 8004af6:	f7ff fe5f 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x0E);
 8004afa:	200e      	movs	r0, #14
 8004afc:	f7ff fe5c 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x0F);
 8004b00:	200f      	movs	r0, #15
 8004b02:	f7ff fe59 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x09);
 8004b06:	2009      	movs	r0, #9
 8004b08:	f7ff fe56 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x07);
 8004b0c:	2007      	movs	r0, #7
 8004b0e:	f7ff fe53 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x08);
 8004b12:	2008      	movs	r0, #8
 8004b14:	f7ff fe50 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x03);
 8004b18:	2003      	movs	r0, #3
 8004b1a:	f7ff fe4d 	bl	80047b8 <DISP_SendData_8Bit>

	DISP_SendCommand(0xE8);
 8004b1e:	20e8      	movs	r0, #232	; 0xe8
 8004b20:	f7ff fe30 	bl	8004784 <DISP_SendCommand>
	DISP_SendData_8Bit(0x34);
 8004b24:	2034      	movs	r0, #52	; 0x34
 8004b26:	f7ff fe47 	bl	80047b8 <DISP_SendData_8Bit>

	DISP_SendCommand(0x62);
 8004b2a:	2062      	movs	r0, #98	; 0x62
 8004b2c:	f7ff fe2a 	bl	8004784 <DISP_SendCommand>
	DISP_SendData_8Bit(0x18);
 8004b30:	2018      	movs	r0, #24
 8004b32:	f7ff fe41 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x0D);
 8004b36:	200d      	movs	r0, #13
 8004b38:	f7ff fe3e 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x71);
 8004b3c:	2071      	movs	r0, #113	; 0x71
 8004b3e:	f7ff fe3b 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0xED);
 8004b42:	20ed      	movs	r0, #237	; 0xed
 8004b44:	f7ff fe38 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x70);
 8004b48:	2070      	movs	r0, #112	; 0x70
 8004b4a:	f7ff fe35 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x70);
 8004b4e:	2070      	movs	r0, #112	; 0x70
 8004b50:	f7ff fe32 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x18);
 8004b54:	2018      	movs	r0, #24
 8004b56:	f7ff fe2f 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x0F);
 8004b5a:	200f      	movs	r0, #15
 8004b5c:	f7ff fe2c 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x71);
 8004b60:	2071      	movs	r0, #113	; 0x71
 8004b62:	f7ff fe29 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0xEF);
 8004b66:	20ef      	movs	r0, #239	; 0xef
 8004b68:	f7ff fe26 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x70);
 8004b6c:	2070      	movs	r0, #112	; 0x70
 8004b6e:	f7ff fe23 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x70);
 8004b72:	2070      	movs	r0, #112	; 0x70
 8004b74:	f7ff fe20 	bl	80047b8 <DISP_SendData_8Bit>

	DISP_SendCommand(0x63);
 8004b78:	2063      	movs	r0, #99	; 0x63
 8004b7a:	f7ff fe03 	bl	8004784 <DISP_SendCommand>
	DISP_SendData_8Bit(0x18);
 8004b7e:	2018      	movs	r0, #24
 8004b80:	f7ff fe1a 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x11);
 8004b84:	2011      	movs	r0, #17
 8004b86:	f7ff fe17 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x71);
 8004b8a:	2071      	movs	r0, #113	; 0x71
 8004b8c:	f7ff fe14 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0xF1);
 8004b90:	20f1      	movs	r0, #241	; 0xf1
 8004b92:	f7ff fe11 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x70);
 8004b96:	2070      	movs	r0, #112	; 0x70
 8004b98:	f7ff fe0e 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x70);
 8004b9c:	2070      	movs	r0, #112	; 0x70
 8004b9e:	f7ff fe0b 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x18);
 8004ba2:	2018      	movs	r0, #24
 8004ba4:	f7ff fe08 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x13);
 8004ba8:	2013      	movs	r0, #19
 8004baa:	f7ff fe05 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x71);
 8004bae:	2071      	movs	r0, #113	; 0x71
 8004bb0:	f7ff fe02 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0xF3);
 8004bb4:	20f3      	movs	r0, #243	; 0xf3
 8004bb6:	f7ff fdff 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x70);
 8004bba:	2070      	movs	r0, #112	; 0x70
 8004bbc:	f7ff fdfc 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x70);
 8004bc0:	2070      	movs	r0, #112	; 0x70
 8004bc2:	f7ff fdf9 	bl	80047b8 <DISP_SendData_8Bit>

	DISP_SendCommand(0x64);
 8004bc6:	2064      	movs	r0, #100	; 0x64
 8004bc8:	f7ff fddc 	bl	8004784 <DISP_SendCommand>
	DISP_SendData_8Bit(0x28);
 8004bcc:	2028      	movs	r0, #40	; 0x28
 8004bce:	f7ff fdf3 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x29);
 8004bd2:	2029      	movs	r0, #41	; 0x29
 8004bd4:	f7ff fdf0 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0xF1);
 8004bd8:	20f1      	movs	r0, #241	; 0xf1
 8004bda:	f7ff fded 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x01);
 8004bde:	2001      	movs	r0, #1
 8004be0:	f7ff fdea 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0xF1);
 8004be4:	20f1      	movs	r0, #241	; 0xf1
 8004be6:	f7ff fde7 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x00);
 8004bea:	2000      	movs	r0, #0
 8004bec:	f7ff fde4 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x07);
 8004bf0:	2007      	movs	r0, #7
 8004bf2:	f7ff fde1 	bl	80047b8 <DISP_SendData_8Bit>

	DISP_SendCommand(0x66);
 8004bf6:	2066      	movs	r0, #102	; 0x66
 8004bf8:	f7ff fdc4 	bl	8004784 <DISP_SendCommand>
	DISP_SendData_8Bit(0x3C);
 8004bfc:	203c      	movs	r0, #60	; 0x3c
 8004bfe:	f7ff fddb 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x00);
 8004c02:	2000      	movs	r0, #0
 8004c04:	f7ff fdd8 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0xCD);
 8004c08:	20cd      	movs	r0, #205	; 0xcd
 8004c0a:	f7ff fdd5 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x67);
 8004c0e:	2067      	movs	r0, #103	; 0x67
 8004c10:	f7ff fdd2 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x45);
 8004c14:	2045      	movs	r0, #69	; 0x45
 8004c16:	f7ff fdcf 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x45);
 8004c1a:	2045      	movs	r0, #69	; 0x45
 8004c1c:	f7ff fdcc 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x10);
 8004c20:	2010      	movs	r0, #16
 8004c22:	f7ff fdc9 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x00);
 8004c26:	2000      	movs	r0, #0
 8004c28:	f7ff fdc6 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x00);
 8004c2c:	2000      	movs	r0, #0
 8004c2e:	f7ff fdc3 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x00);
 8004c32:	2000      	movs	r0, #0
 8004c34:	f7ff fdc0 	bl	80047b8 <DISP_SendData_8Bit>

	DISP_SendCommand(0x67);
 8004c38:	2067      	movs	r0, #103	; 0x67
 8004c3a:	f7ff fda3 	bl	8004784 <DISP_SendCommand>
	DISP_SendData_8Bit(0x00);
 8004c3e:	2000      	movs	r0, #0
 8004c40:	f7ff fdba 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x3C);
 8004c44:	203c      	movs	r0, #60	; 0x3c
 8004c46:	f7ff fdb7 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x00);
 8004c4a:	2000      	movs	r0, #0
 8004c4c:	f7ff fdb4 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x00);
 8004c50:	2000      	movs	r0, #0
 8004c52:	f7ff fdb1 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x00);
 8004c56:	2000      	movs	r0, #0
 8004c58:	f7ff fdae 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x01);
 8004c5c:	2001      	movs	r0, #1
 8004c5e:	f7ff fdab 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x54);
 8004c62:	2054      	movs	r0, #84	; 0x54
 8004c64:	f7ff fda8 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x10);
 8004c68:	2010      	movs	r0, #16
 8004c6a:	f7ff fda5 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x32);
 8004c6e:	2032      	movs	r0, #50	; 0x32
 8004c70:	f7ff fda2 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x98);
 8004c74:	2098      	movs	r0, #152	; 0x98
 8004c76:	f7ff fd9f 	bl	80047b8 <DISP_SendData_8Bit>

	DISP_SendCommand(0x74);
 8004c7a:	2074      	movs	r0, #116	; 0x74
 8004c7c:	f7ff fd82 	bl	8004784 <DISP_SendCommand>
	DISP_SendData_8Bit(0x10);
 8004c80:	2010      	movs	r0, #16
 8004c82:	f7ff fd99 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x85);
 8004c86:	2085      	movs	r0, #133	; 0x85
 8004c88:	f7ff fd96 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x80);
 8004c8c:	2080      	movs	r0, #128	; 0x80
 8004c8e:	f7ff fd93 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x00);
 8004c92:	2000      	movs	r0, #0
 8004c94:	f7ff fd90 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x00);
 8004c98:	2000      	movs	r0, #0
 8004c9a:	f7ff fd8d 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x4E);
 8004c9e:	204e      	movs	r0, #78	; 0x4e
 8004ca0:	f7ff fd8a 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x00);
 8004ca4:	2000      	movs	r0, #0
 8004ca6:	f7ff fd87 	bl	80047b8 <DISP_SendData_8Bit>

	DISP_SendCommand(0x98);
 8004caa:	2098      	movs	r0, #152	; 0x98
 8004cac:	f7ff fd6a 	bl	8004784 <DISP_SendCommand>
	DISP_SendData_8Bit(0x3e);
 8004cb0:	203e      	movs	r0, #62	; 0x3e
 8004cb2:	f7ff fd81 	bl	80047b8 <DISP_SendData_8Bit>
	DISP_SendData_8Bit(0x07);
 8004cb6:	2007      	movs	r0, #7
 8004cb8:	f7ff fd7e 	bl	80047b8 <DISP_SendData_8Bit>

	DISP_SendCommand(0x35);
 8004cbc:	2035      	movs	r0, #53	; 0x35
 8004cbe:	f7ff fd61 	bl	8004784 <DISP_SendCommand>
	DISP_SendCommand(0x21);
 8004cc2:	2021      	movs	r0, #33	; 0x21
 8004cc4:	f7ff fd5e 	bl	8004784 <DISP_SendCommand>

	DISP_SendCommand(0x11);
 8004cc8:	2011      	movs	r0, #17
 8004cca:	f7ff fd5b 	bl	8004784 <DISP_SendCommand>
	HAL_Delay(120);
 8004cce:	2078      	movs	r0, #120	; 0x78
 8004cd0:	f7fc fcaa 	bl	8001628 <HAL_Delay>
	DISP_SendCommand(0x29);
 8004cd4:	2029      	movs	r0, #41	; 0x29
 8004cd6:	f7ff fd55 	bl	8004784 <DISP_SendCommand>
	HAL_Delay(20);
 8004cda:	2014      	movs	r0, #20
 8004cdc:	f7fc fca4 	bl	8001628 <HAL_Delay>
}
 8004ce0:	bf00      	nop
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <DISP_Init>:

void DISP_Init(uint8_t Scan_dir) {
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	4603      	mov	r3, r0
 8004cec:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(DISP_DC_PIN, GPIO_PIN_SET);
 8004cee:	2201      	movs	r2, #1
 8004cf0:	2180      	movs	r1, #128	; 0x80
 8004cf2:	4812      	ldr	r0, [pc, #72]	; (8004d3c <DISP_Init+0x58>)
 8004cf4:	f7fc ff4e 	bl	8001b94 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DISP_CS_PIN, GPIO_PIN_SET);
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	2110      	movs	r1, #16
 8004cfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d00:	f7fc ff48 	bl	8001b94 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DISP_RST_PIN, GPIO_PIN_SET);
 8004d04:	2201      	movs	r2, #1
 8004d06:	2101      	movs	r1, #1
 8004d08:	480c      	ldr	r0, [pc, #48]	; (8004d3c <DISP_Init+0x58>)
 8004d0a:	f7fc ff43 	bl	8001b94 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DISP_BL_PIN, GPIO_PIN_SET);
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d18:	f7fc ff3c 	bl	8001b94 <HAL_GPIO_WritePin>

    DISP_Reset();
 8004d1c:	f7ff fd02 	bl	8004724 <DISP_Reset>
    DISP_SetAttributes(Scan_dir);
 8004d20:	79fb      	ldrb	r3, [r7, #7]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7ff fd92 	bl	800484c <DISP_SetAttributes>
    DISP_InitReg();
 8004d28:	f7ff fdaa 	bl	8004880 <DISP_InitReg>

    DISP_SetBackLight(1);
 8004d2c:	2001      	movs	r0, #1
 8004d2e:	f000 f88e 	bl	8004e4e <DISP_SetBackLight>
}
 8004d32:	bf00      	nop
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	48000400 	.word	0x48000400

08004d40 <DISP_SetCursor>:
		Xstart 	:   X direction Start coordinates
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void DISP_SetCursor(uint16_t Xstart, uint16_t Ystart, uint16_t Xend, uint16_t Yend) {
 8004d40:	b590      	push	{r4, r7, lr}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	4604      	mov	r4, r0
 8004d48:	4608      	mov	r0, r1
 8004d4a:	4611      	mov	r1, r2
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	4623      	mov	r3, r4
 8004d50:	80fb      	strh	r3, [r7, #6]
 8004d52:	4603      	mov	r3, r0
 8004d54:	80bb      	strh	r3, [r7, #4]
 8004d56:	460b      	mov	r3, r1
 8004d58:	807b      	strh	r3, [r7, #2]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	803b      	strh	r3, [r7, #0]

    //set the X coordinates
    DISP_SendCommand(0x2A);
 8004d5e:	202a      	movs	r0, #42	; 0x2a
 8004d60:	f7ff fd10 	bl	8004784 <DISP_SendCommand>
    DISP_SendData_8Bit(0x00);
 8004d64:	2000      	movs	r0, #0
 8004d66:	f7ff fd27 	bl	80047b8 <DISP_SendData_8Bit>
    DISP_SendData_8Bit(Xstart);
 8004d6a:	88fb      	ldrh	r3, [r7, #6]
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7ff fd22 	bl	80047b8 <DISP_SendData_8Bit>
    DISP_SendData_8Bit(0x00);
 8004d74:	2000      	movs	r0, #0
 8004d76:	f7ff fd1f 	bl	80047b8 <DISP_SendData_8Bit>
    DISP_SendData_8Bit(Xend);
 8004d7a:	887b      	ldrh	r3, [r7, #2]
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7ff fd1a 	bl	80047b8 <DISP_SendData_8Bit>

    //set the Y coordinates
    DISP_SendCommand(0x2B);
 8004d84:	202b      	movs	r0, #43	; 0x2b
 8004d86:	f7ff fcfd 	bl	8004784 <DISP_SendCommand>
    DISP_SendData_8Bit(0x00);
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	f7ff fd14 	bl	80047b8 <DISP_SendData_8Bit>
    DISP_SendData_8Bit(Ystart);
 8004d90:	88bb      	ldrh	r3, [r7, #4]
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7ff fd0f 	bl	80047b8 <DISP_SendData_8Bit>
    DISP_SendData_8Bit(0x00);
 8004d9a:	2000      	movs	r0, #0
 8004d9c:	f7ff fd0c 	bl	80047b8 <DISP_SendData_8Bit>
    DISP_SendData_8Bit(Yend);
 8004da0:	883b      	ldrh	r3, [r7, #0]
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7ff fd07 	bl	80047b8 <DISP_SendData_8Bit>

    DISP_SendCommand(0X2C);
 8004daa:	202c      	movs	r0, #44	; 0x2c
 8004dac:	f7ff fcea 	bl	8004784 <DISP_SendCommand>
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd90      	pop	{r4, r7, pc}

08004db8 <DISP_Clear>:

void DISP_Clear(uint16_t Color) {
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	80fb      	strh	r3, [r7, #6]

    uint16_t i,j;
    DISP_SetCursor(0, 0, DISP_WIDTH-1, DISP_HEIGHT-1);
 8004dc2:	23ef      	movs	r3, #239	; 0xef
 8004dc4:	22ef      	movs	r2, #239	; 0xef
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	2000      	movs	r0, #0
 8004dca:	f7ff ffb9 	bl	8004d40 <DISP_SetCursor>

    HAL_GPIO_WritePin(DISP_DC_PIN, GPIO_PIN_SET);
 8004dce:	2201      	movs	r2, #1
 8004dd0:	2180      	movs	r1, #128	; 0x80
 8004dd2:	4812      	ldr	r0, [pc, #72]	; (8004e1c <DISP_Clear+0x64>)
 8004dd4:	f7fc fede 	bl	8001b94 <HAL_GPIO_WritePin>
	for(i = 0; i < DISP_WIDTH; i++){
 8004dd8:	2300      	movs	r3, #0
 8004dda:	81fb      	strh	r3, [r7, #14]
 8004ddc:	e017      	b.n	8004e0e <DISP_Clear+0x56>
		for(j = 0; j < DISP_HEIGHT; j++){
 8004dde:	2300      	movs	r3, #0
 8004de0:	81bb      	strh	r3, [r7, #12]
 8004de2:	e00e      	b.n	8004e02 <DISP_Clear+0x4a>
			DISP_SPI_send(Color>>8);
 8004de4:	88fb      	ldrh	r3, [r7, #6]
 8004de6:	0a1b      	lsrs	r3, r3, #8
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7ff fcb7 	bl	8004760 <DISP_SPI_send>
			DISP_SPI_send(Color);
 8004df2:	88fb      	ldrh	r3, [r7, #6]
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7ff fcb2 	bl	8004760 <DISP_SPI_send>
		for(j = 0; j < DISP_HEIGHT; j++){
 8004dfc:	89bb      	ldrh	r3, [r7, #12]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	81bb      	strh	r3, [r7, #12]
 8004e02:	89bb      	ldrh	r3, [r7, #12]
 8004e04:	2bef      	cmp	r3, #239	; 0xef
 8004e06:	d9ed      	bls.n	8004de4 <DISP_Clear+0x2c>
	for(i = 0; i < DISP_WIDTH; i++){
 8004e08:	89fb      	ldrh	r3, [r7, #14]
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	81fb      	strh	r3, [r7, #14]
 8004e0e:	89fb      	ldrh	r3, [r7, #14]
 8004e10:	2bef      	cmp	r3, #239	; 0xef
 8004e12:	d9e4      	bls.n	8004dde <DISP_Clear+0x26>
		}
	 }
}
 8004e14:	bf00      	nop
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	48000400 	.word	0x48000400

08004e20 <DISP_DrawPaint>:
	    X	: 	Set the X coordinate
	    Y	:	Set the Y coordinate
	  Color :	Set the color
******************************************************************************/
void DISP_DrawPaint(uint16_t x, uint16_t y, uint16_t Color)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	4603      	mov	r3, r0
 8004e28:	80fb      	strh	r3, [r7, #6]
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	80bb      	strh	r3, [r7, #4]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	807b      	strh	r3, [r7, #2]
	DISP_SetCursor(x,y,x,y);
 8004e32:	88bb      	ldrh	r3, [r7, #4]
 8004e34:	88fa      	ldrh	r2, [r7, #6]
 8004e36:	88b9      	ldrh	r1, [r7, #4]
 8004e38:	88f8      	ldrh	r0, [r7, #6]
 8004e3a:	f7ff ff81 	bl	8004d40 <DISP_SetCursor>
	DISP_SendData_16Bit(Color);
 8004e3e:	887b      	ldrh	r3, [r7, #2]
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7ff fcd9 	bl	80047f8 <DISP_SendData_16Bit>
}
 8004e46:	bf00      	nop
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <DISP_SetBackLight>:


void DISP_SetBackLight(uint8_t Value) {
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b082      	sub	sp, #8
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	4603      	mov	r3, r0
 8004e56:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(DISP_BL_PIN, Value);
 8004e58:	79fb      	ldrb	r3, [r7, #7]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004e60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e64:	f7fc fe96 	bl	8001b94 <HAL_GPIO_WritePin>
}
 8004e68:	bf00      	nop
 8004e6a:	3708      	adds	r7, #8
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <DISP_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void DISP_NewImage(uint16_t Width, uint16_t Height, uint16_t Rotate, uint16_t Color)
{
 8004e70:	b490      	push	{r4, r7}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	4604      	mov	r4, r0
 8004e78:	4608      	mov	r0, r1
 8004e7a:	4611      	mov	r1, r2
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	4623      	mov	r3, r4
 8004e80:	80fb      	strh	r3, [r7, #6]
 8004e82:	4603      	mov	r3, r0
 8004e84:	80bb      	strh	r3, [r7, #4]
 8004e86:	460b      	mov	r3, r1
 8004e88:	807b      	strh	r3, [r7, #2]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 8004e8e:	4a16      	ldr	r2, [pc, #88]	; (8004ee8 <DISP_NewImage+0x78>)
 8004e90:	88fb      	ldrh	r3, [r7, #6]
 8004e92:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8004e94:	4a14      	ldr	r2, [pc, #80]	; (8004ee8 <DISP_NewImage+0x78>)
 8004e96:	88bb      	ldrh	r3, [r7, #4]
 8004e98:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8004e9a:	4a13      	ldr	r2, [pc, #76]	; (8004ee8 <DISP_NewImage+0x78>)
 8004e9c:	883b      	ldrh	r3, [r7, #0]
 8004e9e:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 8004ea0:	4a11      	ldr	r2, [pc, #68]	; (8004ee8 <DISP_NewImage+0x78>)
 8004ea2:	88fb      	ldrh	r3, [r7, #6]
 8004ea4:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;
 8004ea6:	4a10      	ldr	r2, [pc, #64]	; (8004ee8 <DISP_NewImage+0x78>)
 8004ea8:	88bb      	ldrh	r3, [r7, #4]
 8004eaa:	8293      	strh	r3, [r2, #20]
   
    Paint.Rotate = Rotate;
 8004eac:	4a0e      	ldr	r2, [pc, #56]	; (8004ee8 <DISP_NewImage+0x78>)
 8004eae:	887b      	ldrh	r3, [r7, #2]
 8004eb0:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8004eb2:	4b0d      	ldr	r3, [pc, #52]	; (8004ee8 <DISP_NewImage+0x78>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8004eb8:	887b      	ldrh	r3, [r7, #2]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d002      	beq.n	8004ec4 <DISP_NewImage+0x54>
 8004ebe:	887b      	ldrh	r3, [r7, #2]
 8004ec0:	2bb4      	cmp	r3, #180	; 0xb4
 8004ec2:	d106      	bne.n	8004ed2 <DISP_NewImage+0x62>
        Paint.Width = Width;
 8004ec4:	4a08      	ldr	r2, [pc, #32]	; (8004ee8 <DISP_NewImage+0x78>)
 8004ec6:	88fb      	ldrh	r3, [r7, #6]
 8004ec8:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8004eca:	4a07      	ldr	r2, [pc, #28]	; (8004ee8 <DISP_NewImage+0x78>)
 8004ecc:	88bb      	ldrh	r3, [r7, #4]
 8004ece:	80d3      	strh	r3, [r2, #6]
 8004ed0:	e005      	b.n	8004ede <DISP_NewImage+0x6e>
    } else {
        Paint.Width = Height;
 8004ed2:	4a05      	ldr	r2, [pc, #20]	; (8004ee8 <DISP_NewImage+0x78>)
 8004ed4:	88bb      	ldrh	r3, [r7, #4]
 8004ed6:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8004ed8:	4a03      	ldr	r2, [pc, #12]	; (8004ee8 <DISP_NewImage+0x78>)
 8004eda:	88fb      	ldrh	r3, [r7, #6]
 8004edc:	80d3      	strh	r3, [r2, #6]
    }
}
 8004ede:	bf00      	nop
 8004ee0:	3708      	adds	r7, #8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bc90      	pop	{r4, r7}
 8004ee6:	4770      	bx	lr
 8004ee8:	20000290 	.word	0x20000290

08004eec <DISP_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void DISP_SetPixel(uint16_t Xpoint, uint16_t Ypoint, uint16_t Color)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	80fb      	strh	r3, [r7, #6]
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	80bb      	strh	r3, [r7, #4]
 8004efa:	4613      	mov	r3, r2
 8004efc:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8004efe:	4b4e      	ldr	r3, [pc, #312]	; (8005038 <DISP_SetPixel+0x14c>)
 8004f00:	889b      	ldrh	r3, [r3, #4]
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	88fa      	ldrh	r2, [r7, #6]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d805      	bhi.n	8004f16 <DISP_SetPixel+0x2a>
 8004f0a:	4b4b      	ldr	r3, [pc, #300]	; (8005038 <DISP_SetPixel+0x14c>)
 8004f0c:	88db      	ldrh	r3, [r3, #6]
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	88ba      	ldrh	r2, [r7, #4]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d903      	bls.n	8004f1e <DISP_SetPixel+0x32>
        Debug("Exceeding display boundaries\r\n");
 8004f16:	4849      	ldr	r0, [pc, #292]	; (800503c <DISP_SetPixel+0x150>)
 8004f18:	f000 fc9a 	bl	8005850 <puts>
        return;
 8004f1c:	e088      	b.n	8005030 <DISP_SetPixel+0x144>
    }      
    uint16_t X, Y;

    switch(Paint.Rotate) {
 8004f1e:	4b46      	ldr	r3, [pc, #280]	; (8005038 <DISP_SetPixel+0x14c>)
 8004f20:	89db      	ldrh	r3, [r3, #14]
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	2b5a      	cmp	r3, #90	; 0x5a
 8004f26:	d00f      	beq.n	8004f48 <DISP_SetPixel+0x5c>
 8004f28:	2b5a      	cmp	r3, #90	; 0x5a
 8004f2a:	dc02      	bgt.n	8004f32 <DISP_SetPixel+0x46>
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d006      	beq.n	8004f3e <DISP_SetPixel+0x52>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 8004f30:	e07e      	b.n	8005030 <DISP_SetPixel+0x144>
    switch(Paint.Rotate) {
 8004f32:	2bb4      	cmp	r3, #180	; 0xb4
 8004f34:	d013      	beq.n	8004f5e <DISP_SetPixel+0x72>
 8004f36:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8004f3a:	d021      	beq.n	8004f80 <DISP_SetPixel+0x94>
        return;
 8004f3c:	e078      	b.n	8005030 <DISP_SetPixel+0x144>
        X = Xpoint;
 8004f3e:	88fb      	ldrh	r3, [r7, #6]
 8004f40:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 8004f42:	88bb      	ldrh	r3, [r7, #4]
 8004f44:	81bb      	strh	r3, [r7, #12]
        break;
 8004f46:	e026      	b.n	8004f96 <DISP_SetPixel+0xaa>
        X = Paint.WidthMemory - Ypoint - 1;
 8004f48:	4b3b      	ldr	r3, [pc, #236]	; (8005038 <DISP_SetPixel+0x14c>)
 8004f4a:	891b      	ldrh	r3, [r3, #8]
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	88bb      	ldrh	r3, [r7, #4]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	3b01      	subs	r3, #1
 8004f56:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 8004f58:	88fb      	ldrh	r3, [r7, #6]
 8004f5a:	81bb      	strh	r3, [r7, #12]
        break;
 8004f5c:	e01b      	b.n	8004f96 <DISP_SetPixel+0xaa>
        X = Paint.WidthMemory - Xpoint - 1;
 8004f5e:	4b36      	ldr	r3, [pc, #216]	; (8005038 <DISP_SetPixel+0x14c>)
 8004f60:	891b      	ldrh	r3, [r3, #8]
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	88fb      	ldrh	r3, [r7, #6]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 8004f6e:	4b32      	ldr	r3, [pc, #200]	; (8005038 <DISP_SetPixel+0x14c>)
 8004f70:	895b      	ldrh	r3, [r3, #10]
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	88bb      	ldrh	r3, [r7, #4]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	81bb      	strh	r3, [r7, #12]
        break;
 8004f7e:	e00a      	b.n	8004f96 <DISP_SetPixel+0xaa>
        X = Ypoint;
 8004f80:	88bb      	ldrh	r3, [r7, #4]
 8004f82:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 8004f84:	4b2c      	ldr	r3, [pc, #176]	; (8005038 <DISP_SetPixel+0x14c>)
 8004f86:	895b      	ldrh	r3, [r3, #10]
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	88fb      	ldrh	r3, [r7, #6]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	3b01      	subs	r3, #1
 8004f92:	81bb      	strh	r3, [r7, #12]
        break;
 8004f94:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8004f96:	4b28      	ldr	r3, [pc, #160]	; (8005038 <DISP_SetPixel+0x14c>)
 8004f98:	8a1b      	ldrh	r3, [r3, #16]
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	2b03      	cmp	r3, #3
 8004f9e:	d846      	bhi.n	800502e <DISP_SetPixel+0x142>
 8004fa0:	a201      	add	r2, pc, #4	; (adr r2, 8004fa8 <DISP_SetPixel+0xbc>)
 8004fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa6:	bf00      	nop
 8004fa8:	08004fff 	.word	0x08004fff
 8004fac:	08004fb9 	.word	0x08004fb9
 8004fb0:	08004fcb 	.word	0x08004fcb
 8004fb4:	08004fdd 	.word	0x08004fdd
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8004fb8:	4b1f      	ldr	r3, [pc, #124]	; (8005038 <DISP_SetPixel+0x14c>)
 8004fba:	891b      	ldrh	r3, [r3, #8]
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	89fb      	ldrh	r3, [r7, #14]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	81fb      	strh	r3, [r7, #14]
        break;
 8004fc8:	e01a      	b.n	8005000 <DISP_SetPixel+0x114>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8004fca:	4b1b      	ldr	r3, [pc, #108]	; (8005038 <DISP_SetPixel+0x14c>)
 8004fcc:	895b      	ldrh	r3, [r3, #10]
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	89bb      	ldrh	r3, [r7, #12]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	81bb      	strh	r3, [r7, #12]
        break;
 8004fda:	e011      	b.n	8005000 <DISP_SetPixel+0x114>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8004fdc:	4b16      	ldr	r3, [pc, #88]	; (8005038 <DISP_SetPixel+0x14c>)
 8004fde:	891b      	ldrh	r3, [r3, #8]
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	89fb      	ldrh	r3, [r7, #14]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 8004fec:	4b12      	ldr	r3, [pc, #72]	; (8005038 <DISP_SetPixel+0x14c>)
 8004fee:	895b      	ldrh	r3, [r3, #10]
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	89bb      	ldrh	r3, [r7, #12]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	81bb      	strh	r3, [r7, #12]
        break;
 8004ffc:	e000      	b.n	8005000 <DISP_SetPixel+0x114>
        break;
 8004ffe:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8005000:	4b0d      	ldr	r3, [pc, #52]	; (8005038 <DISP_SetPixel+0x14c>)
 8005002:	891b      	ldrh	r3, [r3, #8]
 8005004:	b29b      	uxth	r3, r3
 8005006:	89fa      	ldrh	r2, [r7, #14]
 8005008:	429a      	cmp	r2, r3
 800500a:	d805      	bhi.n	8005018 <DISP_SetPixel+0x12c>
 800500c:	4b0a      	ldr	r3, [pc, #40]	; (8005038 <DISP_SetPixel+0x14c>)
 800500e:	895b      	ldrh	r3, [r3, #10]
 8005010:	b29b      	uxth	r3, r3
 8005012:	89ba      	ldrh	r2, [r7, #12]
 8005014:	429a      	cmp	r2, r3
 8005016:	d903      	bls.n	8005020 <DISP_SetPixel+0x134>
        Debug("Exceeding display boundaries\r\n");
 8005018:	4808      	ldr	r0, [pc, #32]	; (800503c <DISP_SetPixel+0x150>)
 800501a:	f000 fc19 	bl	8005850 <puts>
        return;
 800501e:	e007      	b.n	8005030 <DISP_SetPixel+0x144>
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		//DISPLAY(X,Y, Color);
    DISP_DrawPaint(X, Y, Color);
 8005020:	887a      	ldrh	r2, [r7, #2]
 8005022:	89b9      	ldrh	r1, [r7, #12]
 8005024:	89fb      	ldrh	r3, [r7, #14]
 8005026:	4618      	mov	r0, r3
 8005028:	f7ff fefa 	bl	8004e20 <DISP_DrawPaint>
 800502c:	e000      	b.n	8005030 <DISP_SetPixel+0x144>
        return;
 800502e:	bf00      	nop
}
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	20000290 	.word	0x20000290
 800503c:	0800624c 	.word	0x0800624c

08005040 <DISP_DrawPoint>:
    Color		:   Set color
    Dot_Pixel	:	point size
******************************************************************************/
void DISP_DrawPoint( uint16_t Xpoint,       uint16_t Ypoint, uint16_t Color,
                      DOT_PIXEL Dot_Pixel,DOT_STYLE Dot_FillWay)
{
 8005040:	b590      	push	{r4, r7, lr}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	4604      	mov	r4, r0
 8005048:	4608      	mov	r0, r1
 800504a:	4611      	mov	r1, r2
 800504c:	461a      	mov	r2, r3
 800504e:	4623      	mov	r3, r4
 8005050:	80fb      	strh	r3, [r7, #6]
 8005052:	4603      	mov	r3, r0
 8005054:	80bb      	strh	r3, [r7, #4]
 8005056:	460b      	mov	r3, r1
 8005058:	807b      	strh	r3, [r7, #2]
 800505a:	4613      	mov	r3, r2
 800505c:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800505e:	4b44      	ldr	r3, [pc, #272]	; (8005170 <DISP_DrawPoint+0x130>)
 8005060:	889b      	ldrh	r3, [r3, #4]
 8005062:	b29b      	uxth	r3, r3
 8005064:	88fa      	ldrh	r2, [r7, #6]
 8005066:	429a      	cmp	r2, r3
 8005068:	d805      	bhi.n	8005076 <DISP_DrawPoint+0x36>
 800506a:	4b41      	ldr	r3, [pc, #260]	; (8005170 <DISP_DrawPoint+0x130>)
 800506c:	88db      	ldrh	r3, [r3, #6]
 800506e:	b29b      	uxth	r3, r3
 8005070:	88ba      	ldrh	r2, [r7, #4]
 8005072:	429a      	cmp	r2, r3
 8005074:	d903      	bls.n	800507e <DISP_DrawPoint+0x3e>
        Debug("DISP_DrawPoint Input exceeds the normal display range\r\n");
 8005076:	483f      	ldr	r0, [pc, #252]	; (8005174 <DISP_DrawPoint+0x134>)
 8005078:	f000 fbea 	bl	8005850 <puts>
        return;
 800507c:	e074      	b.n	8005168 <DISP_DrawPoint+0x128>
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_FillWay == DOT_FILL_AROUND) {
 800507e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d144      	bne.n	8005110 <DISP_DrawPoint+0xd0>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 8005086:	2300      	movs	r3, #0
 8005088:	81fb      	strh	r3, [r7, #14]
 800508a:	e039      	b.n	8005100 <DISP_DrawPoint+0xc0>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 800508c:	2300      	movs	r3, #0
 800508e:	81bb      	strh	r3, [r7, #12]
 8005090:	e029      	b.n	80050e6 <DISP_DrawPoint+0xa6>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 8005092:	88fa      	ldrh	r2, [r7, #6]
 8005094:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005098:	441a      	add	r2, r3
 800509a:	787b      	ldrb	r3, [r7, #1]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	db28      	blt.n	80050f4 <DISP_DrawPoint+0xb4>
 80050a2:	88ba      	ldrh	r2, [r7, #4]
 80050a4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80050a8:	441a      	add	r2, r3
 80050aa:	787b      	ldrb	r3, [r7, #1]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	db20      	blt.n	80050f4 <DISP_DrawPoint+0xb4>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                DISP_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 80050b2:	89fa      	ldrh	r2, [r7, #14]
 80050b4:	88fb      	ldrh	r3, [r7, #6]
 80050b6:	4413      	add	r3, r2
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	787b      	ldrb	r3, [r7, #1]
 80050bc:	b29b      	uxth	r3, r3
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	b298      	uxth	r0, r3
 80050c2:	89ba      	ldrh	r2, [r7, #12]
 80050c4:	88bb      	ldrh	r3, [r7, #4]
 80050c6:	4413      	add	r3, r2
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	787b      	ldrb	r3, [r7, #1]
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	887a      	ldrh	r2, [r7, #2]
 80050d4:	4619      	mov	r1, r3
 80050d6:	f7ff ff09 	bl	8004eec <DISP_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 80050da:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80050de:	b29b      	uxth	r3, r3
 80050e0:	3301      	adds	r3, #1
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	81bb      	strh	r3, [r7, #12]
 80050e6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80050ea:	787b      	ldrb	r3, [r7, #1]
 80050ec:	005b      	lsls	r3, r3, #1
 80050ee:	3b01      	subs	r3, #1
 80050f0:	429a      	cmp	r2, r3
 80050f2:	dbce      	blt.n	8005092 <DISP_DrawPoint+0x52>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 80050f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	3301      	adds	r3, #1
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	81fb      	strh	r3, [r7, #14]
 8005100:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005104:	787b      	ldrb	r3, [r7, #1]
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	3b01      	subs	r3, #1
 800510a:	429a      	cmp	r2, r3
 800510c:	dbbe      	blt.n	800508c <DISP_DrawPoint+0x4c>
 800510e:	e02b      	b.n	8005168 <DISP_DrawPoint+0x128>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8005110:	2300      	movs	r3, #0
 8005112:	81fb      	strh	r3, [r7, #14]
 8005114:	e023      	b.n	800515e <DISP_DrawPoint+0x11e>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8005116:	2300      	movs	r3, #0
 8005118:	81bb      	strh	r3, [r7, #12]
 800511a:	e015      	b.n	8005148 <DISP_DrawPoint+0x108>
                DISP_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 800511c:	89fa      	ldrh	r2, [r7, #14]
 800511e:	88fb      	ldrh	r3, [r7, #6]
 8005120:	4413      	add	r3, r2
 8005122:	b29b      	uxth	r3, r3
 8005124:	3b01      	subs	r3, #1
 8005126:	b298      	uxth	r0, r3
 8005128:	89ba      	ldrh	r2, [r7, #12]
 800512a:	88bb      	ldrh	r3, [r7, #4]
 800512c:	4413      	add	r3, r2
 800512e:	b29b      	uxth	r3, r3
 8005130:	3b01      	subs	r3, #1
 8005132:	b29b      	uxth	r3, r3
 8005134:	887a      	ldrh	r2, [r7, #2]
 8005136:	4619      	mov	r1, r3
 8005138:	f7ff fed8 	bl	8004eec <DISP_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 800513c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005140:	b29b      	uxth	r3, r3
 8005142:	3301      	adds	r3, #1
 8005144:	b29b      	uxth	r3, r3
 8005146:	81bb      	strh	r3, [r7, #12]
 8005148:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800514c:	787b      	ldrb	r3, [r7, #1]
 800514e:	429a      	cmp	r2, r3
 8005150:	dbe4      	blt.n	800511c <DISP_DrawPoint+0xdc>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8005152:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005156:	b29b      	uxth	r3, r3
 8005158:	3301      	adds	r3, #1
 800515a:	b29b      	uxth	r3, r3
 800515c:	81fb      	strh	r3, [r7, #14]
 800515e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005162:	787b      	ldrb	r3, [r7, #1]
 8005164:	429a      	cmp	r2, r3
 8005166:	dbd6      	blt.n	8005116 <DISP_DrawPoint+0xd6>
            }
        }
    }
}
 8005168:	3714      	adds	r7, #20
 800516a:	46bd      	mov	sp, r7
 800516c:	bd90      	pop	{r4, r7, pc}
 800516e:	bf00      	nop
 8005170:	20000290 	.word	0x20000290
 8005174:	08006274 	.word	0x08006274

08005178 <DISP_DrawLine>:
    Yend   ：End point Ypoint coordinate
    Color  ：The color of the line segment
******************************************************************************/
void DISP_DrawLine(uint16_t Xstart, uint16_t Ystart, uint16_t Xend, uint16_t Yend,
                    uint16_t Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 8005178:	b590      	push	{r4, r7, lr}
 800517a:	b08d      	sub	sp, #52	; 0x34
 800517c:	af02      	add	r7, sp, #8
 800517e:	4604      	mov	r4, r0
 8005180:	4608      	mov	r0, r1
 8005182:	4611      	mov	r1, r2
 8005184:	461a      	mov	r2, r3
 8005186:	4623      	mov	r3, r4
 8005188:	80fb      	strh	r3, [r7, #6]
 800518a:	4603      	mov	r3, r0
 800518c:	80bb      	strh	r3, [r7, #4]
 800518e:	460b      	mov	r3, r1
 8005190:	807b      	strh	r3, [r7, #2]
 8005192:	4613      	mov	r3, r2
 8005194:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8005196:	4b4e      	ldr	r3, [pc, #312]	; (80052d0 <DISP_DrawLine+0x158>)
 8005198:	889b      	ldrh	r3, [r3, #4]
 800519a:	b29b      	uxth	r3, r3
 800519c:	88fa      	ldrh	r2, [r7, #6]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d811      	bhi.n	80051c6 <DISP_DrawLine+0x4e>
 80051a2:	4b4b      	ldr	r3, [pc, #300]	; (80052d0 <DISP_DrawLine+0x158>)
 80051a4:	88db      	ldrh	r3, [r3, #6]
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	88ba      	ldrh	r2, [r7, #4]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d80b      	bhi.n	80051c6 <DISP_DrawLine+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 80051ae:	4b48      	ldr	r3, [pc, #288]	; (80052d0 <DISP_DrawLine+0x158>)
 80051b0:	889b      	ldrh	r3, [r3, #4]
 80051b2:	b29b      	uxth	r3, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 80051b4:	887a      	ldrh	r2, [r7, #2]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d805      	bhi.n	80051c6 <DISP_DrawLine+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 80051ba:	4b45      	ldr	r3, [pc, #276]	; (80052d0 <DISP_DrawLine+0x158>)
 80051bc:	88db      	ldrh	r3, [r3, #6]
 80051be:	b29b      	uxth	r3, r3
 80051c0:	883a      	ldrh	r2, [r7, #0]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d903      	bls.n	80051ce <DISP_DrawLine+0x56>
        Debug("DISP_DrawLine Input exceeds the normal display range\r\n");
 80051c6:	4843      	ldr	r0, [pc, #268]	; (80052d4 <DISP_DrawLine+0x15c>)
 80051c8:	f000 fb42 	bl	8005850 <puts>
        return;
 80051cc:	e07d      	b.n	80052ca <DISP_DrawLine+0x152>
    }

    uint16_t Xpoint = Xstart;
 80051ce:	88fb      	ldrh	r3, [r7, #6]
 80051d0:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint16_t Ypoint = Ystart;
 80051d2:	88bb      	ldrh	r3, [r7, #4]
 80051d4:	84bb      	strh	r3, [r7, #36]	; 0x24
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 80051d6:	887a      	ldrh	r2, [r7, #2]
 80051d8:	88fb      	ldrh	r3, [r7, #6]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	2b00      	cmp	r3, #0
 80051de:	bfb8      	it	lt
 80051e0:	425b      	neglt	r3, r3
 80051e2:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 80051e4:	883a      	ldrh	r2, [r7, #0]
 80051e6:	88bb      	ldrh	r3, [r7, #4]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	bfb8      	it	lt
 80051ee:	425b      	neglt	r3, r3
 80051f0:	425b      	negs	r3, r3
 80051f2:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 80051f4:	88fa      	ldrh	r2, [r7, #6]
 80051f6:	887b      	ldrh	r3, [r7, #2]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d201      	bcs.n	8005200 <DISP_DrawLine+0x88>
 80051fc:	2301      	movs	r3, #1
 80051fe:	e001      	b.n	8005204 <DISP_DrawLine+0x8c>
 8005200:	f04f 33ff 	mov.w	r3, #4294967295
 8005204:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 8005206:	88ba      	ldrh	r2, [r7, #4]
 8005208:	883b      	ldrh	r3, [r7, #0]
 800520a:	429a      	cmp	r2, r3
 800520c:	d201      	bcs.n	8005212 <DISP_DrawLine+0x9a>
 800520e:	2301      	movs	r3, #1
 8005210:	e001      	b.n	8005216 <DISP_DrawLine+0x9e>
 8005212:	f04f 33ff 	mov.w	r3, #4294967295
 8005216:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	4413      	add	r3, r2
 800521e:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 8005220:	2300      	movs	r3, #0
 8005222:	77fb      	strb	r3, [r7, #31]

    for (;;) {
        Dotted_Len++;
 8005224:	7ffb      	ldrb	r3, [r7, #31]
 8005226:	3301      	adds	r3, #1
 8005228:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 800522a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800522e:	2b01      	cmp	r3, #1
 8005230:	d119      	bne.n	8005266 <DISP_DrawLine+0xee>
 8005232:	7ffa      	ldrb	r2, [r7, #31]
 8005234:	4b28      	ldr	r3, [pc, #160]	; (80052d8 <DISP_DrawLine+0x160>)
 8005236:	fba3 1302 	umull	r1, r3, r3, r2
 800523a:	0859      	lsrs	r1, r3, #1
 800523c:	460b      	mov	r3, r1
 800523e:	005b      	lsls	r3, r3, #1
 8005240:	440b      	add	r3, r1
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10d      	bne.n	8005266 <DISP_DrawLine+0xee>
            //Debug("LINE_DOTTED\r\n");
            DISP_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 800524a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800524e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8005250:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8005252:	2301      	movs	r3, #1
 8005254:	9300      	str	r3, [sp, #0]
 8005256:	4613      	mov	r3, r2
 8005258:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800525c:	f7ff fef0 	bl	8005040 <DISP_DrawPoint>
            Dotted_Len = 0;
 8005260:	2300      	movs	r3, #0
 8005262:	77fb      	strb	r3, [r7, #31]
 8005264:	e009      	b.n	800527a <DISP_DrawLine+0x102>
        } else {
            DISP_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 8005266:	f897 403c 	ldrb.w	r4, [r7, #60]	; 0x3c
 800526a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800526c:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800526e:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8005270:	2301      	movs	r3, #1
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	4623      	mov	r3, r4
 8005276:	f7ff fee3 	bl	8005040 <DISP_DrawPoint>
        }
        if (2 * Esp >= dy) {
 800527a:	6a3b      	ldr	r3, [r7, #32]
 800527c:	005b      	lsls	r3, r3, #1
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	429a      	cmp	r2, r3
 8005282:	dc0c      	bgt.n	800529e <DISP_DrawLine+0x126>
            if (Xpoint == Xend)
 8005284:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005286:	887b      	ldrh	r3, [r7, #2]
 8005288:	429a      	cmp	r2, r3
 800528a:	d01b      	beq.n	80052c4 <DISP_DrawLine+0x14c>
                break;
            Esp += dy;
 800528c:	6a3a      	ldr	r2, [r7, #32]
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	4413      	add	r3, r2
 8005292:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	b29a      	uxth	r2, r3
 8005298:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800529a:	4413      	add	r3, r2
 800529c:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if (2 * Esp <= dx) {
 800529e:	6a3b      	ldr	r3, [r7, #32]
 80052a0:	005b      	lsls	r3, r3, #1
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	dbbd      	blt.n	8005224 <DISP_DrawLine+0xac>
            if (Ypoint == Yend)
 80052a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80052aa:	883b      	ldrh	r3, [r7, #0]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d00b      	beq.n	80052c8 <DISP_DrawLine+0x150>
                break;
            Esp += dx;
 80052b0:	6a3a      	ldr	r2, [r7, #32]
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	4413      	add	r3, r2
 80052b6:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80052be:	4413      	add	r3, r2
 80052c0:	84bb      	strh	r3, [r7, #36]	; 0x24
        Dotted_Len++;
 80052c2:	e7af      	b.n	8005224 <DISP_DrawLine+0xac>
                break;
 80052c4:	bf00      	nop
 80052c6:	e000      	b.n	80052ca <DISP_DrawLine+0x152>
                break;
 80052c8:	bf00      	nop
        }
    }
}
 80052ca:	372c      	adds	r7, #44	; 0x2c
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd90      	pop	{r4, r7, pc}
 80052d0:	20000290 	.word	0x20000290
 80052d4:	080062b4 	.word	0x080062b4
 80052d8:	aaaaaaab 	.word	0xaaaaaaab

080052dc <DISP_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void DISP_DrawChar(uint16_t Xpoint, uint16_t Ypoint, const char Acsii_Char,
                    sFONT* Font, uint16_t Color_Background, uint16_t Color_Foreground)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b088      	sub	sp, #32
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	607b      	str	r3, [r7, #4]
 80052e4:	4603      	mov	r3, r0
 80052e6:	81fb      	strh	r3, [r7, #14]
 80052e8:	460b      	mov	r3, r1
 80052ea:	81bb      	strh	r3, [r7, #12]
 80052ec:	4613      	mov	r3, r2
 80052ee:	72fb      	strb	r3, [r7, #11]
    uint16_t Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 80052f0:	4b4e      	ldr	r3, [pc, #312]	; (800542c <DISP_DrawChar+0x150>)
 80052f2:	889b      	ldrh	r3, [r3, #4]
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	89fa      	ldrh	r2, [r7, #14]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d805      	bhi.n	8005308 <DISP_DrawChar+0x2c>
 80052fc:	4b4b      	ldr	r3, [pc, #300]	; (800542c <DISP_DrawChar+0x150>)
 80052fe:	88db      	ldrh	r3, [r3, #6]
 8005300:	b29b      	uxth	r3, r3
 8005302:	89ba      	ldrh	r2, [r7, #12]
 8005304:	429a      	cmp	r2, r3
 8005306:	d903      	bls.n	8005310 <DISP_DrawChar+0x34>
        Debug("DISP_DrawChar Input exceeds the normal display range\r\n");
 8005308:	4849      	ldr	r0, [pc, #292]	; (8005430 <DISP_DrawChar+0x154>)
 800530a:	f000 faa1 	bl	8005850 <puts>
        return;
 800530e:	e089      	b.n	8005424 <DISP_DrawChar+0x148>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8005310:	7afb      	ldrb	r3, [r7, #11]
 8005312:	3b20      	subs	r3, #32
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	88d2      	ldrh	r2, [r2, #6]
 8005318:	fb02 f303 	mul.w	r3, r2, r3
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	8892      	ldrh	r2, [r2, #4]
 8005320:	08d2      	lsrs	r2, r2, #3
 8005322:	b292      	uxth	r2, r2
 8005324:	4611      	mov	r1, r2
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	8892      	ldrh	r2, [r2, #4]
 800532a:	f002 0207 	and.w	r2, r2, #7
 800532e:	b292      	uxth	r2, r2
 8005330:	2a00      	cmp	r2, #0
 8005332:	bf14      	ite	ne
 8005334:	2201      	movne	r2, #1
 8005336:	2200      	moveq	r2, #0
 8005338:	b2d2      	uxtb	r2, r2
 800533a:	440a      	add	r2, r1
 800533c:	fb02 f303 	mul.w	r3, r2, r3
 8005340:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	4413      	add	r3, r2
 800534a:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 800534c:	2300      	movs	r3, #0
 800534e:	83fb      	strh	r3, [r7, #30]
 8005350:	e063      	b.n	800541a <DISP_DrawChar+0x13e>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8005352:	2300      	movs	r3, #0
 8005354:	83bb      	strh	r3, [r7, #28]
 8005356:	e04e      	b.n	80053f6 <DISP_DrawChar+0x11a>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8005358:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800535a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800535e:	4293      	cmp	r3, r2
 8005360:	d118      	bne.n	8005394 <DISP_DrawChar+0xb8>
                if (*ptr & (0x80 >> (Column % 8)))
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	4619      	mov	r1, r3
 8005368:	8bbb      	ldrh	r3, [r7, #28]
 800536a:	f003 0307 	and.w	r3, r3, #7
 800536e:	2280      	movs	r2, #128	; 0x80
 8005370:	fa42 f303 	asr.w	r3, r2, r3
 8005374:	400b      	ands	r3, r1
 8005376:	2b00      	cmp	r3, #0
 8005378:	d031      	beq.n	80053de <DISP_DrawChar+0x102>
                    DISP_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800537a:	89fa      	ldrh	r2, [r7, #14]
 800537c:	8bbb      	ldrh	r3, [r7, #28]
 800537e:	4413      	add	r3, r2
 8005380:	b298      	uxth	r0, r3
 8005382:	89ba      	ldrh	r2, [r7, #12]
 8005384:	8bfb      	ldrh	r3, [r7, #30]
 8005386:	4413      	add	r3, r2
 8005388:	b29b      	uxth	r3, r3
 800538a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800538c:	4619      	mov	r1, r3
 800538e:	f7ff fdad 	bl	8004eec <DISP_SetPixel>
 8005392:	e024      	b.n	80053de <DISP_DrawChar+0x102>
                    // DISP_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	4619      	mov	r1, r3
 800539a:	8bbb      	ldrh	r3, [r7, #28]
 800539c:	f003 0307 	and.w	r3, r3, #7
 80053a0:	2280      	movs	r2, #128	; 0x80
 80053a2:	fa42 f303 	asr.w	r3, r2, r3
 80053a6:	400b      	ands	r3, r1
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00c      	beq.n	80053c6 <DISP_DrawChar+0xea>
                    DISP_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 80053ac:	89fa      	ldrh	r2, [r7, #14]
 80053ae:	8bbb      	ldrh	r3, [r7, #28]
 80053b0:	4413      	add	r3, r2
 80053b2:	b298      	uxth	r0, r3
 80053b4:	89ba      	ldrh	r2, [r7, #12]
 80053b6:	8bfb      	ldrh	r3, [r7, #30]
 80053b8:	4413      	add	r3, r2
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80053be:	4619      	mov	r1, r3
 80053c0:	f7ff fd94 	bl	8004eec <DISP_SetPixel>
 80053c4:	e00b      	b.n	80053de <DISP_DrawChar+0x102>
                    // DISP_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    DISP_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 80053c6:	89fa      	ldrh	r2, [r7, #14]
 80053c8:	8bbb      	ldrh	r3, [r7, #28]
 80053ca:	4413      	add	r3, r2
 80053cc:	b298      	uxth	r0, r3
 80053ce:	89ba      	ldrh	r2, [r7, #12]
 80053d0:	8bfb      	ldrh	r3, [r7, #30]
 80053d2:	4413      	add	r3, r2
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80053d8:	4619      	mov	r1, r3
 80053da:	f7ff fd87 	bl	8004eec <DISP_SetPixel>
                    // DISP_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 80053de:	8bbb      	ldrh	r3, [r7, #28]
 80053e0:	f003 0307 	and.w	r3, r3, #7
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	2b07      	cmp	r3, #7
 80053e8:	d102      	bne.n	80053f0 <DISP_DrawChar+0x114>
                ptr++;
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	3301      	adds	r3, #1
 80053ee:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 80053f0:	8bbb      	ldrh	r3, [r7, #28]
 80053f2:	3301      	adds	r3, #1
 80053f4:	83bb      	strh	r3, [r7, #28]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	889b      	ldrh	r3, [r3, #4]
 80053fa:	8bba      	ldrh	r2, [r7, #28]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d3ab      	bcc.n	8005358 <DISP_DrawChar+0x7c>
        }// Write a line
        if (Font->Width % 8 != 0)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	889b      	ldrh	r3, [r3, #4]
 8005404:	f003 0307 	and.w	r3, r3, #7
 8005408:	b29b      	uxth	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d002      	beq.n	8005414 <DISP_DrawChar+0x138>
            ptr++;
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	3301      	adds	r3, #1
 8005412:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8005414:	8bfb      	ldrh	r3, [r7, #30]
 8005416:	3301      	adds	r3, #1
 8005418:	83fb      	strh	r3, [r7, #30]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	88db      	ldrh	r3, [r3, #6]
 800541e:	8bfa      	ldrh	r2, [r7, #30]
 8005420:	429a      	cmp	r2, r3
 8005422:	d396      	bcc.n	8005352 <DISP_DrawChar+0x76>
    }// Write all
}
 8005424:	3720      	adds	r7, #32
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	20000290 	.word	0x20000290
 8005430:	08006364 	.word	0x08006364

08005434 <DISP_DrawString>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void DISP_DrawString(uint16_t Xstart, uint16_t Ystart, const char * pString,
                         sFONT* Font, uint16_t Color_Background, uint16_t Color_Foreground )
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b088      	sub	sp, #32
 8005438:	af02      	add	r7, sp, #8
 800543a:	60ba      	str	r2, [r7, #8]
 800543c:	607b      	str	r3, [r7, #4]
 800543e:	4603      	mov	r3, r0
 8005440:	81fb      	strh	r3, [r7, #14]
 8005442:	460b      	mov	r3, r1
 8005444:	81bb      	strh	r3, [r7, #12]
    uint16_t Xpoint = Xstart;
 8005446:	89fb      	ldrh	r3, [r7, #14]
 8005448:	82fb      	strh	r3, [r7, #22]
    uint16_t Ypoint = Ystart;
 800544a:	89bb      	ldrh	r3, [r7, #12]
 800544c:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 800544e:	4b23      	ldr	r3, [pc, #140]	; (80054dc <DISP_DrawString+0xa8>)
 8005450:	889b      	ldrh	r3, [r3, #4]
 8005452:	b29b      	uxth	r3, r3
 8005454:	89fa      	ldrh	r2, [r7, #14]
 8005456:	429a      	cmp	r2, r3
 8005458:	d805      	bhi.n	8005466 <DISP_DrawString+0x32>
 800545a:	4b20      	ldr	r3, [pc, #128]	; (80054dc <DISP_DrawString+0xa8>)
 800545c:	88db      	ldrh	r3, [r3, #6]
 800545e:	b29b      	uxth	r3, r3
 8005460:	89ba      	ldrh	r2, [r7, #12]
 8005462:	429a      	cmp	r2, r3
 8005464:	d933      	bls.n	80054ce <DISP_DrawString+0x9a>
        Debug("DISP_DrawString_EN Input exceeds the normal display range\r\n");
 8005466:	481e      	ldr	r0, [pc, #120]	; (80054e0 <DISP_DrawString+0xac>)
 8005468:	f000 f9f2 	bl	8005850 <puts>
        return;
 800546c:	e033      	b.n	80054d6 <DISP_DrawString+0xa2>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 800546e:	8afb      	ldrh	r3, [r7, #22]
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	8892      	ldrh	r2, [r2, #4]
 8005474:	4413      	add	r3, r2
 8005476:	4a19      	ldr	r2, [pc, #100]	; (80054dc <DISP_DrawString+0xa8>)
 8005478:	8892      	ldrh	r2, [r2, #4]
 800547a:	b292      	uxth	r2, r2
 800547c:	4293      	cmp	r3, r2
 800547e:	dd06      	ble.n	800548e <DISP_DrawString+0x5a>
            Xpoint = Xstart;
 8005480:	89fb      	ldrh	r3, [r7, #14]
 8005482:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	88da      	ldrh	r2, [r3, #6]
 8005488:	8abb      	ldrh	r3, [r7, #20]
 800548a:	4413      	add	r3, r2
 800548c:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 800548e:	8abb      	ldrh	r3, [r7, #20]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	88d2      	ldrh	r2, [r2, #6]
 8005494:	4413      	add	r3, r2
 8005496:	4a11      	ldr	r2, [pc, #68]	; (80054dc <DISP_DrawString+0xa8>)
 8005498:	88d2      	ldrh	r2, [r2, #6]
 800549a:	b292      	uxth	r2, r2
 800549c:	4293      	cmp	r3, r2
 800549e:	dd03      	ble.n	80054a8 <DISP_DrawString+0x74>
            Xpoint = Xstart;
 80054a0:	89fb      	ldrh	r3, [r7, #14]
 80054a2:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 80054a4:	89bb      	ldrh	r3, [r7, #12]
 80054a6:	82bb      	strh	r3, [r7, #20]
        }
        DISP_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	781a      	ldrb	r2, [r3, #0]
 80054ac:	8ab9      	ldrh	r1, [r7, #20]
 80054ae:	8af8      	ldrh	r0, [r7, #22]
 80054b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80054b2:	9301      	str	r3, [sp, #4]
 80054b4:	8c3b      	ldrh	r3, [r7, #32]
 80054b6:	9300      	str	r3, [sp, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f7ff ff0f 	bl	80052dc <DISP_DrawChar>

        //The next character of the address
        pString ++;
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	3301      	adds	r3, #1
 80054c2:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	889a      	ldrh	r2, [r3, #4]
 80054c8:	8afb      	ldrh	r3, [r7, #22]
 80054ca:	4413      	add	r3, r2
 80054cc:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1cb      	bne.n	800546e <DISP_DrawString+0x3a>
    }
}
 80054d6:	3718      	adds	r7, #24
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	20000290 	.word	0x20000290
 80054e0:	080063a4 	.word	0x080063a4

080054e4 <DISP_DrawNum>:
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
#define  ARRAY_LEN 255
void DISP_DrawNum(uint16_t Xpoint, uint16_t Ypoint, int32_t Nummber,
                   sFONT* Font, uint16_t Color_Background, uint16_t Color_Foreground )
{
 80054e4:	b590      	push	{r4, r7, lr}
 80054e6:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 80054ea:	af02      	add	r7, sp, #8
 80054ec:	4604      	mov	r4, r0
 80054ee:	4608      	mov	r0, r1
 80054f0:	f107 0108 	add.w	r1, r7, #8
 80054f4:	600a      	str	r2, [r1, #0]
 80054f6:	1d3a      	adds	r2, r7, #4
 80054f8:	6013      	str	r3, [r2, #0]
 80054fa:	f107 030e 	add.w	r3, r7, #14
 80054fe:	4622      	mov	r2, r4
 8005500:	801a      	strh	r2, [r3, #0]
 8005502:	f107 030c 	add.w	r3, r7, #12
 8005506:	4602      	mov	r2, r0
 8005508:	801a      	strh	r2, [r3, #0]
    int16_t Num_Bit = 0, Str_Bit = 0;
 800550a:	2300      	movs	r3, #0
 800550c:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8005510:	2300      	movs	r3, #0
 8005512:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
    uint8_t Str_Array[ARRAY_LEN] = {0}, Num_Array[ARRAY_LEN] = {0};
 8005516:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800551a:	4618      	mov	r0, r3
 800551c:	23ff      	movs	r3, #255	; 0xff
 800551e:	461a      	mov	r2, r3
 8005520:	2100      	movs	r1, #0
 8005522:	f000 f931 	bl	8005788 <memset>
 8005526:	f107 0310 	add.w	r3, r7, #16
 800552a:	4618      	mov	r0, r3
 800552c:	23ff      	movs	r3, #255	; 0xff
 800552e:	461a      	mov	r2, r3
 8005530:	2100      	movs	r1, #0
 8005532:	f000 f929 	bl	8005788 <memset>
    uint8_t *pStr = Str_Array;
 8005536:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800553a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800553e:	4b3b      	ldr	r3, [pc, #236]	; (800562c <DISP_DrawNum+0x148>)
 8005540:	889b      	ldrh	r3, [r3, #4]
 8005542:	b29b      	uxth	r3, r3
 8005544:	f107 020e 	add.w	r2, r7, #14
 8005548:	8812      	ldrh	r2, [r2, #0]
 800554a:	429a      	cmp	r2, r3
 800554c:	d807      	bhi.n	800555e <DISP_DrawNum+0x7a>
 800554e:	4b37      	ldr	r3, [pc, #220]	; (800562c <DISP_DrawNum+0x148>)
 8005550:	88db      	ldrh	r3, [r3, #6]
 8005552:	b29b      	uxth	r3, r3
 8005554:	f107 020c 	add.w	r2, r7, #12
 8005558:	8812      	ldrh	r2, [r2, #0]
 800555a:	429a      	cmp	r2, r3
 800555c:	d903      	bls.n	8005566 <DISP_DrawNum+0x82>
        Debug("DISP_DisNum Input exceeds the normal display range\r\n");
 800555e:	4834      	ldr	r0, [pc, #208]	; (8005630 <DISP_DrawNum+0x14c>)
 8005560:	f000 f976 	bl	8005850 <puts>
 8005564:	e05d      	b.n	8005622 <DISP_DrawNum+0x13e>
        return;
    }

    //Converts a number to a string
     do{
        Num_Array[Num_Bit] = Nummber % 10 + '0';
 8005566:	f107 0308 	add.w	r3, r7, #8
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	4b31      	ldr	r3, [pc, #196]	; (8005634 <DISP_DrawNum+0x150>)
 800556e:	fb83 1302 	smull	r1, r3, r3, r2
 8005572:	1099      	asrs	r1, r3, #2
 8005574:	17d3      	asrs	r3, r2, #31
 8005576:	1ac9      	subs	r1, r1, r3
 8005578:	460b      	mov	r3, r1
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	440b      	add	r3, r1
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	1ad1      	subs	r1, r2, r3
 8005582:	b2ca      	uxtb	r2, r1
 8005584:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 8005588:	3230      	adds	r2, #48	; 0x30
 800558a:	b2d1      	uxtb	r1, r2
 800558c:	f107 0210 	add.w	r2, r7, #16
 8005590:	54d1      	strb	r1, [r2, r3]
        Num_Bit++;
 8005592:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 8005596:	b29b      	uxth	r3, r3
 8005598:	3301      	adds	r3, #1
 800559a:	b29b      	uxth	r3, r3
 800559c:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
        Nummber /= 10;
 80055a0:	f107 0208 	add.w	r2, r7, #8
 80055a4:	f107 0308 	add.w	r3, r7, #8
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4922      	ldr	r1, [pc, #136]	; (8005634 <DISP_DrawNum+0x150>)
 80055ac:	fb81 0103 	smull	r0, r1, r1, r3
 80055b0:	1089      	asrs	r1, r1, #2
 80055b2:	17db      	asrs	r3, r3, #31
 80055b4:	1acb      	subs	r3, r1, r3
 80055b6:	6013      	str	r3, [r2, #0]
    }while (Nummber);
 80055b8:	f107 0308 	add.w	r3, r7, #8
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1d1      	bne.n	8005566 <DISP_DrawNum+0x82>

    //The string is inverted
    while (Num_Bit > 0) {
 80055c2:	e018      	b.n	80055f6 <DISP_DrawNum+0x112>
        Str_Array[Str_Bit] = Num_Array[Num_Bit - 1];
 80055c4:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 80055c8:	1e5a      	subs	r2, r3, #1
 80055ca:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	; 0x214
 80055ce:	f107 0110 	add.w	r1, r7, #16
 80055d2:	5c89      	ldrb	r1, [r1, r2]
 80055d4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80055d8:	54d1      	strb	r1, [r2, r3]
        Str_Bit ++;
 80055da:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	; 0x214
 80055de:	b29b      	uxth	r3, r3
 80055e0:	3301      	adds	r3, #1
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
        Num_Bit --;
 80055e8:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	3b01      	subs	r3, #1
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    while (Num_Bit > 0) {
 80055f6:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	dce2      	bgt.n	80055c4 <DISP_DrawNum+0xe0>
    }
    
    //show
    DISP_DrawString(Xpoint, Ypoint, (const char*)pStr, Font, Color_Background, Color_Foreground);
 80055fe:	1d3b      	adds	r3, r7, #4
 8005600:	f107 020c 	add.w	r2, r7, #12
 8005604:	8811      	ldrh	r1, [r2, #0]
 8005606:	f107 020e 	add.w	r2, r7, #14
 800560a:	8810      	ldrh	r0, [r2, #0]
 800560c:	f8b7 222c 	ldrh.w	r2, [r7, #556]	; 0x22c
 8005610:	9201      	str	r2, [sp, #4]
 8005612:	f8b7 2228 	ldrh.w	r2, [r7, #552]	; 0x228
 8005616:	9200      	str	r2, [sp, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800561e:	f7ff ff09 	bl	8005434 <DISP_DrawString>
}
 8005622:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8005626:	46bd      	mov	sp, r7
 8005628:	bd90      	pop	{r4, r7, pc}
 800562a:	bf00      	nop
 800562c:	20000290 	.word	0x20000290
 8005630:	080063e8 	.word	0x080063e8
 8005634:	66666667 	.word	0x66666667

08005638 <DISP_DrawImage>:
    yStart           : Y starting coordinates
    xEnd             ：Image width
    yEnd             : Image height
******************************************************************************/
void DISP_DrawImage(const unsigned char *image, uint16_t xStart, uint16_t yStart, uint16_t W_Image, uint16_t H_Image)
{
 8005638:	b590      	push	{r4, r7, lr}
 800563a:	b087      	sub	sp, #28
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	4608      	mov	r0, r1
 8005642:	4611      	mov	r1, r2
 8005644:	461a      	mov	r2, r3
 8005646:	4603      	mov	r3, r0
 8005648:	817b      	strh	r3, [r7, #10]
 800564a:	460b      	mov	r3, r1
 800564c:	813b      	strh	r3, [r7, #8]
 800564e:	4613      	mov	r3, r2
 8005650:	80fb      	strh	r3, [r7, #6]
    int i,j; 
		for(j = 0; j < H_Image; j++){
 8005652:	2300      	movs	r3, #0
 8005654:	613b      	str	r3, [r7, #16]
 8005656:	e049      	b.n	80056ec <DISP_DrawImage+0xb4>
			for(i = 0; i < W_Image; i++){
 8005658:	2300      	movs	r3, #0
 800565a:	617b      	str	r3, [r7, #20]
 800565c:	e03f      	b.n	80056de <DISP_DrawImage+0xa6>
				if(xStart+i < Paint.WidthMemory  &&  yStart+j < Paint.HeightMemory)//Exceeded part does not display
 800565e:	897a      	ldrh	r2, [r7, #10]
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	4413      	add	r3, r2
 8005664:	4a25      	ldr	r2, [pc, #148]	; (80056fc <DISP_DrawImage+0xc4>)
 8005666:	8912      	ldrh	r2, [r2, #8]
 8005668:	b292      	uxth	r2, r2
 800566a:	4293      	cmp	r3, r2
 800566c:	da34      	bge.n	80056d8 <DISP_DrawImage+0xa0>
 800566e:	893a      	ldrh	r2, [r7, #8]
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	4413      	add	r3, r2
 8005674:	4a21      	ldr	r2, [pc, #132]	; (80056fc <DISP_DrawImage+0xc4>)
 8005676:	8952      	ldrh	r2, [r2, #10]
 8005678:	b292      	uxth	r2, r2
 800567a:	4293      	cmp	r3, r2
 800567c:	da2c      	bge.n	80056d8 <DISP_DrawImage+0xa0>
					DISP_SetPixel(xStart + i, yStart + j, (*(image + j*W_Image*2 + i*2+1))<<8 | (*(image + j*W_Image*2 + i*2)));
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	b29a      	uxth	r2, r3
 8005682:	897b      	ldrh	r3, [r7, #10]
 8005684:	4413      	add	r3, r2
 8005686:	b298      	uxth	r0, r3
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	b29a      	uxth	r2, r3
 800568c:	893b      	ldrh	r3, [r7, #8]
 800568e:	4413      	add	r3, r2
 8005690:	b29c      	uxth	r4, r3
 8005692:	88fb      	ldrh	r3, [r7, #6]
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	fb02 f303 	mul.w	r3, r2, r3
 800569a:	005b      	lsls	r3, r3, #1
 800569c:	461a      	mov	r2, r3
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	005b      	lsls	r3, r3, #1
 80056a2:	4413      	add	r3, r2
 80056a4:	3301      	adds	r3, #1
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	4413      	add	r3, r2
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	021b      	lsls	r3, r3, #8
 80056ae:	b21a      	sxth	r2, r3
 80056b0:	88fb      	ldrh	r3, [r7, #6]
 80056b2:	6939      	ldr	r1, [r7, #16]
 80056b4:	fb01 f303 	mul.w	r3, r1, r3
 80056b8:	005b      	lsls	r3, r3, #1
 80056ba:	4619      	mov	r1, r3
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	005b      	lsls	r3, r3, #1
 80056c0:	440b      	add	r3, r1
 80056c2:	68f9      	ldr	r1, [r7, #12]
 80056c4:	440b      	add	r3, r1
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	b21b      	sxth	r3, r3
 80056ca:	4313      	orrs	r3, r2
 80056cc:	b21b      	sxth	r3, r3
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	461a      	mov	r2, r3
 80056d2:	4621      	mov	r1, r4
 80056d4:	f7ff fc0a 	bl	8004eec <DISP_SetPixel>
			for(i = 0; i < W_Image; i++){
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	3301      	adds	r3, #1
 80056dc:	617b      	str	r3, [r7, #20]
 80056de:	88fb      	ldrh	r3, [r7, #6]
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	dbbb      	blt.n	800565e <DISP_DrawImage+0x26>
		for(j = 0; j < H_Image; j++){
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	3301      	adds	r3, #1
 80056ea:	613b      	str	r3, [r7, #16]
 80056ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	dbb1      	blt.n	8005658 <DISP_DrawImage+0x20>
				//Using arrays is a property of sequential storage, accessing the original array by algorithm
				//j*W_Image*2 			   Y offset
				//i*2              	   X offset
			}
		}
}
 80056f4:	bf00      	nop
 80056f6:	371c      	adds	r7, #28
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd90      	pop	{r4, r7, pc}
 80056fc:	20000290 	.word	0x20000290

08005700 <__errno>:
 8005700:	4b01      	ldr	r3, [pc, #4]	; (8005708 <__errno+0x8>)
 8005702:	6818      	ldr	r0, [r3, #0]
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	2000001c 	.word	0x2000001c

0800570c <__libc_init_array>:
 800570c:	b570      	push	{r4, r5, r6, lr}
 800570e:	4e0d      	ldr	r6, [pc, #52]	; (8005744 <__libc_init_array+0x38>)
 8005710:	4c0d      	ldr	r4, [pc, #52]	; (8005748 <__libc_init_array+0x3c>)
 8005712:	1ba4      	subs	r4, r4, r6
 8005714:	10a4      	asrs	r4, r4, #2
 8005716:	2500      	movs	r5, #0
 8005718:	42a5      	cmp	r5, r4
 800571a:	d109      	bne.n	8005730 <__libc_init_array+0x24>
 800571c:	4e0b      	ldr	r6, [pc, #44]	; (800574c <__libc_init_array+0x40>)
 800571e:	4c0c      	ldr	r4, [pc, #48]	; (8005750 <__libc_init_array+0x44>)
 8005720:	f000 fce0 	bl	80060e4 <_init>
 8005724:	1ba4      	subs	r4, r4, r6
 8005726:	10a4      	asrs	r4, r4, #2
 8005728:	2500      	movs	r5, #0
 800572a:	42a5      	cmp	r5, r4
 800572c:	d105      	bne.n	800573a <__libc_init_array+0x2e>
 800572e:	bd70      	pop	{r4, r5, r6, pc}
 8005730:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005734:	4798      	blx	r3
 8005736:	3501      	adds	r5, #1
 8005738:	e7ee      	b.n	8005718 <__libc_init_array+0xc>
 800573a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800573e:	4798      	blx	r3
 8005740:	3501      	adds	r5, #1
 8005742:	e7f2      	b.n	800572a <__libc_init_array+0x1e>
 8005744:	08018bbc 	.word	0x08018bbc
 8005748:	08018bbc 	.word	0x08018bbc
 800574c:	08018bbc 	.word	0x08018bbc
 8005750:	08018bc0 	.word	0x08018bc0

08005754 <__itoa>:
 8005754:	1e93      	subs	r3, r2, #2
 8005756:	2b22      	cmp	r3, #34	; 0x22
 8005758:	b510      	push	{r4, lr}
 800575a:	460c      	mov	r4, r1
 800575c:	d904      	bls.n	8005768 <__itoa+0x14>
 800575e:	2300      	movs	r3, #0
 8005760:	700b      	strb	r3, [r1, #0]
 8005762:	461c      	mov	r4, r3
 8005764:	4620      	mov	r0, r4
 8005766:	bd10      	pop	{r4, pc}
 8005768:	2a0a      	cmp	r2, #10
 800576a:	d109      	bne.n	8005780 <__itoa+0x2c>
 800576c:	2800      	cmp	r0, #0
 800576e:	da07      	bge.n	8005780 <__itoa+0x2c>
 8005770:	232d      	movs	r3, #45	; 0x2d
 8005772:	700b      	strb	r3, [r1, #0]
 8005774:	4240      	negs	r0, r0
 8005776:	2101      	movs	r1, #1
 8005778:	4421      	add	r1, r4
 800577a:	f000 f871 	bl	8005860 <__utoa>
 800577e:	e7f1      	b.n	8005764 <__itoa+0x10>
 8005780:	2100      	movs	r1, #0
 8005782:	e7f9      	b.n	8005778 <__itoa+0x24>

08005784 <itoa>:
 8005784:	f7ff bfe6 	b.w	8005754 <__itoa>

08005788 <memset>:
 8005788:	4402      	add	r2, r0
 800578a:	4603      	mov	r3, r0
 800578c:	4293      	cmp	r3, r2
 800578e:	d100      	bne.n	8005792 <memset+0xa>
 8005790:	4770      	bx	lr
 8005792:	f803 1b01 	strb.w	r1, [r3], #1
 8005796:	e7f9      	b.n	800578c <memset+0x4>

08005798 <_puts_r>:
 8005798:	b570      	push	{r4, r5, r6, lr}
 800579a:	460e      	mov	r6, r1
 800579c:	4605      	mov	r5, r0
 800579e:	b118      	cbz	r0, 80057a8 <_puts_r+0x10>
 80057a0:	6983      	ldr	r3, [r0, #24]
 80057a2:	b90b      	cbnz	r3, 80057a8 <_puts_r+0x10>
 80057a4:	f000 fa4a 	bl	8005c3c <__sinit>
 80057a8:	69ab      	ldr	r3, [r5, #24]
 80057aa:	68ac      	ldr	r4, [r5, #8]
 80057ac:	b913      	cbnz	r3, 80057b4 <_puts_r+0x1c>
 80057ae:	4628      	mov	r0, r5
 80057b0:	f000 fa44 	bl	8005c3c <__sinit>
 80057b4:	4b23      	ldr	r3, [pc, #140]	; (8005844 <_puts_r+0xac>)
 80057b6:	429c      	cmp	r4, r3
 80057b8:	d117      	bne.n	80057ea <_puts_r+0x52>
 80057ba:	686c      	ldr	r4, [r5, #4]
 80057bc:	89a3      	ldrh	r3, [r4, #12]
 80057be:	071b      	lsls	r3, r3, #28
 80057c0:	d51d      	bpl.n	80057fe <_puts_r+0x66>
 80057c2:	6923      	ldr	r3, [r4, #16]
 80057c4:	b1db      	cbz	r3, 80057fe <_puts_r+0x66>
 80057c6:	3e01      	subs	r6, #1
 80057c8:	68a3      	ldr	r3, [r4, #8]
 80057ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80057ce:	3b01      	subs	r3, #1
 80057d0:	60a3      	str	r3, [r4, #8]
 80057d2:	b9e9      	cbnz	r1, 8005810 <_puts_r+0x78>
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	da2e      	bge.n	8005836 <_puts_r+0x9e>
 80057d8:	4622      	mov	r2, r4
 80057da:	210a      	movs	r1, #10
 80057dc:	4628      	mov	r0, r5
 80057de:	f000 f87d 	bl	80058dc <__swbuf_r>
 80057e2:	3001      	adds	r0, #1
 80057e4:	d011      	beq.n	800580a <_puts_r+0x72>
 80057e6:	200a      	movs	r0, #10
 80057e8:	e011      	b.n	800580e <_puts_r+0x76>
 80057ea:	4b17      	ldr	r3, [pc, #92]	; (8005848 <_puts_r+0xb0>)
 80057ec:	429c      	cmp	r4, r3
 80057ee:	d101      	bne.n	80057f4 <_puts_r+0x5c>
 80057f0:	68ac      	ldr	r4, [r5, #8]
 80057f2:	e7e3      	b.n	80057bc <_puts_r+0x24>
 80057f4:	4b15      	ldr	r3, [pc, #84]	; (800584c <_puts_r+0xb4>)
 80057f6:	429c      	cmp	r4, r3
 80057f8:	bf08      	it	eq
 80057fa:	68ec      	ldreq	r4, [r5, #12]
 80057fc:	e7de      	b.n	80057bc <_puts_r+0x24>
 80057fe:	4621      	mov	r1, r4
 8005800:	4628      	mov	r0, r5
 8005802:	f000 f8bd 	bl	8005980 <__swsetup_r>
 8005806:	2800      	cmp	r0, #0
 8005808:	d0dd      	beq.n	80057c6 <_puts_r+0x2e>
 800580a:	f04f 30ff 	mov.w	r0, #4294967295
 800580e:	bd70      	pop	{r4, r5, r6, pc}
 8005810:	2b00      	cmp	r3, #0
 8005812:	da04      	bge.n	800581e <_puts_r+0x86>
 8005814:	69a2      	ldr	r2, [r4, #24]
 8005816:	429a      	cmp	r2, r3
 8005818:	dc06      	bgt.n	8005828 <_puts_r+0x90>
 800581a:	290a      	cmp	r1, #10
 800581c:	d004      	beq.n	8005828 <_puts_r+0x90>
 800581e:	6823      	ldr	r3, [r4, #0]
 8005820:	1c5a      	adds	r2, r3, #1
 8005822:	6022      	str	r2, [r4, #0]
 8005824:	7019      	strb	r1, [r3, #0]
 8005826:	e7cf      	b.n	80057c8 <_puts_r+0x30>
 8005828:	4622      	mov	r2, r4
 800582a:	4628      	mov	r0, r5
 800582c:	f000 f856 	bl	80058dc <__swbuf_r>
 8005830:	3001      	adds	r0, #1
 8005832:	d1c9      	bne.n	80057c8 <_puts_r+0x30>
 8005834:	e7e9      	b.n	800580a <_puts_r+0x72>
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	200a      	movs	r0, #10
 800583a:	1c5a      	adds	r2, r3, #1
 800583c:	6022      	str	r2, [r4, #0]
 800583e:	7018      	strb	r0, [r3, #0]
 8005840:	e7e5      	b.n	800580e <_puts_r+0x76>
 8005842:	bf00      	nop
 8005844:	08018b74 	.word	0x08018b74
 8005848:	08018b94 	.word	0x08018b94
 800584c:	08018b54 	.word	0x08018b54

08005850 <puts>:
 8005850:	4b02      	ldr	r3, [pc, #8]	; (800585c <puts+0xc>)
 8005852:	4601      	mov	r1, r0
 8005854:	6818      	ldr	r0, [r3, #0]
 8005856:	f7ff bf9f 	b.w	8005798 <_puts_r>
 800585a:	bf00      	nop
 800585c:	2000001c 	.word	0x2000001c

08005860 <__utoa>:
 8005860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005862:	4b1d      	ldr	r3, [pc, #116]	; (80058d8 <__utoa+0x78>)
 8005864:	b08b      	sub	sp, #44	; 0x2c
 8005866:	4605      	mov	r5, r0
 8005868:	460c      	mov	r4, r1
 800586a:	466e      	mov	r6, sp
 800586c:	f103 0c20 	add.w	ip, r3, #32
 8005870:	6818      	ldr	r0, [r3, #0]
 8005872:	6859      	ldr	r1, [r3, #4]
 8005874:	4637      	mov	r7, r6
 8005876:	c703      	stmia	r7!, {r0, r1}
 8005878:	3308      	adds	r3, #8
 800587a:	4563      	cmp	r3, ip
 800587c:	463e      	mov	r6, r7
 800587e:	d1f7      	bne.n	8005870 <__utoa+0x10>
 8005880:	6818      	ldr	r0, [r3, #0]
 8005882:	791b      	ldrb	r3, [r3, #4]
 8005884:	713b      	strb	r3, [r7, #4]
 8005886:	1e93      	subs	r3, r2, #2
 8005888:	2b22      	cmp	r3, #34	; 0x22
 800588a:	6038      	str	r0, [r7, #0]
 800588c:	f04f 0300 	mov.w	r3, #0
 8005890:	d904      	bls.n	800589c <__utoa+0x3c>
 8005892:	7023      	strb	r3, [r4, #0]
 8005894:	461c      	mov	r4, r3
 8005896:	4620      	mov	r0, r4
 8005898:	b00b      	add	sp, #44	; 0x2c
 800589a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800589c:	1e66      	subs	r6, r4, #1
 800589e:	fbb5 f0f2 	udiv	r0, r5, r2
 80058a2:	af0a      	add	r7, sp, #40	; 0x28
 80058a4:	fb02 5510 	mls	r5, r2, r0, r5
 80058a8:	443d      	add	r5, r7
 80058aa:	1c59      	adds	r1, r3, #1
 80058ac:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 80058b0:	f806 5f01 	strb.w	r5, [r6, #1]!
 80058b4:	4605      	mov	r5, r0
 80058b6:	b968      	cbnz	r0, 80058d4 <__utoa+0x74>
 80058b8:	5460      	strb	r0, [r4, r1]
 80058ba:	4423      	add	r3, r4
 80058bc:	4622      	mov	r2, r4
 80058be:	1b19      	subs	r1, r3, r4
 80058c0:	1b10      	subs	r0, r2, r4
 80058c2:	4281      	cmp	r1, r0
 80058c4:	dde7      	ble.n	8005896 <__utoa+0x36>
 80058c6:	7811      	ldrb	r1, [r2, #0]
 80058c8:	7818      	ldrb	r0, [r3, #0]
 80058ca:	f802 0b01 	strb.w	r0, [r2], #1
 80058ce:	f803 1901 	strb.w	r1, [r3], #-1
 80058d2:	e7f4      	b.n	80058be <__utoa+0x5e>
 80058d4:	460b      	mov	r3, r1
 80058d6:	e7e2      	b.n	800589e <__utoa+0x3e>
 80058d8:	08018b2c 	.word	0x08018b2c

080058dc <__swbuf_r>:
 80058dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058de:	460e      	mov	r6, r1
 80058e0:	4614      	mov	r4, r2
 80058e2:	4605      	mov	r5, r0
 80058e4:	b118      	cbz	r0, 80058ee <__swbuf_r+0x12>
 80058e6:	6983      	ldr	r3, [r0, #24]
 80058e8:	b90b      	cbnz	r3, 80058ee <__swbuf_r+0x12>
 80058ea:	f000 f9a7 	bl	8005c3c <__sinit>
 80058ee:	4b21      	ldr	r3, [pc, #132]	; (8005974 <__swbuf_r+0x98>)
 80058f0:	429c      	cmp	r4, r3
 80058f2:	d12a      	bne.n	800594a <__swbuf_r+0x6e>
 80058f4:	686c      	ldr	r4, [r5, #4]
 80058f6:	69a3      	ldr	r3, [r4, #24]
 80058f8:	60a3      	str	r3, [r4, #8]
 80058fa:	89a3      	ldrh	r3, [r4, #12]
 80058fc:	071a      	lsls	r2, r3, #28
 80058fe:	d52e      	bpl.n	800595e <__swbuf_r+0x82>
 8005900:	6923      	ldr	r3, [r4, #16]
 8005902:	b363      	cbz	r3, 800595e <__swbuf_r+0x82>
 8005904:	6923      	ldr	r3, [r4, #16]
 8005906:	6820      	ldr	r0, [r4, #0]
 8005908:	1ac0      	subs	r0, r0, r3
 800590a:	6963      	ldr	r3, [r4, #20]
 800590c:	b2f6      	uxtb	r6, r6
 800590e:	4283      	cmp	r3, r0
 8005910:	4637      	mov	r7, r6
 8005912:	dc04      	bgt.n	800591e <__swbuf_r+0x42>
 8005914:	4621      	mov	r1, r4
 8005916:	4628      	mov	r0, r5
 8005918:	f000 f926 	bl	8005b68 <_fflush_r>
 800591c:	bb28      	cbnz	r0, 800596a <__swbuf_r+0x8e>
 800591e:	68a3      	ldr	r3, [r4, #8]
 8005920:	3b01      	subs	r3, #1
 8005922:	60a3      	str	r3, [r4, #8]
 8005924:	6823      	ldr	r3, [r4, #0]
 8005926:	1c5a      	adds	r2, r3, #1
 8005928:	6022      	str	r2, [r4, #0]
 800592a:	701e      	strb	r6, [r3, #0]
 800592c:	6963      	ldr	r3, [r4, #20]
 800592e:	3001      	adds	r0, #1
 8005930:	4283      	cmp	r3, r0
 8005932:	d004      	beq.n	800593e <__swbuf_r+0x62>
 8005934:	89a3      	ldrh	r3, [r4, #12]
 8005936:	07db      	lsls	r3, r3, #31
 8005938:	d519      	bpl.n	800596e <__swbuf_r+0x92>
 800593a:	2e0a      	cmp	r6, #10
 800593c:	d117      	bne.n	800596e <__swbuf_r+0x92>
 800593e:	4621      	mov	r1, r4
 8005940:	4628      	mov	r0, r5
 8005942:	f000 f911 	bl	8005b68 <_fflush_r>
 8005946:	b190      	cbz	r0, 800596e <__swbuf_r+0x92>
 8005948:	e00f      	b.n	800596a <__swbuf_r+0x8e>
 800594a:	4b0b      	ldr	r3, [pc, #44]	; (8005978 <__swbuf_r+0x9c>)
 800594c:	429c      	cmp	r4, r3
 800594e:	d101      	bne.n	8005954 <__swbuf_r+0x78>
 8005950:	68ac      	ldr	r4, [r5, #8]
 8005952:	e7d0      	b.n	80058f6 <__swbuf_r+0x1a>
 8005954:	4b09      	ldr	r3, [pc, #36]	; (800597c <__swbuf_r+0xa0>)
 8005956:	429c      	cmp	r4, r3
 8005958:	bf08      	it	eq
 800595a:	68ec      	ldreq	r4, [r5, #12]
 800595c:	e7cb      	b.n	80058f6 <__swbuf_r+0x1a>
 800595e:	4621      	mov	r1, r4
 8005960:	4628      	mov	r0, r5
 8005962:	f000 f80d 	bl	8005980 <__swsetup_r>
 8005966:	2800      	cmp	r0, #0
 8005968:	d0cc      	beq.n	8005904 <__swbuf_r+0x28>
 800596a:	f04f 37ff 	mov.w	r7, #4294967295
 800596e:	4638      	mov	r0, r7
 8005970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005972:	bf00      	nop
 8005974:	08018b74 	.word	0x08018b74
 8005978:	08018b94 	.word	0x08018b94
 800597c:	08018b54 	.word	0x08018b54

08005980 <__swsetup_r>:
 8005980:	4b32      	ldr	r3, [pc, #200]	; (8005a4c <__swsetup_r+0xcc>)
 8005982:	b570      	push	{r4, r5, r6, lr}
 8005984:	681d      	ldr	r5, [r3, #0]
 8005986:	4606      	mov	r6, r0
 8005988:	460c      	mov	r4, r1
 800598a:	b125      	cbz	r5, 8005996 <__swsetup_r+0x16>
 800598c:	69ab      	ldr	r3, [r5, #24]
 800598e:	b913      	cbnz	r3, 8005996 <__swsetup_r+0x16>
 8005990:	4628      	mov	r0, r5
 8005992:	f000 f953 	bl	8005c3c <__sinit>
 8005996:	4b2e      	ldr	r3, [pc, #184]	; (8005a50 <__swsetup_r+0xd0>)
 8005998:	429c      	cmp	r4, r3
 800599a:	d10f      	bne.n	80059bc <__swsetup_r+0x3c>
 800599c:	686c      	ldr	r4, [r5, #4]
 800599e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	0715      	lsls	r5, r2, #28
 80059a6:	d42c      	bmi.n	8005a02 <__swsetup_r+0x82>
 80059a8:	06d0      	lsls	r0, r2, #27
 80059aa:	d411      	bmi.n	80059d0 <__swsetup_r+0x50>
 80059ac:	2209      	movs	r2, #9
 80059ae:	6032      	str	r2, [r6, #0]
 80059b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059b4:	81a3      	strh	r3, [r4, #12]
 80059b6:	f04f 30ff 	mov.w	r0, #4294967295
 80059ba:	e03e      	b.n	8005a3a <__swsetup_r+0xba>
 80059bc:	4b25      	ldr	r3, [pc, #148]	; (8005a54 <__swsetup_r+0xd4>)
 80059be:	429c      	cmp	r4, r3
 80059c0:	d101      	bne.n	80059c6 <__swsetup_r+0x46>
 80059c2:	68ac      	ldr	r4, [r5, #8]
 80059c4:	e7eb      	b.n	800599e <__swsetup_r+0x1e>
 80059c6:	4b24      	ldr	r3, [pc, #144]	; (8005a58 <__swsetup_r+0xd8>)
 80059c8:	429c      	cmp	r4, r3
 80059ca:	bf08      	it	eq
 80059cc:	68ec      	ldreq	r4, [r5, #12]
 80059ce:	e7e6      	b.n	800599e <__swsetup_r+0x1e>
 80059d0:	0751      	lsls	r1, r2, #29
 80059d2:	d512      	bpl.n	80059fa <__swsetup_r+0x7a>
 80059d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059d6:	b141      	cbz	r1, 80059ea <__swsetup_r+0x6a>
 80059d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059dc:	4299      	cmp	r1, r3
 80059de:	d002      	beq.n	80059e6 <__swsetup_r+0x66>
 80059e0:	4630      	mov	r0, r6
 80059e2:	f000 fa19 	bl	8005e18 <_free_r>
 80059e6:	2300      	movs	r3, #0
 80059e8:	6363      	str	r3, [r4, #52]	; 0x34
 80059ea:	89a3      	ldrh	r3, [r4, #12]
 80059ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80059f0:	81a3      	strh	r3, [r4, #12]
 80059f2:	2300      	movs	r3, #0
 80059f4:	6063      	str	r3, [r4, #4]
 80059f6:	6923      	ldr	r3, [r4, #16]
 80059f8:	6023      	str	r3, [r4, #0]
 80059fa:	89a3      	ldrh	r3, [r4, #12]
 80059fc:	f043 0308 	orr.w	r3, r3, #8
 8005a00:	81a3      	strh	r3, [r4, #12]
 8005a02:	6923      	ldr	r3, [r4, #16]
 8005a04:	b94b      	cbnz	r3, 8005a1a <__swsetup_r+0x9a>
 8005a06:	89a3      	ldrh	r3, [r4, #12]
 8005a08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a10:	d003      	beq.n	8005a1a <__swsetup_r+0x9a>
 8005a12:	4621      	mov	r1, r4
 8005a14:	4630      	mov	r0, r6
 8005a16:	f000 f9bf 	bl	8005d98 <__smakebuf_r>
 8005a1a:	89a2      	ldrh	r2, [r4, #12]
 8005a1c:	f012 0301 	ands.w	r3, r2, #1
 8005a20:	d00c      	beq.n	8005a3c <__swsetup_r+0xbc>
 8005a22:	2300      	movs	r3, #0
 8005a24:	60a3      	str	r3, [r4, #8]
 8005a26:	6963      	ldr	r3, [r4, #20]
 8005a28:	425b      	negs	r3, r3
 8005a2a:	61a3      	str	r3, [r4, #24]
 8005a2c:	6923      	ldr	r3, [r4, #16]
 8005a2e:	b953      	cbnz	r3, 8005a46 <__swsetup_r+0xc6>
 8005a30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a34:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005a38:	d1ba      	bne.n	80059b0 <__swsetup_r+0x30>
 8005a3a:	bd70      	pop	{r4, r5, r6, pc}
 8005a3c:	0792      	lsls	r2, r2, #30
 8005a3e:	bf58      	it	pl
 8005a40:	6963      	ldrpl	r3, [r4, #20]
 8005a42:	60a3      	str	r3, [r4, #8]
 8005a44:	e7f2      	b.n	8005a2c <__swsetup_r+0xac>
 8005a46:	2000      	movs	r0, #0
 8005a48:	e7f7      	b.n	8005a3a <__swsetup_r+0xba>
 8005a4a:	bf00      	nop
 8005a4c:	2000001c 	.word	0x2000001c
 8005a50:	08018b74 	.word	0x08018b74
 8005a54:	08018b94 	.word	0x08018b94
 8005a58:	08018b54 	.word	0x08018b54

08005a5c <__sflush_r>:
 8005a5c:	898a      	ldrh	r2, [r1, #12]
 8005a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a62:	4605      	mov	r5, r0
 8005a64:	0710      	lsls	r0, r2, #28
 8005a66:	460c      	mov	r4, r1
 8005a68:	d458      	bmi.n	8005b1c <__sflush_r+0xc0>
 8005a6a:	684b      	ldr	r3, [r1, #4]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	dc05      	bgt.n	8005a7c <__sflush_r+0x20>
 8005a70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	dc02      	bgt.n	8005a7c <__sflush_r+0x20>
 8005a76:	2000      	movs	r0, #0
 8005a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a7e:	2e00      	cmp	r6, #0
 8005a80:	d0f9      	beq.n	8005a76 <__sflush_r+0x1a>
 8005a82:	2300      	movs	r3, #0
 8005a84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a88:	682f      	ldr	r7, [r5, #0]
 8005a8a:	6a21      	ldr	r1, [r4, #32]
 8005a8c:	602b      	str	r3, [r5, #0]
 8005a8e:	d032      	beq.n	8005af6 <__sflush_r+0x9a>
 8005a90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a92:	89a3      	ldrh	r3, [r4, #12]
 8005a94:	075a      	lsls	r2, r3, #29
 8005a96:	d505      	bpl.n	8005aa4 <__sflush_r+0x48>
 8005a98:	6863      	ldr	r3, [r4, #4]
 8005a9a:	1ac0      	subs	r0, r0, r3
 8005a9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a9e:	b10b      	cbz	r3, 8005aa4 <__sflush_r+0x48>
 8005aa0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005aa2:	1ac0      	subs	r0, r0, r3
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005aaa:	6a21      	ldr	r1, [r4, #32]
 8005aac:	4628      	mov	r0, r5
 8005aae:	47b0      	blx	r6
 8005ab0:	1c43      	adds	r3, r0, #1
 8005ab2:	89a3      	ldrh	r3, [r4, #12]
 8005ab4:	d106      	bne.n	8005ac4 <__sflush_r+0x68>
 8005ab6:	6829      	ldr	r1, [r5, #0]
 8005ab8:	291d      	cmp	r1, #29
 8005aba:	d848      	bhi.n	8005b4e <__sflush_r+0xf2>
 8005abc:	4a29      	ldr	r2, [pc, #164]	; (8005b64 <__sflush_r+0x108>)
 8005abe:	40ca      	lsrs	r2, r1
 8005ac0:	07d6      	lsls	r6, r2, #31
 8005ac2:	d544      	bpl.n	8005b4e <__sflush_r+0xf2>
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	6062      	str	r2, [r4, #4]
 8005ac8:	04d9      	lsls	r1, r3, #19
 8005aca:	6922      	ldr	r2, [r4, #16]
 8005acc:	6022      	str	r2, [r4, #0]
 8005ace:	d504      	bpl.n	8005ada <__sflush_r+0x7e>
 8005ad0:	1c42      	adds	r2, r0, #1
 8005ad2:	d101      	bne.n	8005ad8 <__sflush_r+0x7c>
 8005ad4:	682b      	ldr	r3, [r5, #0]
 8005ad6:	b903      	cbnz	r3, 8005ada <__sflush_r+0x7e>
 8005ad8:	6560      	str	r0, [r4, #84]	; 0x54
 8005ada:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005adc:	602f      	str	r7, [r5, #0]
 8005ade:	2900      	cmp	r1, #0
 8005ae0:	d0c9      	beq.n	8005a76 <__sflush_r+0x1a>
 8005ae2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ae6:	4299      	cmp	r1, r3
 8005ae8:	d002      	beq.n	8005af0 <__sflush_r+0x94>
 8005aea:	4628      	mov	r0, r5
 8005aec:	f000 f994 	bl	8005e18 <_free_r>
 8005af0:	2000      	movs	r0, #0
 8005af2:	6360      	str	r0, [r4, #52]	; 0x34
 8005af4:	e7c0      	b.n	8005a78 <__sflush_r+0x1c>
 8005af6:	2301      	movs	r3, #1
 8005af8:	4628      	mov	r0, r5
 8005afa:	47b0      	blx	r6
 8005afc:	1c41      	adds	r1, r0, #1
 8005afe:	d1c8      	bne.n	8005a92 <__sflush_r+0x36>
 8005b00:	682b      	ldr	r3, [r5, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d0c5      	beq.n	8005a92 <__sflush_r+0x36>
 8005b06:	2b1d      	cmp	r3, #29
 8005b08:	d001      	beq.n	8005b0e <__sflush_r+0xb2>
 8005b0a:	2b16      	cmp	r3, #22
 8005b0c:	d101      	bne.n	8005b12 <__sflush_r+0xb6>
 8005b0e:	602f      	str	r7, [r5, #0]
 8005b10:	e7b1      	b.n	8005a76 <__sflush_r+0x1a>
 8005b12:	89a3      	ldrh	r3, [r4, #12]
 8005b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b18:	81a3      	strh	r3, [r4, #12]
 8005b1a:	e7ad      	b.n	8005a78 <__sflush_r+0x1c>
 8005b1c:	690f      	ldr	r7, [r1, #16]
 8005b1e:	2f00      	cmp	r7, #0
 8005b20:	d0a9      	beq.n	8005a76 <__sflush_r+0x1a>
 8005b22:	0793      	lsls	r3, r2, #30
 8005b24:	680e      	ldr	r6, [r1, #0]
 8005b26:	bf08      	it	eq
 8005b28:	694b      	ldreq	r3, [r1, #20]
 8005b2a:	600f      	str	r7, [r1, #0]
 8005b2c:	bf18      	it	ne
 8005b2e:	2300      	movne	r3, #0
 8005b30:	eba6 0807 	sub.w	r8, r6, r7
 8005b34:	608b      	str	r3, [r1, #8]
 8005b36:	f1b8 0f00 	cmp.w	r8, #0
 8005b3a:	dd9c      	ble.n	8005a76 <__sflush_r+0x1a>
 8005b3c:	4643      	mov	r3, r8
 8005b3e:	463a      	mov	r2, r7
 8005b40:	6a21      	ldr	r1, [r4, #32]
 8005b42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b44:	4628      	mov	r0, r5
 8005b46:	47b0      	blx	r6
 8005b48:	2800      	cmp	r0, #0
 8005b4a:	dc06      	bgt.n	8005b5a <__sflush_r+0xfe>
 8005b4c:	89a3      	ldrh	r3, [r4, #12]
 8005b4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b52:	81a3      	strh	r3, [r4, #12]
 8005b54:	f04f 30ff 	mov.w	r0, #4294967295
 8005b58:	e78e      	b.n	8005a78 <__sflush_r+0x1c>
 8005b5a:	4407      	add	r7, r0
 8005b5c:	eba8 0800 	sub.w	r8, r8, r0
 8005b60:	e7e9      	b.n	8005b36 <__sflush_r+0xda>
 8005b62:	bf00      	nop
 8005b64:	20400001 	.word	0x20400001

08005b68 <_fflush_r>:
 8005b68:	b538      	push	{r3, r4, r5, lr}
 8005b6a:	690b      	ldr	r3, [r1, #16]
 8005b6c:	4605      	mov	r5, r0
 8005b6e:	460c      	mov	r4, r1
 8005b70:	b1db      	cbz	r3, 8005baa <_fflush_r+0x42>
 8005b72:	b118      	cbz	r0, 8005b7c <_fflush_r+0x14>
 8005b74:	6983      	ldr	r3, [r0, #24]
 8005b76:	b90b      	cbnz	r3, 8005b7c <_fflush_r+0x14>
 8005b78:	f000 f860 	bl	8005c3c <__sinit>
 8005b7c:	4b0c      	ldr	r3, [pc, #48]	; (8005bb0 <_fflush_r+0x48>)
 8005b7e:	429c      	cmp	r4, r3
 8005b80:	d109      	bne.n	8005b96 <_fflush_r+0x2e>
 8005b82:	686c      	ldr	r4, [r5, #4]
 8005b84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b88:	b17b      	cbz	r3, 8005baa <_fflush_r+0x42>
 8005b8a:	4621      	mov	r1, r4
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b92:	f7ff bf63 	b.w	8005a5c <__sflush_r>
 8005b96:	4b07      	ldr	r3, [pc, #28]	; (8005bb4 <_fflush_r+0x4c>)
 8005b98:	429c      	cmp	r4, r3
 8005b9a:	d101      	bne.n	8005ba0 <_fflush_r+0x38>
 8005b9c:	68ac      	ldr	r4, [r5, #8]
 8005b9e:	e7f1      	b.n	8005b84 <_fflush_r+0x1c>
 8005ba0:	4b05      	ldr	r3, [pc, #20]	; (8005bb8 <_fflush_r+0x50>)
 8005ba2:	429c      	cmp	r4, r3
 8005ba4:	bf08      	it	eq
 8005ba6:	68ec      	ldreq	r4, [r5, #12]
 8005ba8:	e7ec      	b.n	8005b84 <_fflush_r+0x1c>
 8005baa:	2000      	movs	r0, #0
 8005bac:	bd38      	pop	{r3, r4, r5, pc}
 8005bae:	bf00      	nop
 8005bb0:	08018b74 	.word	0x08018b74
 8005bb4:	08018b94 	.word	0x08018b94
 8005bb8:	08018b54 	.word	0x08018b54

08005bbc <std>:
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	b510      	push	{r4, lr}
 8005bc0:	4604      	mov	r4, r0
 8005bc2:	e9c0 3300 	strd	r3, r3, [r0]
 8005bc6:	6083      	str	r3, [r0, #8]
 8005bc8:	8181      	strh	r1, [r0, #12]
 8005bca:	6643      	str	r3, [r0, #100]	; 0x64
 8005bcc:	81c2      	strh	r2, [r0, #14]
 8005bce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005bd2:	6183      	str	r3, [r0, #24]
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	2208      	movs	r2, #8
 8005bd8:	305c      	adds	r0, #92	; 0x5c
 8005bda:	f7ff fdd5 	bl	8005788 <memset>
 8005bde:	4b05      	ldr	r3, [pc, #20]	; (8005bf4 <std+0x38>)
 8005be0:	6263      	str	r3, [r4, #36]	; 0x24
 8005be2:	4b05      	ldr	r3, [pc, #20]	; (8005bf8 <std+0x3c>)
 8005be4:	62a3      	str	r3, [r4, #40]	; 0x28
 8005be6:	4b05      	ldr	r3, [pc, #20]	; (8005bfc <std+0x40>)
 8005be8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005bea:	4b05      	ldr	r3, [pc, #20]	; (8005c00 <std+0x44>)
 8005bec:	6224      	str	r4, [r4, #32]
 8005bee:	6323      	str	r3, [r4, #48]	; 0x30
 8005bf0:	bd10      	pop	{r4, pc}
 8005bf2:	bf00      	nop
 8005bf4:	08005f89 	.word	0x08005f89
 8005bf8:	08005fab 	.word	0x08005fab
 8005bfc:	08005fe3 	.word	0x08005fe3
 8005c00:	08006007 	.word	0x08006007

08005c04 <_cleanup_r>:
 8005c04:	4901      	ldr	r1, [pc, #4]	; (8005c0c <_cleanup_r+0x8>)
 8005c06:	f000 b885 	b.w	8005d14 <_fwalk_reent>
 8005c0a:	bf00      	nop
 8005c0c:	08005b69 	.word	0x08005b69

08005c10 <__sfmoreglue>:
 8005c10:	b570      	push	{r4, r5, r6, lr}
 8005c12:	1e4a      	subs	r2, r1, #1
 8005c14:	2568      	movs	r5, #104	; 0x68
 8005c16:	4355      	muls	r5, r2
 8005c18:	460e      	mov	r6, r1
 8005c1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005c1e:	f000 f949 	bl	8005eb4 <_malloc_r>
 8005c22:	4604      	mov	r4, r0
 8005c24:	b140      	cbz	r0, 8005c38 <__sfmoreglue+0x28>
 8005c26:	2100      	movs	r1, #0
 8005c28:	e9c0 1600 	strd	r1, r6, [r0]
 8005c2c:	300c      	adds	r0, #12
 8005c2e:	60a0      	str	r0, [r4, #8]
 8005c30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005c34:	f7ff fda8 	bl	8005788 <memset>
 8005c38:	4620      	mov	r0, r4
 8005c3a:	bd70      	pop	{r4, r5, r6, pc}

08005c3c <__sinit>:
 8005c3c:	6983      	ldr	r3, [r0, #24]
 8005c3e:	b510      	push	{r4, lr}
 8005c40:	4604      	mov	r4, r0
 8005c42:	bb33      	cbnz	r3, 8005c92 <__sinit+0x56>
 8005c44:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005c48:	6503      	str	r3, [r0, #80]	; 0x50
 8005c4a:	4b12      	ldr	r3, [pc, #72]	; (8005c94 <__sinit+0x58>)
 8005c4c:	4a12      	ldr	r2, [pc, #72]	; (8005c98 <__sinit+0x5c>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	6282      	str	r2, [r0, #40]	; 0x28
 8005c52:	4298      	cmp	r0, r3
 8005c54:	bf04      	itt	eq
 8005c56:	2301      	moveq	r3, #1
 8005c58:	6183      	streq	r3, [r0, #24]
 8005c5a:	f000 f81f 	bl	8005c9c <__sfp>
 8005c5e:	6060      	str	r0, [r4, #4]
 8005c60:	4620      	mov	r0, r4
 8005c62:	f000 f81b 	bl	8005c9c <__sfp>
 8005c66:	60a0      	str	r0, [r4, #8]
 8005c68:	4620      	mov	r0, r4
 8005c6a:	f000 f817 	bl	8005c9c <__sfp>
 8005c6e:	2200      	movs	r2, #0
 8005c70:	60e0      	str	r0, [r4, #12]
 8005c72:	2104      	movs	r1, #4
 8005c74:	6860      	ldr	r0, [r4, #4]
 8005c76:	f7ff ffa1 	bl	8005bbc <std>
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	2109      	movs	r1, #9
 8005c7e:	68a0      	ldr	r0, [r4, #8]
 8005c80:	f7ff ff9c 	bl	8005bbc <std>
 8005c84:	2202      	movs	r2, #2
 8005c86:	2112      	movs	r1, #18
 8005c88:	68e0      	ldr	r0, [r4, #12]
 8005c8a:	f7ff ff97 	bl	8005bbc <std>
 8005c8e:	2301      	movs	r3, #1
 8005c90:	61a3      	str	r3, [r4, #24]
 8005c92:	bd10      	pop	{r4, pc}
 8005c94:	08018b28 	.word	0x08018b28
 8005c98:	08005c05 	.word	0x08005c05

08005c9c <__sfp>:
 8005c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c9e:	4b1b      	ldr	r3, [pc, #108]	; (8005d0c <__sfp+0x70>)
 8005ca0:	681e      	ldr	r6, [r3, #0]
 8005ca2:	69b3      	ldr	r3, [r6, #24]
 8005ca4:	4607      	mov	r7, r0
 8005ca6:	b913      	cbnz	r3, 8005cae <__sfp+0x12>
 8005ca8:	4630      	mov	r0, r6
 8005caa:	f7ff ffc7 	bl	8005c3c <__sinit>
 8005cae:	3648      	adds	r6, #72	; 0x48
 8005cb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	d503      	bpl.n	8005cc0 <__sfp+0x24>
 8005cb8:	6833      	ldr	r3, [r6, #0]
 8005cba:	b133      	cbz	r3, 8005cca <__sfp+0x2e>
 8005cbc:	6836      	ldr	r6, [r6, #0]
 8005cbe:	e7f7      	b.n	8005cb0 <__sfp+0x14>
 8005cc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005cc4:	b16d      	cbz	r5, 8005ce2 <__sfp+0x46>
 8005cc6:	3468      	adds	r4, #104	; 0x68
 8005cc8:	e7f4      	b.n	8005cb4 <__sfp+0x18>
 8005cca:	2104      	movs	r1, #4
 8005ccc:	4638      	mov	r0, r7
 8005cce:	f7ff ff9f 	bl	8005c10 <__sfmoreglue>
 8005cd2:	6030      	str	r0, [r6, #0]
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	d1f1      	bne.n	8005cbc <__sfp+0x20>
 8005cd8:	230c      	movs	r3, #12
 8005cda:	603b      	str	r3, [r7, #0]
 8005cdc:	4604      	mov	r4, r0
 8005cde:	4620      	mov	r0, r4
 8005ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ce2:	4b0b      	ldr	r3, [pc, #44]	; (8005d10 <__sfp+0x74>)
 8005ce4:	6665      	str	r5, [r4, #100]	; 0x64
 8005ce6:	e9c4 5500 	strd	r5, r5, [r4]
 8005cea:	60a5      	str	r5, [r4, #8]
 8005cec:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005cf0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005cf4:	2208      	movs	r2, #8
 8005cf6:	4629      	mov	r1, r5
 8005cf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005cfc:	f7ff fd44 	bl	8005788 <memset>
 8005d00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005d04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005d08:	e7e9      	b.n	8005cde <__sfp+0x42>
 8005d0a:	bf00      	nop
 8005d0c:	08018b28 	.word	0x08018b28
 8005d10:	ffff0001 	.word	0xffff0001

08005d14 <_fwalk_reent>:
 8005d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d18:	4680      	mov	r8, r0
 8005d1a:	4689      	mov	r9, r1
 8005d1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d20:	2600      	movs	r6, #0
 8005d22:	b914      	cbnz	r4, 8005d2a <_fwalk_reent+0x16>
 8005d24:	4630      	mov	r0, r6
 8005d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d2a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005d2e:	3f01      	subs	r7, #1
 8005d30:	d501      	bpl.n	8005d36 <_fwalk_reent+0x22>
 8005d32:	6824      	ldr	r4, [r4, #0]
 8005d34:	e7f5      	b.n	8005d22 <_fwalk_reent+0xe>
 8005d36:	89ab      	ldrh	r3, [r5, #12]
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d907      	bls.n	8005d4c <_fwalk_reent+0x38>
 8005d3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d40:	3301      	adds	r3, #1
 8005d42:	d003      	beq.n	8005d4c <_fwalk_reent+0x38>
 8005d44:	4629      	mov	r1, r5
 8005d46:	4640      	mov	r0, r8
 8005d48:	47c8      	blx	r9
 8005d4a:	4306      	orrs	r6, r0
 8005d4c:	3568      	adds	r5, #104	; 0x68
 8005d4e:	e7ee      	b.n	8005d2e <_fwalk_reent+0x1a>

08005d50 <__swhatbuf_r>:
 8005d50:	b570      	push	{r4, r5, r6, lr}
 8005d52:	460e      	mov	r6, r1
 8005d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d58:	2900      	cmp	r1, #0
 8005d5a:	b096      	sub	sp, #88	; 0x58
 8005d5c:	4614      	mov	r4, r2
 8005d5e:	461d      	mov	r5, r3
 8005d60:	da07      	bge.n	8005d72 <__swhatbuf_r+0x22>
 8005d62:	2300      	movs	r3, #0
 8005d64:	602b      	str	r3, [r5, #0]
 8005d66:	89b3      	ldrh	r3, [r6, #12]
 8005d68:	061a      	lsls	r2, r3, #24
 8005d6a:	d410      	bmi.n	8005d8e <__swhatbuf_r+0x3e>
 8005d6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d70:	e00e      	b.n	8005d90 <__swhatbuf_r+0x40>
 8005d72:	466a      	mov	r2, sp
 8005d74:	f000 f96e 	bl	8006054 <_fstat_r>
 8005d78:	2800      	cmp	r0, #0
 8005d7a:	dbf2      	blt.n	8005d62 <__swhatbuf_r+0x12>
 8005d7c:	9a01      	ldr	r2, [sp, #4]
 8005d7e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005d82:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005d86:	425a      	negs	r2, r3
 8005d88:	415a      	adcs	r2, r3
 8005d8a:	602a      	str	r2, [r5, #0]
 8005d8c:	e7ee      	b.n	8005d6c <__swhatbuf_r+0x1c>
 8005d8e:	2340      	movs	r3, #64	; 0x40
 8005d90:	2000      	movs	r0, #0
 8005d92:	6023      	str	r3, [r4, #0]
 8005d94:	b016      	add	sp, #88	; 0x58
 8005d96:	bd70      	pop	{r4, r5, r6, pc}

08005d98 <__smakebuf_r>:
 8005d98:	898b      	ldrh	r3, [r1, #12]
 8005d9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d9c:	079d      	lsls	r5, r3, #30
 8005d9e:	4606      	mov	r6, r0
 8005da0:	460c      	mov	r4, r1
 8005da2:	d507      	bpl.n	8005db4 <__smakebuf_r+0x1c>
 8005da4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005da8:	6023      	str	r3, [r4, #0]
 8005daa:	6123      	str	r3, [r4, #16]
 8005dac:	2301      	movs	r3, #1
 8005dae:	6163      	str	r3, [r4, #20]
 8005db0:	b002      	add	sp, #8
 8005db2:	bd70      	pop	{r4, r5, r6, pc}
 8005db4:	ab01      	add	r3, sp, #4
 8005db6:	466a      	mov	r2, sp
 8005db8:	f7ff ffca 	bl	8005d50 <__swhatbuf_r>
 8005dbc:	9900      	ldr	r1, [sp, #0]
 8005dbe:	4605      	mov	r5, r0
 8005dc0:	4630      	mov	r0, r6
 8005dc2:	f000 f877 	bl	8005eb4 <_malloc_r>
 8005dc6:	b948      	cbnz	r0, 8005ddc <__smakebuf_r+0x44>
 8005dc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dcc:	059a      	lsls	r2, r3, #22
 8005dce:	d4ef      	bmi.n	8005db0 <__smakebuf_r+0x18>
 8005dd0:	f023 0303 	bic.w	r3, r3, #3
 8005dd4:	f043 0302 	orr.w	r3, r3, #2
 8005dd8:	81a3      	strh	r3, [r4, #12]
 8005dda:	e7e3      	b.n	8005da4 <__smakebuf_r+0xc>
 8005ddc:	4b0d      	ldr	r3, [pc, #52]	; (8005e14 <__smakebuf_r+0x7c>)
 8005dde:	62b3      	str	r3, [r6, #40]	; 0x28
 8005de0:	89a3      	ldrh	r3, [r4, #12]
 8005de2:	6020      	str	r0, [r4, #0]
 8005de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005de8:	81a3      	strh	r3, [r4, #12]
 8005dea:	9b00      	ldr	r3, [sp, #0]
 8005dec:	6163      	str	r3, [r4, #20]
 8005dee:	9b01      	ldr	r3, [sp, #4]
 8005df0:	6120      	str	r0, [r4, #16]
 8005df2:	b15b      	cbz	r3, 8005e0c <__smakebuf_r+0x74>
 8005df4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005df8:	4630      	mov	r0, r6
 8005dfa:	f000 f93d 	bl	8006078 <_isatty_r>
 8005dfe:	b128      	cbz	r0, 8005e0c <__smakebuf_r+0x74>
 8005e00:	89a3      	ldrh	r3, [r4, #12]
 8005e02:	f023 0303 	bic.w	r3, r3, #3
 8005e06:	f043 0301 	orr.w	r3, r3, #1
 8005e0a:	81a3      	strh	r3, [r4, #12]
 8005e0c:	89a3      	ldrh	r3, [r4, #12]
 8005e0e:	431d      	orrs	r5, r3
 8005e10:	81a5      	strh	r5, [r4, #12]
 8005e12:	e7cd      	b.n	8005db0 <__smakebuf_r+0x18>
 8005e14:	08005c05 	.word	0x08005c05

08005e18 <_free_r>:
 8005e18:	b538      	push	{r3, r4, r5, lr}
 8005e1a:	4605      	mov	r5, r0
 8005e1c:	2900      	cmp	r1, #0
 8005e1e:	d045      	beq.n	8005eac <_free_r+0x94>
 8005e20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e24:	1f0c      	subs	r4, r1, #4
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	bfb8      	it	lt
 8005e2a:	18e4      	addlt	r4, r4, r3
 8005e2c:	f000 f946 	bl	80060bc <__malloc_lock>
 8005e30:	4a1f      	ldr	r2, [pc, #124]	; (8005eb0 <_free_r+0x98>)
 8005e32:	6813      	ldr	r3, [r2, #0]
 8005e34:	4610      	mov	r0, r2
 8005e36:	b933      	cbnz	r3, 8005e46 <_free_r+0x2e>
 8005e38:	6063      	str	r3, [r4, #4]
 8005e3a:	6014      	str	r4, [r2, #0]
 8005e3c:	4628      	mov	r0, r5
 8005e3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e42:	f000 b93c 	b.w	80060be <__malloc_unlock>
 8005e46:	42a3      	cmp	r3, r4
 8005e48:	d90c      	bls.n	8005e64 <_free_r+0x4c>
 8005e4a:	6821      	ldr	r1, [r4, #0]
 8005e4c:	1862      	adds	r2, r4, r1
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	bf04      	itt	eq
 8005e52:	681a      	ldreq	r2, [r3, #0]
 8005e54:	685b      	ldreq	r3, [r3, #4]
 8005e56:	6063      	str	r3, [r4, #4]
 8005e58:	bf04      	itt	eq
 8005e5a:	1852      	addeq	r2, r2, r1
 8005e5c:	6022      	streq	r2, [r4, #0]
 8005e5e:	6004      	str	r4, [r0, #0]
 8005e60:	e7ec      	b.n	8005e3c <_free_r+0x24>
 8005e62:	4613      	mov	r3, r2
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	b10a      	cbz	r2, 8005e6c <_free_r+0x54>
 8005e68:	42a2      	cmp	r2, r4
 8005e6a:	d9fa      	bls.n	8005e62 <_free_r+0x4a>
 8005e6c:	6819      	ldr	r1, [r3, #0]
 8005e6e:	1858      	adds	r0, r3, r1
 8005e70:	42a0      	cmp	r0, r4
 8005e72:	d10b      	bne.n	8005e8c <_free_r+0x74>
 8005e74:	6820      	ldr	r0, [r4, #0]
 8005e76:	4401      	add	r1, r0
 8005e78:	1858      	adds	r0, r3, r1
 8005e7a:	4282      	cmp	r2, r0
 8005e7c:	6019      	str	r1, [r3, #0]
 8005e7e:	d1dd      	bne.n	8005e3c <_free_r+0x24>
 8005e80:	6810      	ldr	r0, [r2, #0]
 8005e82:	6852      	ldr	r2, [r2, #4]
 8005e84:	605a      	str	r2, [r3, #4]
 8005e86:	4401      	add	r1, r0
 8005e88:	6019      	str	r1, [r3, #0]
 8005e8a:	e7d7      	b.n	8005e3c <_free_r+0x24>
 8005e8c:	d902      	bls.n	8005e94 <_free_r+0x7c>
 8005e8e:	230c      	movs	r3, #12
 8005e90:	602b      	str	r3, [r5, #0]
 8005e92:	e7d3      	b.n	8005e3c <_free_r+0x24>
 8005e94:	6820      	ldr	r0, [r4, #0]
 8005e96:	1821      	adds	r1, r4, r0
 8005e98:	428a      	cmp	r2, r1
 8005e9a:	bf04      	itt	eq
 8005e9c:	6811      	ldreq	r1, [r2, #0]
 8005e9e:	6852      	ldreq	r2, [r2, #4]
 8005ea0:	6062      	str	r2, [r4, #4]
 8005ea2:	bf04      	itt	eq
 8005ea4:	1809      	addeq	r1, r1, r0
 8005ea6:	6021      	streq	r1, [r4, #0]
 8005ea8:	605c      	str	r4, [r3, #4]
 8005eaa:	e7c7      	b.n	8005e3c <_free_r+0x24>
 8005eac:	bd38      	pop	{r3, r4, r5, pc}
 8005eae:	bf00      	nop
 8005eb0:	200000a0 	.word	0x200000a0

08005eb4 <_malloc_r>:
 8005eb4:	b570      	push	{r4, r5, r6, lr}
 8005eb6:	1ccd      	adds	r5, r1, #3
 8005eb8:	f025 0503 	bic.w	r5, r5, #3
 8005ebc:	3508      	adds	r5, #8
 8005ebe:	2d0c      	cmp	r5, #12
 8005ec0:	bf38      	it	cc
 8005ec2:	250c      	movcc	r5, #12
 8005ec4:	2d00      	cmp	r5, #0
 8005ec6:	4606      	mov	r6, r0
 8005ec8:	db01      	blt.n	8005ece <_malloc_r+0x1a>
 8005eca:	42a9      	cmp	r1, r5
 8005ecc:	d903      	bls.n	8005ed6 <_malloc_r+0x22>
 8005ece:	230c      	movs	r3, #12
 8005ed0:	6033      	str	r3, [r6, #0]
 8005ed2:	2000      	movs	r0, #0
 8005ed4:	bd70      	pop	{r4, r5, r6, pc}
 8005ed6:	f000 f8f1 	bl	80060bc <__malloc_lock>
 8005eda:	4a21      	ldr	r2, [pc, #132]	; (8005f60 <_malloc_r+0xac>)
 8005edc:	6814      	ldr	r4, [r2, #0]
 8005ede:	4621      	mov	r1, r4
 8005ee0:	b991      	cbnz	r1, 8005f08 <_malloc_r+0x54>
 8005ee2:	4c20      	ldr	r4, [pc, #128]	; (8005f64 <_malloc_r+0xb0>)
 8005ee4:	6823      	ldr	r3, [r4, #0]
 8005ee6:	b91b      	cbnz	r3, 8005ef0 <_malloc_r+0x3c>
 8005ee8:	4630      	mov	r0, r6
 8005eea:	f000 f83d 	bl	8005f68 <_sbrk_r>
 8005eee:	6020      	str	r0, [r4, #0]
 8005ef0:	4629      	mov	r1, r5
 8005ef2:	4630      	mov	r0, r6
 8005ef4:	f000 f838 	bl	8005f68 <_sbrk_r>
 8005ef8:	1c43      	adds	r3, r0, #1
 8005efa:	d124      	bne.n	8005f46 <_malloc_r+0x92>
 8005efc:	230c      	movs	r3, #12
 8005efe:	6033      	str	r3, [r6, #0]
 8005f00:	4630      	mov	r0, r6
 8005f02:	f000 f8dc 	bl	80060be <__malloc_unlock>
 8005f06:	e7e4      	b.n	8005ed2 <_malloc_r+0x1e>
 8005f08:	680b      	ldr	r3, [r1, #0]
 8005f0a:	1b5b      	subs	r3, r3, r5
 8005f0c:	d418      	bmi.n	8005f40 <_malloc_r+0x8c>
 8005f0e:	2b0b      	cmp	r3, #11
 8005f10:	d90f      	bls.n	8005f32 <_malloc_r+0x7e>
 8005f12:	600b      	str	r3, [r1, #0]
 8005f14:	50cd      	str	r5, [r1, r3]
 8005f16:	18cc      	adds	r4, r1, r3
 8005f18:	4630      	mov	r0, r6
 8005f1a:	f000 f8d0 	bl	80060be <__malloc_unlock>
 8005f1e:	f104 000b 	add.w	r0, r4, #11
 8005f22:	1d23      	adds	r3, r4, #4
 8005f24:	f020 0007 	bic.w	r0, r0, #7
 8005f28:	1ac3      	subs	r3, r0, r3
 8005f2a:	d0d3      	beq.n	8005ed4 <_malloc_r+0x20>
 8005f2c:	425a      	negs	r2, r3
 8005f2e:	50e2      	str	r2, [r4, r3]
 8005f30:	e7d0      	b.n	8005ed4 <_malloc_r+0x20>
 8005f32:	428c      	cmp	r4, r1
 8005f34:	684b      	ldr	r3, [r1, #4]
 8005f36:	bf16      	itet	ne
 8005f38:	6063      	strne	r3, [r4, #4]
 8005f3a:	6013      	streq	r3, [r2, #0]
 8005f3c:	460c      	movne	r4, r1
 8005f3e:	e7eb      	b.n	8005f18 <_malloc_r+0x64>
 8005f40:	460c      	mov	r4, r1
 8005f42:	6849      	ldr	r1, [r1, #4]
 8005f44:	e7cc      	b.n	8005ee0 <_malloc_r+0x2c>
 8005f46:	1cc4      	adds	r4, r0, #3
 8005f48:	f024 0403 	bic.w	r4, r4, #3
 8005f4c:	42a0      	cmp	r0, r4
 8005f4e:	d005      	beq.n	8005f5c <_malloc_r+0xa8>
 8005f50:	1a21      	subs	r1, r4, r0
 8005f52:	4630      	mov	r0, r6
 8005f54:	f000 f808 	bl	8005f68 <_sbrk_r>
 8005f58:	3001      	adds	r0, #1
 8005f5a:	d0cf      	beq.n	8005efc <_malloc_r+0x48>
 8005f5c:	6025      	str	r5, [r4, #0]
 8005f5e:	e7db      	b.n	8005f18 <_malloc_r+0x64>
 8005f60:	200000a0 	.word	0x200000a0
 8005f64:	200000a4 	.word	0x200000a4

08005f68 <_sbrk_r>:
 8005f68:	b538      	push	{r3, r4, r5, lr}
 8005f6a:	4c06      	ldr	r4, [pc, #24]	; (8005f84 <_sbrk_r+0x1c>)
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	4605      	mov	r5, r0
 8005f70:	4608      	mov	r0, r1
 8005f72:	6023      	str	r3, [r4, #0]
 8005f74:	f7fb fa5c 	bl	8001430 <_sbrk>
 8005f78:	1c43      	adds	r3, r0, #1
 8005f7a:	d102      	bne.n	8005f82 <_sbrk_r+0x1a>
 8005f7c:	6823      	ldr	r3, [r4, #0]
 8005f7e:	b103      	cbz	r3, 8005f82 <_sbrk_r+0x1a>
 8005f80:	602b      	str	r3, [r5, #0]
 8005f82:	bd38      	pop	{r3, r4, r5, pc}
 8005f84:	200002ac 	.word	0x200002ac

08005f88 <__sread>:
 8005f88:	b510      	push	{r4, lr}
 8005f8a:	460c      	mov	r4, r1
 8005f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f90:	f000 f896 	bl	80060c0 <_read_r>
 8005f94:	2800      	cmp	r0, #0
 8005f96:	bfab      	itete	ge
 8005f98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005f9a:	89a3      	ldrhlt	r3, [r4, #12]
 8005f9c:	181b      	addge	r3, r3, r0
 8005f9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005fa2:	bfac      	ite	ge
 8005fa4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005fa6:	81a3      	strhlt	r3, [r4, #12]
 8005fa8:	bd10      	pop	{r4, pc}

08005faa <__swrite>:
 8005faa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fae:	461f      	mov	r7, r3
 8005fb0:	898b      	ldrh	r3, [r1, #12]
 8005fb2:	05db      	lsls	r3, r3, #23
 8005fb4:	4605      	mov	r5, r0
 8005fb6:	460c      	mov	r4, r1
 8005fb8:	4616      	mov	r6, r2
 8005fba:	d505      	bpl.n	8005fc8 <__swrite+0x1e>
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fc4:	f000 f868 	bl	8006098 <_lseek_r>
 8005fc8:	89a3      	ldrh	r3, [r4, #12]
 8005fca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fd2:	81a3      	strh	r3, [r4, #12]
 8005fd4:	4632      	mov	r2, r6
 8005fd6:	463b      	mov	r3, r7
 8005fd8:	4628      	mov	r0, r5
 8005fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fde:	f000 b817 	b.w	8006010 <_write_r>

08005fe2 <__sseek>:
 8005fe2:	b510      	push	{r4, lr}
 8005fe4:	460c      	mov	r4, r1
 8005fe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fea:	f000 f855 	bl	8006098 <_lseek_r>
 8005fee:	1c43      	adds	r3, r0, #1
 8005ff0:	89a3      	ldrh	r3, [r4, #12]
 8005ff2:	bf15      	itete	ne
 8005ff4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ff6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ffa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005ffe:	81a3      	strheq	r3, [r4, #12]
 8006000:	bf18      	it	ne
 8006002:	81a3      	strhne	r3, [r4, #12]
 8006004:	bd10      	pop	{r4, pc}

08006006 <__sclose>:
 8006006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800600a:	f000 b813 	b.w	8006034 <_close_r>
	...

08006010 <_write_r>:
 8006010:	b538      	push	{r3, r4, r5, lr}
 8006012:	4c07      	ldr	r4, [pc, #28]	; (8006030 <_write_r+0x20>)
 8006014:	4605      	mov	r5, r0
 8006016:	4608      	mov	r0, r1
 8006018:	4611      	mov	r1, r2
 800601a:	2200      	movs	r2, #0
 800601c:	6022      	str	r2, [r4, #0]
 800601e:	461a      	mov	r2, r3
 8006020:	f7fb f9b5 	bl	800138e <_write>
 8006024:	1c43      	adds	r3, r0, #1
 8006026:	d102      	bne.n	800602e <_write_r+0x1e>
 8006028:	6823      	ldr	r3, [r4, #0]
 800602a:	b103      	cbz	r3, 800602e <_write_r+0x1e>
 800602c:	602b      	str	r3, [r5, #0]
 800602e:	bd38      	pop	{r3, r4, r5, pc}
 8006030:	200002ac 	.word	0x200002ac

08006034 <_close_r>:
 8006034:	b538      	push	{r3, r4, r5, lr}
 8006036:	4c06      	ldr	r4, [pc, #24]	; (8006050 <_close_r+0x1c>)
 8006038:	2300      	movs	r3, #0
 800603a:	4605      	mov	r5, r0
 800603c:	4608      	mov	r0, r1
 800603e:	6023      	str	r3, [r4, #0]
 8006040:	f7fb f9c1 	bl	80013c6 <_close>
 8006044:	1c43      	adds	r3, r0, #1
 8006046:	d102      	bne.n	800604e <_close_r+0x1a>
 8006048:	6823      	ldr	r3, [r4, #0]
 800604a:	b103      	cbz	r3, 800604e <_close_r+0x1a>
 800604c:	602b      	str	r3, [r5, #0]
 800604e:	bd38      	pop	{r3, r4, r5, pc}
 8006050:	200002ac 	.word	0x200002ac

08006054 <_fstat_r>:
 8006054:	b538      	push	{r3, r4, r5, lr}
 8006056:	4c07      	ldr	r4, [pc, #28]	; (8006074 <_fstat_r+0x20>)
 8006058:	2300      	movs	r3, #0
 800605a:	4605      	mov	r5, r0
 800605c:	4608      	mov	r0, r1
 800605e:	4611      	mov	r1, r2
 8006060:	6023      	str	r3, [r4, #0]
 8006062:	f7fb f9bc 	bl	80013de <_fstat>
 8006066:	1c43      	adds	r3, r0, #1
 8006068:	d102      	bne.n	8006070 <_fstat_r+0x1c>
 800606a:	6823      	ldr	r3, [r4, #0]
 800606c:	b103      	cbz	r3, 8006070 <_fstat_r+0x1c>
 800606e:	602b      	str	r3, [r5, #0]
 8006070:	bd38      	pop	{r3, r4, r5, pc}
 8006072:	bf00      	nop
 8006074:	200002ac 	.word	0x200002ac

08006078 <_isatty_r>:
 8006078:	b538      	push	{r3, r4, r5, lr}
 800607a:	4c06      	ldr	r4, [pc, #24]	; (8006094 <_isatty_r+0x1c>)
 800607c:	2300      	movs	r3, #0
 800607e:	4605      	mov	r5, r0
 8006080:	4608      	mov	r0, r1
 8006082:	6023      	str	r3, [r4, #0]
 8006084:	f7fb f9bb 	bl	80013fe <_isatty>
 8006088:	1c43      	adds	r3, r0, #1
 800608a:	d102      	bne.n	8006092 <_isatty_r+0x1a>
 800608c:	6823      	ldr	r3, [r4, #0]
 800608e:	b103      	cbz	r3, 8006092 <_isatty_r+0x1a>
 8006090:	602b      	str	r3, [r5, #0]
 8006092:	bd38      	pop	{r3, r4, r5, pc}
 8006094:	200002ac 	.word	0x200002ac

08006098 <_lseek_r>:
 8006098:	b538      	push	{r3, r4, r5, lr}
 800609a:	4c07      	ldr	r4, [pc, #28]	; (80060b8 <_lseek_r+0x20>)
 800609c:	4605      	mov	r5, r0
 800609e:	4608      	mov	r0, r1
 80060a0:	4611      	mov	r1, r2
 80060a2:	2200      	movs	r2, #0
 80060a4:	6022      	str	r2, [r4, #0]
 80060a6:	461a      	mov	r2, r3
 80060a8:	f7fb f9b4 	bl	8001414 <_lseek>
 80060ac:	1c43      	adds	r3, r0, #1
 80060ae:	d102      	bne.n	80060b6 <_lseek_r+0x1e>
 80060b0:	6823      	ldr	r3, [r4, #0]
 80060b2:	b103      	cbz	r3, 80060b6 <_lseek_r+0x1e>
 80060b4:	602b      	str	r3, [r5, #0]
 80060b6:	bd38      	pop	{r3, r4, r5, pc}
 80060b8:	200002ac 	.word	0x200002ac

080060bc <__malloc_lock>:
 80060bc:	4770      	bx	lr

080060be <__malloc_unlock>:
 80060be:	4770      	bx	lr

080060c0 <_read_r>:
 80060c0:	b538      	push	{r3, r4, r5, lr}
 80060c2:	4c07      	ldr	r4, [pc, #28]	; (80060e0 <_read_r+0x20>)
 80060c4:	4605      	mov	r5, r0
 80060c6:	4608      	mov	r0, r1
 80060c8:	4611      	mov	r1, r2
 80060ca:	2200      	movs	r2, #0
 80060cc:	6022      	str	r2, [r4, #0]
 80060ce:	461a      	mov	r2, r3
 80060d0:	f7fb f940 	bl	8001354 <_read>
 80060d4:	1c43      	adds	r3, r0, #1
 80060d6:	d102      	bne.n	80060de <_read_r+0x1e>
 80060d8:	6823      	ldr	r3, [r4, #0]
 80060da:	b103      	cbz	r3, 80060de <_read_r+0x1e>
 80060dc:	602b      	str	r3, [r5, #0]
 80060de:	bd38      	pop	{r3, r4, r5, pc}
 80060e0:	200002ac 	.word	0x200002ac

080060e4 <_init>:
 80060e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e6:	bf00      	nop
 80060e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ea:	bc08      	pop	{r3}
 80060ec:	469e      	mov	lr, r3
 80060ee:	4770      	bx	lr

080060f0 <_fini>:
 80060f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f2:	bf00      	nop
 80060f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060f6:	bc08      	pop	{r3}
 80060f8:	469e      	mov	lr, r3
 80060fa:	4770      	bx	lr
